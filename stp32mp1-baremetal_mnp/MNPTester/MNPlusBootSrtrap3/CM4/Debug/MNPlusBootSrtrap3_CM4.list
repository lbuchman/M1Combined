
MNPlusBootSrtrap3_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  10000000  10000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10005f28  10005f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  10005f78  10005f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10005f88  10005f88  0000800c  2**0
                  CONTENTS
  5 .ARM          00000000  10005f88  10005f88  0000800c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10005f88  10005f88  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10005f88  10005f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  10005f8c  10005f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000000c  10020000  10005f90  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0000800c  2**0
                  CONTENTS
 11 .bss          000000b4  1002000c  10005f9c  0000800c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  100200c0  10006050  0000800c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000edda  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001813  00000000  00000000  00016e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008b0  00000000  00000000  00018630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000689  00000000  00000000  00018ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00040832  00000000  00000000  00019569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b970  00000000  00000000  00059d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001b276a  00000000  00000000  0006570b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00217e75  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000022c4  00000000  00000000  00217eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008e  00000000  00000000  0021a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	10005f10 	.word	0x10005f10

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	10005f10 	.word	0x10005f10

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	@ (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	@ (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	@ (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	@ (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	@ (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	@ (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	@ (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	@ (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000090:	f000 f9fa 	bl	10000488 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000094:	4b06      	ldr	r3, [pc, #24]	@ (100000b0 <main+0x24>)
10000096:	681b      	ldr	r3, [r3, #0]
10000098:	f003 0307 	and.w	r3, r3, #7
1000009c:	2b04      	cmp	r3, #4
1000009e:	d101      	bne.n	100000a4 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000a0:	f000 f808 	bl	100000b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100000a4:	f000 f8f0 	bl	10000288 <MX_GPIO_Init>
  MX_UART4_Init();
100000a8:	f000 f8a2 	bl	100001f0 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
100000ac:	bf00      	nop
100000ae:	e7fd      	b.n	100000ac <main+0x20>
100000b0:	50020000 	.word	0x50020000

100000b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100000b4:	b580      	push	{r7, lr}
100000b6:	b0d2      	sub	sp, #328	@ 0x148
100000b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100000ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100000be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100000c2:	4618      	mov	r0, r3
100000c4:	f44f 738a 	mov.w	r3, #276	@ 0x114
100000c8:	461a      	mov	r2, r3
100000ca:	2100      	movs	r1, #0
100000cc:	f005 fef4 	bl	10005eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100000d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100000d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100000d8:	4618      	mov	r0, r3
100000da:	2330      	movs	r3, #48	@ 0x30
100000dc:	461a      	mov	r2, r3
100000de:	2100      	movs	r1, #0
100000e0:	f005 feea 	bl	10005eb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
100000e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100000e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100000ec:	220a      	movs	r2, #10
100000ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100000f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100000f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100000f8:	2201      	movs	r2, #1
100000fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100000fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000100:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000104:	2200      	movs	r2, #0
10000106:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10000108:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000010c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000110:	2201      	movs	r2, #1
10000112:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000114:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000118:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000011c:	2200      	movs	r2, #0
1000011e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
10000120:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000124:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000128:	2200      	movs	r2, #0
1000012a:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
1000012c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000130:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000134:	2200      	movs	r2, #0
10000136:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
1000013a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000013e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000142:	2200      	movs	r2, #0
10000144:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000148:	f107 0334 	add.w	r3, r7, #52	@ 0x34
1000014c:	4618      	mov	r0, r3
1000014e:	f000 fcc7 	bl	10000ae0 <HAL_RCC_OscConfig>
10000152:	4603      	mov	r3, r0
10000154:	2b00      	cmp	r3, #0
10000156:	d001      	beq.n	1000015c <SystemClock_Config+0xa8>
  {
    Error_Handler();
10000158:	f000 f8a7 	bl	100002aa <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
1000015c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000160:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000164:	22fe      	movs	r2, #254	@ 0xfe
10000166:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000168:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000016c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000170:	2200      	movs	r2, #0
10000172:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000174:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000178:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000017c:	2200      	movs	r2, #0
1000017e:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
10000180:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000184:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000188:	2200      	movs	r2, #0
1000018a:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000018c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000190:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000194:	2200      	movs	r2, #0
10000196:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000198:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000019c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001a0:	2200      	movs	r2, #0
100001a2:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
100001a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001ac:	2200      	movs	r2, #0
100001ae:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
100001b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001b8:	2200      	movs	r2, #0
100001ba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
100001bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001c4:	2200      	movs	r2, #0
100001c6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
100001c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001d0:	2200      	movs	r2, #0
100001d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100001d4:	1d3b      	adds	r3, r7, #4
100001d6:	4618      	mov	r0, r3
100001d8:	f001 fa20 	bl	1000161c <HAL_RCC_ClockConfig>
100001dc:	4603      	mov	r3, r0
100001de:	2b00      	cmp	r3, #0
100001e0:	d001      	beq.n	100001e6 <SystemClock_Config+0x132>
  {
    Error_Handler();
100001e2:	f000 f862 	bl	100002aa <Error_Handler>
  }
}
100001e6:	bf00      	nop
100001e8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100001ec:	46bd      	mov	sp, r7
100001ee:	bd80      	pop	{r7, pc}

100001f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
100001f0:	b580      	push	{r7, lr}
100001f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
100001f4:	4b22      	ldr	r3, [pc, #136]	@ (10000280 <MX_UART4_Init+0x90>)
100001f6:	4a23      	ldr	r2, [pc, #140]	@ (10000284 <MX_UART4_Init+0x94>)
100001f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
100001fa:	4b21      	ldr	r3, [pc, #132]	@ (10000280 <MX_UART4_Init+0x90>)
100001fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
10000200:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
10000202:	4b1f      	ldr	r3, [pc, #124]	@ (10000280 <MX_UART4_Init+0x90>)
10000204:	2200      	movs	r2, #0
10000206:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10000208:	4b1d      	ldr	r3, [pc, #116]	@ (10000280 <MX_UART4_Init+0x90>)
1000020a:	2200      	movs	r2, #0
1000020c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
1000020e:	4b1c      	ldr	r3, [pc, #112]	@ (10000280 <MX_UART4_Init+0x90>)
10000210:	2200      	movs	r2, #0
10000212:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
10000214:	4b1a      	ldr	r3, [pc, #104]	@ (10000280 <MX_UART4_Init+0x90>)
10000216:	220c      	movs	r2, #12
10000218:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1000021a:	4b19      	ldr	r3, [pc, #100]	@ (10000280 <MX_UART4_Init+0x90>)
1000021c:	2200      	movs	r2, #0
1000021e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
10000220:	4b17      	ldr	r3, [pc, #92]	@ (10000280 <MX_UART4_Init+0x90>)
10000222:	2200      	movs	r2, #0
10000224:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10000226:	4b16      	ldr	r3, [pc, #88]	@ (10000280 <MX_UART4_Init+0x90>)
10000228:	2200      	movs	r2, #0
1000022a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1000022c:	4b14      	ldr	r3, [pc, #80]	@ (10000280 <MX_UART4_Init+0x90>)
1000022e:	2200      	movs	r2, #0
10000230:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10000232:	4b13      	ldr	r3, [pc, #76]	@ (10000280 <MX_UART4_Init+0x90>)
10000234:	2200      	movs	r2, #0
10000236:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
10000238:	4811      	ldr	r0, [pc, #68]	@ (10000280 <MX_UART4_Init+0x90>)
1000023a:	f004 fac3 	bl	100047c4 <HAL_UART_Init>
1000023e:	4603      	mov	r3, r0
10000240:	2b00      	cmp	r3, #0
10000242:	d001      	beq.n	10000248 <MX_UART4_Init+0x58>
  {
    Error_Handler();
10000244:	f000 f831 	bl	100002aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10000248:	2100      	movs	r1, #0
1000024a:	480d      	ldr	r0, [pc, #52]	@ (10000280 <MX_UART4_Init+0x90>)
1000024c:	f005 fd53 	bl	10005cf6 <HAL_UARTEx_SetTxFifoThreshold>
10000250:	4603      	mov	r3, r0
10000252:	2b00      	cmp	r3, #0
10000254:	d001      	beq.n	1000025a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
10000256:	f000 f828 	bl	100002aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1000025a:	2100      	movs	r1, #0
1000025c:	4808      	ldr	r0, [pc, #32]	@ (10000280 <MX_UART4_Init+0x90>)
1000025e:	f005 fd88 	bl	10005d72 <HAL_UARTEx_SetRxFifoThreshold>
10000262:	4603      	mov	r3, r0
10000264:	2b00      	cmp	r3, #0
10000266:	d001      	beq.n	1000026c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
10000268:	f000 f81f 	bl	100002aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
1000026c:	4804      	ldr	r0, [pc, #16]	@ (10000280 <MX_UART4_Init+0x90>)
1000026e:	f005 fd09 	bl	10005c84 <HAL_UARTEx_DisableFifoMode>
10000272:	4603      	mov	r3, r0
10000274:	2b00      	cmp	r3, #0
10000276:	d001      	beq.n	1000027c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
10000278:	f000 f817 	bl	100002aa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
1000027c:	bf00      	nop
1000027e:	bd80      	pop	{r7, pc}
10000280:	10020028 	.word	0x10020028
10000284:	40010000 	.word	0x40010000

10000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10000288:	b480      	push	{r7}
1000028a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
1000028c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000290:	2208      	movs	r2, #8
10000292:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000296:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000029a:	2280      	movs	r2, #128	@ 0x80
1000029c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
100002a0:	bf00      	nop
100002a2:	46bd      	mov	sp, r7
100002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100002a8:	4770      	bx	lr

100002aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100002aa:	b480      	push	{r7}
100002ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100002ae:	b672      	cpsid	i
}
100002b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100002b2:	bf00      	nop
100002b4:	e7fd      	b.n	100002b2 <Error_Handler+0x8>

100002b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100002b6:	b580      	push	{r7, lr}
100002b8:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100002ba:	2200      	movs	r2, #0
100002bc:	2101      	movs	r1, #1
100002be:	f06f 000b 	mvn.w	r0, #11
100002c2:	f000 fa2c 	bl	1000071e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100002c6:	2200      	movs	r2, #0
100002c8:	2101      	movs	r1, #1
100002ca:	f06f 000a 	mvn.w	r0, #10
100002ce:	f000 fa26 	bl	1000071e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100002d2:	2200      	movs	r2, #0
100002d4:	2101      	movs	r1, #1
100002d6:	f06f 0009 	mvn.w	r0, #9
100002da:	f000 fa20 	bl	1000071e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100002de:	2200      	movs	r2, #0
100002e0:	2101      	movs	r1, #1
100002e2:	f06f 0004 	mvn.w	r0, #4
100002e6:	f000 fa1a 	bl	1000071e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100002ea:	2200      	movs	r2, #0
100002ec:	2101      	movs	r1, #1
100002ee:	f06f 0003 	mvn.w	r0, #3
100002f2:	f000 fa14 	bl	1000071e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100002f6:	2200      	movs	r2, #0
100002f8:	2101      	movs	r1, #1
100002fa:	f06f 0001 	mvn.w	r0, #1
100002fe:	f000 fa0e 	bl	1000071e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10000302:	2200      	movs	r2, #0
10000304:	2100      	movs	r1, #0
10000306:	2091      	movs	r0, #145	@ 0x91
10000308:	f000 fa09 	bl	1000071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
1000030c:	2091      	movs	r0, #145	@ 0x91
1000030e:	f000 fa22 	bl	10000756 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000312:	bf00      	nop
10000314:	bd80      	pop	{r7, pc}
	...

10000318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10000318:	b580      	push	{r7, lr}
1000031a:	b0de      	sub	sp, #376	@ 0x178
1000031c:	af00      	add	r7, sp, #0
1000031e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10000322:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
10000326:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000328:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
1000032c:	2200      	movs	r2, #0
1000032e:	601a      	str	r2, [r3, #0]
10000330:	605a      	str	r2, [r3, #4]
10000332:	609a      	str	r2, [r3, #8]
10000334:	60da      	str	r2, [r3, #12]
10000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000338:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000033c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
10000340:	4618      	mov	r0, r3
10000342:	f44f 73ac 	mov.w	r3, #344	@ 0x158
10000346:	461a      	mov	r2, r3
10000348:	2100      	movs	r1, #0
1000034a:	f005 fdb5 	bl	10005eb8 <memset>
  if(huart->Instance==UART4)
1000034e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10000352:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
10000356:	681b      	ldr	r3, [r3, #0]
10000358:	681b      	ldr	r3, [r3, #0]
1000035a:	4a2d      	ldr	r2, [pc, #180]	@ (10000410 <HAL_UART_MspInit+0xf8>)
1000035c:	4293      	cmp	r3, r2
1000035e:	d152      	bne.n	10000406 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000360:	4b2c      	ldr	r3, [pc, #176]	@ (10000414 <HAL_UART_MspInit+0xfc>)
10000362:	681b      	ldr	r3, [r3, #0]
10000364:	f003 0307 	and.w	r3, r3, #7
10000368:	2b04      	cmp	r3, #4
1000036a:	d113      	bne.n	10000394 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
1000036c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10000370:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
10000374:	f04f 0202 	mov.w	r2, #2
10000378:	f04f 0300 	mov.w	r3, #0
1000037c:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000380:	f107 0308 	add.w	r3, r7, #8
10000384:	4618      	mov	r0, r3
10000386:	f002 fc67 	bl	10002c58 <HAL_RCCEx_PeriphCLKConfig>
1000038a:	4603      	mov	r3, r0
1000038c:	2b00      	cmp	r3, #0
1000038e:	d001      	beq.n	10000394 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10000390:	f7ff ff8b 	bl	100002aa <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
10000394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000398:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
1000039c:	f8c3 2a80 	str.w	r2, [r3, #2688]	@ 0xa80

    __HAL_RCC_GPIOD_CLK_ENABLE();
100003a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003a4:	2208      	movs	r2, #8
100003a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    __HAL_RCC_GPIOH_CLK_ENABLE();
100003aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003ae:	2280      	movs	r2, #128	@ 0x80
100003b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
100003b4:	2302      	movs	r3, #2
100003b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100003ba:	2302      	movs	r3, #2
100003bc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100003c0:	2300      	movs	r3, #0
100003c2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100003c6:	2300      	movs	r3, #0
100003c8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
100003cc:	2308      	movs	r3, #8
100003ce:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
100003d2:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100003d6:	4619      	mov	r1, r3
100003d8:	f04f 2050 	mov.w	r0, #1342197760	@ 0x50005000
100003dc:	f000 f9d6 	bl	1000078c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
100003e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
100003e4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100003e8:	2302      	movs	r3, #2
100003ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100003ee:	2300      	movs	r3, #0
100003f0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
100003f4:	2308      	movs	r3, #8
100003f6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
100003fa:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100003fe:	4619      	mov	r1, r3
10000400:	4805      	ldr	r0, [pc, #20]	@ (10000418 <HAL_UART_MspInit+0x100>)
10000402:	f000 f9c3 	bl	1000078c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
10000406:	bf00      	nop
10000408:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
1000040c:	46bd      	mov	sp, r7
1000040e:	bd80      	pop	{r7, pc}
10000410:	40010000 	.word	0x40010000
10000414:	50020000 	.word	0x50020000
10000418:	50009000 	.word	0x50009000

1000041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000041c:	b480      	push	{r7}
1000041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10000420:	bf00      	nop
10000422:	e7fd      	b.n	10000420 <NMI_Handler+0x4>

10000424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000424:	b480      	push	{r7}
10000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000428:	bf00      	nop
1000042a:	e7fd      	b.n	10000428 <HardFault_Handler+0x4>

1000042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000042c:	b480      	push	{r7}
1000042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000430:	bf00      	nop
10000432:	e7fd      	b.n	10000430 <MemManage_Handler+0x4>

10000434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000434:	b480      	push	{r7}
10000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000438:	bf00      	nop
1000043a:	e7fd      	b.n	10000438 <BusFault_Handler+0x4>

1000043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000043c:	b480      	push	{r7}
1000043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000440:	bf00      	nop
10000442:	e7fd      	b.n	10000440 <UsageFault_Handler+0x4>

10000444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000444:	b480      	push	{r7}
10000446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000448:	bf00      	nop
1000044a:	46bd      	mov	sp, r7
1000044c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000450:	4770      	bx	lr

10000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000452:	b480      	push	{r7}
10000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000456:	bf00      	nop
10000458:	46bd      	mov	sp, r7
1000045a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000045e:	4770      	bx	lr

10000460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000460:	b480      	push	{r7}
10000462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000464:	bf00      	nop
10000466:	46bd      	mov	sp, r7
10000468:	f85d 7b04 	ldr.w	r7, [sp], #4
1000046c:	4770      	bx	lr

1000046e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000046e:	b580      	push	{r7, lr}
10000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000472:	f000 f859 	bl	10000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000476:	bf00      	nop
10000478:	bd80      	pop	{r7, pc}

1000047a <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000047a:	b580      	push	{r7, lr}
1000047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000047e:	f001 ff8b 	bl	10002398 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000482:	bf00      	nop
10000484:	bd80      	pop	{r7, pc}

10000486 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000486:	e7fe      	b.n	10000486 <ADC1_IRQHandler>

10000488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000488:	b580      	push	{r7, lr}
1000048a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
1000048c:	2003      	movs	r0, #3
1000048e:	f000 f93b 	bl	10000708 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000492:	f001 ff01 	bl	10002298 <HAL_RCC_GetSystemCoreClockFreq>
10000496:	4603      	mov	r3, r0
10000498:	4a07      	ldr	r2, [pc, #28]	@ (100004b8 <HAL_Init+0x30>)
1000049a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000049c:	200f      	movs	r0, #15
1000049e:	f000 f80d 	bl	100004bc <HAL_InitTick>
100004a2:	4603      	mov	r3, r0
100004a4:	2b00      	cmp	r3, #0
100004a6:	d001      	beq.n	100004ac <HAL_Init+0x24>
  {
    return HAL_ERROR;
100004a8:	2301      	movs	r3, #1
100004aa:	e002      	b.n	100004b2 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100004ac:	f7ff ff03 	bl	100002b6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100004b0:	2300      	movs	r3, #0
}
100004b2:	4618      	mov	r0, r3
100004b4:	bd80      	pop	{r7, pc}
100004b6:	bf00      	nop
100004b8:	10020000 	.word	0x10020000

100004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100004bc:	b580      	push	{r7, lr}
100004be:	b082      	sub	sp, #8
100004c0:	af00      	add	r7, sp, #0
100004c2:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100004c4:	4b15      	ldr	r3, [pc, #84]	@ (1000051c <HAL_InitTick+0x60>)
100004c6:	781b      	ldrb	r3, [r3, #0]
100004c8:	2b00      	cmp	r3, #0
100004ca:	d101      	bne.n	100004d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100004cc:	2301      	movs	r3, #1
100004ce:	e021      	b.n	10000514 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100004d0:	4b13      	ldr	r3, [pc, #76]	@ (10000520 <HAL_InitTick+0x64>)
100004d2:	681a      	ldr	r2, [r3, #0]
100004d4:	4b11      	ldr	r3, [pc, #68]	@ (1000051c <HAL_InitTick+0x60>)
100004d6:	781b      	ldrb	r3, [r3, #0]
100004d8:	4619      	mov	r1, r3
100004da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
100004de:	fbb3 f3f1 	udiv	r3, r3, r1
100004e2:	fbb2 f3f3 	udiv	r3, r2, r3
100004e6:	4618      	mov	r0, r3
100004e8:	f000 f943 	bl	10000772 <HAL_SYSTICK_Config>
100004ec:	4603      	mov	r3, r0
100004ee:	2b00      	cmp	r3, #0
100004f0:	d001      	beq.n	100004f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100004f2:	2301      	movs	r3, #1
100004f4:	e00e      	b.n	10000514 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100004f6:	687b      	ldr	r3, [r7, #4]
100004f8:	2b0f      	cmp	r3, #15
100004fa:	d80a      	bhi.n	10000512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100004fc:	2200      	movs	r2, #0
100004fe:	6879      	ldr	r1, [r7, #4]
10000500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10000504:	f000 f90b 	bl	1000071e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000508:	4a06      	ldr	r2, [pc, #24]	@ (10000524 <HAL_InitTick+0x68>)
1000050a:	687b      	ldr	r3, [r7, #4]
1000050c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000050e:	2300      	movs	r3, #0
10000510:	e000      	b.n	10000514 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000512:	2301      	movs	r3, #1
}
10000514:	4618      	mov	r0, r3
10000516:	3708      	adds	r7, #8
10000518:	46bd      	mov	sp, r7
1000051a:	bd80      	pop	{r7, pc}
1000051c:	10020008 	.word	0x10020008
10000520:	10020000 	.word	0x10020000
10000524:	10020004 	.word	0x10020004

10000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000528:	b480      	push	{r7}
1000052a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000052c:	4b06      	ldr	r3, [pc, #24]	@ (10000548 <HAL_IncTick+0x20>)
1000052e:	781b      	ldrb	r3, [r3, #0]
10000530:	461a      	mov	r2, r3
10000532:	4b06      	ldr	r3, [pc, #24]	@ (1000054c <HAL_IncTick+0x24>)
10000534:	681b      	ldr	r3, [r3, #0]
10000536:	4413      	add	r3, r2
10000538:	4a04      	ldr	r2, [pc, #16]	@ (1000054c <HAL_IncTick+0x24>)
1000053a:	6013      	str	r3, [r2, #0]
}
1000053c:	bf00      	nop
1000053e:	46bd      	mov	sp, r7
10000540:	f85d 7b04 	ldr.w	r7, [sp], #4
10000544:	4770      	bx	lr
10000546:	bf00      	nop
10000548:	10020008 	.word	0x10020008
1000054c:	100200bc 	.word	0x100200bc

10000550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000550:	b480      	push	{r7}
10000552:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000554:	4b03      	ldr	r3, [pc, #12]	@ (10000564 <HAL_GetTick+0x14>)
10000556:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000558:	4618      	mov	r0, r3
1000055a:	46bd      	mov	sp, r7
1000055c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000560:	4770      	bx	lr
10000562:	bf00      	nop
10000564:	100200bc 	.word	0x100200bc

10000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000568:	b480      	push	{r7}
1000056a:	b085      	sub	sp, #20
1000056c:	af00      	add	r7, sp, #0
1000056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000570:	687b      	ldr	r3, [r7, #4]
10000572:	f003 0307 	and.w	r3, r3, #7
10000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000578:	4b0c      	ldr	r3, [pc, #48]	@ (100005ac <__NVIC_SetPriorityGrouping+0x44>)
1000057a:	68db      	ldr	r3, [r3, #12]
1000057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000057e:	68ba      	ldr	r2, [r7, #8]
10000580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10000584:	4013      	ands	r3, r2
10000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000588:	68fb      	ldr	r3, [r7, #12]
1000058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1000058c:	68bb      	ldr	r3, [r7, #8]
1000058e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10000594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000059a:	4a04      	ldr	r2, [pc, #16]	@ (100005ac <__NVIC_SetPriorityGrouping+0x44>)
1000059c:	68bb      	ldr	r3, [r7, #8]
1000059e:	60d3      	str	r3, [r2, #12]
}
100005a0:	bf00      	nop
100005a2:	3714      	adds	r7, #20
100005a4:	46bd      	mov	sp, r7
100005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100005aa:	4770      	bx	lr
100005ac:	e000ed00 	.word	0xe000ed00

100005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100005b0:	b480      	push	{r7}
100005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100005b4:	4b04      	ldr	r3, [pc, #16]	@ (100005c8 <__NVIC_GetPriorityGrouping+0x18>)
100005b6:	68db      	ldr	r3, [r3, #12]
100005b8:	0a1b      	lsrs	r3, r3, #8
100005ba:	f003 0307 	and.w	r3, r3, #7
}
100005be:	4618      	mov	r0, r3
100005c0:	46bd      	mov	sp, r7
100005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
100005c6:	4770      	bx	lr
100005c8:	e000ed00 	.word	0xe000ed00

100005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100005cc:	b480      	push	{r7}
100005ce:	b083      	sub	sp, #12
100005d0:	af00      	add	r7, sp, #0
100005d2:	4603      	mov	r3, r0
100005d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100005da:	2b00      	cmp	r3, #0
100005dc:	db0b      	blt.n	100005f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100005de:	88fb      	ldrh	r3, [r7, #6]
100005e0:	f003 021f 	and.w	r2, r3, #31
100005e4:	4907      	ldr	r1, [pc, #28]	@ (10000604 <__NVIC_EnableIRQ+0x38>)
100005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100005ea:	095b      	lsrs	r3, r3, #5
100005ec:	2001      	movs	r0, #1
100005ee:	fa00 f202 	lsl.w	r2, r0, r2
100005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100005f6:	bf00      	nop
100005f8:	370c      	adds	r7, #12
100005fa:	46bd      	mov	sp, r7
100005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000600:	4770      	bx	lr
10000602:	bf00      	nop
10000604:	e000e100 	.word	0xe000e100

10000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000608:	b480      	push	{r7}
1000060a:	b083      	sub	sp, #12
1000060c:	af00      	add	r7, sp, #0
1000060e:	4603      	mov	r3, r0
10000610:	6039      	str	r1, [r7, #0]
10000612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000618:	2b00      	cmp	r3, #0
1000061a:	db0a      	blt.n	10000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000061c:	683b      	ldr	r3, [r7, #0]
1000061e:	b2da      	uxtb	r2, r3
10000620:	490c      	ldr	r1, [pc, #48]	@ (10000654 <__NVIC_SetPriority+0x4c>)
10000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000626:	0112      	lsls	r2, r2, #4
10000628:	b2d2      	uxtb	r2, r2
1000062a:	440b      	add	r3, r1
1000062c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000630:	e00a      	b.n	10000648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000632:	683b      	ldr	r3, [r7, #0]
10000634:	b2da      	uxtb	r2, r3
10000636:	4908      	ldr	r1, [pc, #32]	@ (10000658 <__NVIC_SetPriority+0x50>)
10000638:	88fb      	ldrh	r3, [r7, #6]
1000063a:	f003 030f 	and.w	r3, r3, #15
1000063e:	3b04      	subs	r3, #4
10000640:	0112      	lsls	r2, r2, #4
10000642:	b2d2      	uxtb	r2, r2
10000644:	440b      	add	r3, r1
10000646:	761a      	strb	r2, [r3, #24]
}
10000648:	bf00      	nop
1000064a:	370c      	adds	r7, #12
1000064c:	46bd      	mov	sp, r7
1000064e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000652:	4770      	bx	lr
10000654:	e000e100 	.word	0xe000e100
10000658:	e000ed00 	.word	0xe000ed00

1000065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000065c:	b480      	push	{r7}
1000065e:	b089      	sub	sp, #36	@ 0x24
10000660:	af00      	add	r7, sp, #0
10000662:	60f8      	str	r0, [r7, #12]
10000664:	60b9      	str	r1, [r7, #8]
10000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000668:	68fb      	ldr	r3, [r7, #12]
1000066a:	f003 0307 	and.w	r3, r3, #7
1000066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000670:	69fb      	ldr	r3, [r7, #28]
10000672:	f1c3 0307 	rsb	r3, r3, #7
10000676:	2b04      	cmp	r3, #4
10000678:	bf28      	it	cs
1000067a:	2304      	movcs	r3, #4
1000067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000067e:	69fb      	ldr	r3, [r7, #28]
10000680:	3304      	adds	r3, #4
10000682:	2b06      	cmp	r3, #6
10000684:	d902      	bls.n	1000068c <NVIC_EncodePriority+0x30>
10000686:	69fb      	ldr	r3, [r7, #28]
10000688:	3b03      	subs	r3, #3
1000068a:	e000      	b.n	1000068e <NVIC_EncodePriority+0x32>
1000068c:	2300      	movs	r3, #0
1000068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10000694:	69bb      	ldr	r3, [r7, #24]
10000696:	fa02 f303 	lsl.w	r3, r2, r3
1000069a:	43da      	mvns	r2, r3
1000069c:	68bb      	ldr	r3, [r7, #8]
1000069e:	401a      	ands	r2, r3
100006a0:	697b      	ldr	r3, [r7, #20]
100006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100006a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
100006a8:	697b      	ldr	r3, [r7, #20]
100006aa:	fa01 f303 	lsl.w	r3, r1, r3
100006ae:	43d9      	mvns	r1, r3
100006b0:	687b      	ldr	r3, [r7, #4]
100006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100006b4:	4313      	orrs	r3, r2
         );
}
100006b6:	4618      	mov	r0, r3
100006b8:	3724      	adds	r7, #36	@ 0x24
100006ba:	46bd      	mov	sp, r7
100006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100006c0:	4770      	bx	lr
	...

100006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100006c4:	b580      	push	{r7, lr}
100006c6:	b082      	sub	sp, #8
100006c8:	af00      	add	r7, sp, #0
100006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100006cc:	687b      	ldr	r3, [r7, #4]
100006ce:	3b01      	subs	r3, #1
100006d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
100006d4:	d301      	bcc.n	100006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100006d6:	2301      	movs	r3, #1
100006d8:	e00f      	b.n	100006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100006da:	4a0a      	ldr	r2, [pc, #40]	@ (10000704 <SysTick_Config+0x40>)
100006dc:	687b      	ldr	r3, [r7, #4]
100006de:	3b01      	subs	r3, #1
100006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100006e2:	210f      	movs	r1, #15
100006e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100006e8:	f7ff ff8e 	bl	10000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100006ec:	4b05      	ldr	r3, [pc, #20]	@ (10000704 <SysTick_Config+0x40>)
100006ee:	2200      	movs	r2, #0
100006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100006f2:	4b04      	ldr	r3, [pc, #16]	@ (10000704 <SysTick_Config+0x40>)
100006f4:	2207      	movs	r2, #7
100006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100006f8:	2300      	movs	r3, #0
}
100006fa:	4618      	mov	r0, r3
100006fc:	3708      	adds	r7, #8
100006fe:	46bd      	mov	sp, r7
10000700:	bd80      	pop	{r7, pc}
10000702:	bf00      	nop
10000704:	e000e010 	.word	0xe000e010

10000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000708:	b580      	push	{r7, lr}
1000070a:	b082      	sub	sp, #8
1000070c:	af00      	add	r7, sp, #0
1000070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000710:	6878      	ldr	r0, [r7, #4]
10000712:	f7ff ff29 	bl	10000568 <__NVIC_SetPriorityGrouping>
}
10000716:	bf00      	nop
10000718:	3708      	adds	r7, #8
1000071a:	46bd      	mov	sp, r7
1000071c:	bd80      	pop	{r7, pc}

1000071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000071e:	b580      	push	{r7, lr}
10000720:	b086      	sub	sp, #24
10000722:	af00      	add	r7, sp, #0
10000724:	4603      	mov	r3, r0
10000726:	60b9      	str	r1, [r7, #8]
10000728:	607a      	str	r2, [r7, #4]
1000072a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
1000072c:	2300      	movs	r3, #0
1000072e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000730:	f7ff ff3e 	bl	100005b0 <__NVIC_GetPriorityGrouping>
10000734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000736:	687a      	ldr	r2, [r7, #4]
10000738:	68b9      	ldr	r1, [r7, #8]
1000073a:	6978      	ldr	r0, [r7, #20]
1000073c:	f7ff ff8e 	bl	1000065c <NVIC_EncodePriority>
10000740:	4602      	mov	r2, r0
10000742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000746:	4611      	mov	r1, r2
10000748:	4618      	mov	r0, r3
1000074a:	f7ff ff5d 	bl	10000608 <__NVIC_SetPriority>
}
1000074e:	bf00      	nop
10000750:	3718      	adds	r7, #24
10000752:	46bd      	mov	sp, r7
10000754:	bd80      	pop	{r7, pc}

10000756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000756:	b580      	push	{r7, lr}
10000758:	b082      	sub	sp, #8
1000075a:	af00      	add	r7, sp, #0
1000075c:	4603      	mov	r3, r0
1000075e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000764:	4618      	mov	r0, r3
10000766:	f7ff ff31 	bl	100005cc <__NVIC_EnableIRQ>
}
1000076a:	bf00      	nop
1000076c:	3708      	adds	r7, #8
1000076e:	46bd      	mov	sp, r7
10000770:	bd80      	pop	{r7, pc}

10000772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000772:	b580      	push	{r7, lr}
10000774:	b082      	sub	sp, #8
10000776:	af00      	add	r7, sp, #0
10000778:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000077a:	6878      	ldr	r0, [r7, #4]
1000077c:	f7ff ffa2 	bl	100006c4 <SysTick_Config>
10000780:	4603      	mov	r3, r0
}
10000782:	4618      	mov	r0, r3
10000784:	3708      	adds	r7, #8
10000786:	46bd      	mov	sp, r7
10000788:	bd80      	pop	{r7, pc}
	...

1000078c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1000078c:	b480      	push	{r7}
1000078e:	b089      	sub	sp, #36	@ 0x24
10000790:	af00      	add	r7, sp, #0
10000792:	6078      	str	r0, [r7, #4]
10000794:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000796:	4b8a      	ldr	r3, [pc, #552]	@ (100009c0 <HAL_GPIO_Init+0x234>)
10000798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000079a:	2300      	movs	r3, #0
1000079c:	61fb      	str	r3, [r7, #28]
1000079e:	e191      	b.n	10000ac4 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100007a0:	2201      	movs	r2, #1
100007a2:	69fb      	ldr	r3, [r7, #28]
100007a4:	fa02 f303 	lsl.w	r3, r2, r3
100007a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100007aa:	683b      	ldr	r3, [r7, #0]
100007ac:	681b      	ldr	r3, [r3, #0]
100007ae:	693a      	ldr	r2, [r7, #16]
100007b0:	4013      	ands	r3, r2
100007b2:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100007b4:	68fa      	ldr	r2, [r7, #12]
100007b6:	693b      	ldr	r3, [r7, #16]
100007b8:	429a      	cmp	r2, r3
100007ba:	f040 8180 	bne.w	10000abe <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100007be:	683b      	ldr	r3, [r7, #0]
100007c0:	685b      	ldr	r3, [r3, #4]
100007c2:	2b02      	cmp	r3, #2
100007c4:	d003      	beq.n	100007ce <HAL_GPIO_Init+0x42>
100007c6:	683b      	ldr	r3, [r7, #0]
100007c8:	685b      	ldr	r3, [r3, #4]
100007ca:	2b12      	cmp	r3, #18
100007cc:	d123      	bne.n	10000816 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100007ce:	69fb      	ldr	r3, [r7, #28]
100007d0:	08da      	lsrs	r2, r3, #3
100007d2:	687b      	ldr	r3, [r7, #4]
100007d4:	3208      	adds	r2, #8
100007d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
100007da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100007dc:	69fb      	ldr	r3, [r7, #28]
100007de:	f003 0307 	and.w	r3, r3, #7
100007e2:	009b      	lsls	r3, r3, #2
100007e4:	220f      	movs	r2, #15
100007e6:	fa02 f303 	lsl.w	r3, r2, r3
100007ea:	43db      	mvns	r3, r3
100007ec:	69ba      	ldr	r2, [r7, #24]
100007ee:	4013      	ands	r3, r2
100007f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100007f2:	683b      	ldr	r3, [r7, #0]
100007f4:	691a      	ldr	r2, [r3, #16]
100007f6:	69fb      	ldr	r3, [r7, #28]
100007f8:	f003 0307 	and.w	r3, r3, #7
100007fc:	009b      	lsls	r3, r3, #2
100007fe:	fa02 f303 	lsl.w	r3, r2, r3
10000802:	69ba      	ldr	r2, [r7, #24]
10000804:	4313      	orrs	r3, r2
10000806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000808:	69fb      	ldr	r3, [r7, #28]
1000080a:	08da      	lsrs	r2, r3, #3
1000080c:	687b      	ldr	r3, [r7, #4]
1000080e:	3208      	adds	r2, #8
10000810:	69b9      	ldr	r1, [r7, #24]
10000812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000816:	687b      	ldr	r3, [r7, #4]
10000818:	681b      	ldr	r3, [r3, #0]
1000081a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
1000081c:	69fb      	ldr	r3, [r7, #28]
1000081e:	005b      	lsls	r3, r3, #1
10000820:	2203      	movs	r2, #3
10000822:	fa02 f303 	lsl.w	r3, r2, r3
10000826:	43db      	mvns	r3, r3
10000828:	69ba      	ldr	r2, [r7, #24]
1000082a:	4013      	ands	r3, r2
1000082c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
1000082e:	683b      	ldr	r3, [r7, #0]
10000830:	685b      	ldr	r3, [r3, #4]
10000832:	f003 0203 	and.w	r2, r3, #3
10000836:	69fb      	ldr	r3, [r7, #28]
10000838:	005b      	lsls	r3, r3, #1
1000083a:	fa02 f303 	lsl.w	r3, r2, r3
1000083e:	69ba      	ldr	r2, [r7, #24]
10000840:	4313      	orrs	r3, r2
10000842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000844:	687b      	ldr	r3, [r7, #4]
10000846:	69ba      	ldr	r2, [r7, #24]
10000848:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000084a:	683b      	ldr	r3, [r7, #0]
1000084c:	685b      	ldr	r3, [r3, #4]
1000084e:	2b01      	cmp	r3, #1
10000850:	d00b      	beq.n	1000086a <HAL_GPIO_Init+0xde>
10000852:	683b      	ldr	r3, [r7, #0]
10000854:	685b      	ldr	r3, [r3, #4]
10000856:	2b02      	cmp	r3, #2
10000858:	d007      	beq.n	1000086a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000085a:	683b      	ldr	r3, [r7, #0]
1000085c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000085e:	2b11      	cmp	r3, #17
10000860:	d003      	beq.n	1000086a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000862:	683b      	ldr	r3, [r7, #0]
10000864:	685b      	ldr	r3, [r3, #4]
10000866:	2b12      	cmp	r3, #18
10000868:	d130      	bne.n	100008cc <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000086a:	687b      	ldr	r3, [r7, #4]
1000086c:	689b      	ldr	r3, [r3, #8]
1000086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000870:	69fb      	ldr	r3, [r7, #28]
10000872:	005b      	lsls	r3, r3, #1
10000874:	2203      	movs	r2, #3
10000876:	fa02 f303 	lsl.w	r3, r2, r3
1000087a:	43db      	mvns	r3, r3
1000087c:	69ba      	ldr	r2, [r7, #24]
1000087e:	4013      	ands	r3, r2
10000880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000882:	683b      	ldr	r3, [r7, #0]
10000884:	68da      	ldr	r2, [r3, #12]
10000886:	69fb      	ldr	r3, [r7, #28]
10000888:	005b      	lsls	r3, r3, #1
1000088a:	fa02 f303 	lsl.w	r3, r2, r3
1000088e:	69ba      	ldr	r2, [r7, #24]
10000890:	4313      	orrs	r3, r2
10000892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	69ba      	ldr	r2, [r7, #24]
10000898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000089a:	687b      	ldr	r3, [r7, #4]
1000089c:	685b      	ldr	r3, [r3, #4]
1000089e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100008a0:	2201      	movs	r2, #1
100008a2:	69fb      	ldr	r3, [r7, #28]
100008a4:	fa02 f303 	lsl.w	r3, r2, r3
100008a8:	43db      	mvns	r3, r3
100008aa:	69ba      	ldr	r2, [r7, #24]
100008ac:	4013      	ands	r3, r2
100008ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100008b0:	683b      	ldr	r3, [r7, #0]
100008b2:	685b      	ldr	r3, [r3, #4]
100008b4:	091b      	lsrs	r3, r3, #4
100008b6:	f003 0201 	and.w	r2, r3, #1
100008ba:	69fb      	ldr	r3, [r7, #28]
100008bc:	fa02 f303 	lsl.w	r3, r2, r3
100008c0:	69ba      	ldr	r2, [r7, #24]
100008c2:	4313      	orrs	r3, r2
100008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100008c6:	687b      	ldr	r3, [r7, #4]
100008c8:	69ba      	ldr	r2, [r7, #24]
100008ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100008cc:	687b      	ldr	r3, [r7, #4]
100008ce:	68db      	ldr	r3, [r3, #12]
100008d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100008d2:	69fb      	ldr	r3, [r7, #28]
100008d4:	005b      	lsls	r3, r3, #1
100008d6:	2203      	movs	r2, #3
100008d8:	fa02 f303 	lsl.w	r3, r2, r3
100008dc:	43db      	mvns	r3, r3
100008de:	69ba      	ldr	r2, [r7, #24]
100008e0:	4013      	ands	r3, r2
100008e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
100008e4:	683b      	ldr	r3, [r7, #0]
100008e6:	689a      	ldr	r2, [r3, #8]
100008e8:	69fb      	ldr	r3, [r7, #28]
100008ea:	005b      	lsls	r3, r3, #1
100008ec:	fa02 f303 	lsl.w	r3, r2, r3
100008f0:	69ba      	ldr	r2, [r7, #24]
100008f2:	4313      	orrs	r3, r2
100008f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100008f6:	687b      	ldr	r3, [r7, #4]
100008f8:	69ba      	ldr	r2, [r7, #24]
100008fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100008fc:	683b      	ldr	r3, [r7, #0]
100008fe:	685b      	ldr	r3, [r3, #4]
10000900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
10000904:	2b00      	cmp	r3, #0
10000906:	f000 80da 	beq.w	10000abe <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
1000090a:	4a2e      	ldr	r2, [pc, #184]	@ (100009c4 <HAL_GPIO_Init+0x238>)
1000090c:	69fb      	ldr	r3, [r7, #28]
1000090e:	089b      	lsrs	r3, r3, #2
10000910:	3318      	adds	r3, #24
10000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000918:	69fb      	ldr	r3, [r7, #28]
1000091a:	f003 0303 	and.w	r3, r3, #3
1000091e:	00db      	lsls	r3, r3, #3
10000920:	22ff      	movs	r2, #255	@ 0xff
10000922:	fa02 f303 	lsl.w	r3, r2, r3
10000926:	43db      	mvns	r3, r3
10000928:	69ba      	ldr	r2, [r7, #24]
1000092a:	4013      	ands	r3, r2
1000092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000092e:	687b      	ldr	r3, [r7, #4]
10000930:	4a25      	ldr	r2, [pc, #148]	@ (100009c8 <HAL_GPIO_Init+0x23c>)
10000932:	4293      	cmp	r3, r2
10000934:	d05e      	beq.n	100009f4 <HAL_GPIO_Init+0x268>
10000936:	687b      	ldr	r3, [r7, #4]
10000938:	4a24      	ldr	r2, [pc, #144]	@ (100009cc <HAL_GPIO_Init+0x240>)
1000093a:	4293      	cmp	r3, r2
1000093c:	d03d      	beq.n	100009ba <HAL_GPIO_Init+0x22e>
1000093e:	687b      	ldr	r3, [r7, #4]
10000940:	4a23      	ldr	r2, [pc, #140]	@ (100009d0 <HAL_GPIO_Init+0x244>)
10000942:	4293      	cmp	r3, r2
10000944:	d037      	beq.n	100009b6 <HAL_GPIO_Init+0x22a>
10000946:	687b      	ldr	r3, [r7, #4]
10000948:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
1000094c:	d031      	beq.n	100009b2 <HAL_GPIO_Init+0x226>
1000094e:	687b      	ldr	r3, [r7, #4]
10000950:	4a20      	ldr	r2, [pc, #128]	@ (100009d4 <HAL_GPIO_Init+0x248>)
10000952:	4293      	cmp	r3, r2
10000954:	d02b      	beq.n	100009ae <HAL_GPIO_Init+0x222>
10000956:	687b      	ldr	r3, [r7, #4]
10000958:	4a1f      	ldr	r2, [pc, #124]	@ (100009d8 <HAL_GPIO_Init+0x24c>)
1000095a:	4293      	cmp	r3, r2
1000095c:	d025      	beq.n	100009aa <HAL_GPIO_Init+0x21e>
1000095e:	687b      	ldr	r3, [r7, #4]
10000960:	4a1e      	ldr	r2, [pc, #120]	@ (100009dc <HAL_GPIO_Init+0x250>)
10000962:	4293      	cmp	r3, r2
10000964:	d01f      	beq.n	100009a6 <HAL_GPIO_Init+0x21a>
10000966:	687b      	ldr	r3, [r7, #4]
10000968:	4a1d      	ldr	r2, [pc, #116]	@ (100009e0 <HAL_GPIO_Init+0x254>)
1000096a:	4293      	cmp	r3, r2
1000096c:	d019      	beq.n	100009a2 <HAL_GPIO_Init+0x216>
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	4a1c      	ldr	r2, [pc, #112]	@ (100009e4 <HAL_GPIO_Init+0x258>)
10000972:	4293      	cmp	r3, r2
10000974:	d013      	beq.n	1000099e <HAL_GPIO_Init+0x212>
10000976:	687b      	ldr	r3, [r7, #4]
10000978:	4a1b      	ldr	r2, [pc, #108]	@ (100009e8 <HAL_GPIO_Init+0x25c>)
1000097a:	4293      	cmp	r3, r2
1000097c:	d00d      	beq.n	1000099a <HAL_GPIO_Init+0x20e>
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	4a1a      	ldr	r2, [pc, #104]	@ (100009ec <HAL_GPIO_Init+0x260>)
10000982:	4293      	cmp	r3, r2
10000984:	d007      	beq.n	10000996 <HAL_GPIO_Init+0x20a>
10000986:	687b      	ldr	r3, [r7, #4]
10000988:	4a19      	ldr	r2, [pc, #100]	@ (100009f0 <HAL_GPIO_Init+0x264>)
1000098a:	4293      	cmp	r3, r2
1000098c:	d101      	bne.n	10000992 <HAL_GPIO_Init+0x206>
1000098e:	230b      	movs	r3, #11
10000990:	e031      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
10000992:	2319      	movs	r3, #25
10000994:	e02f      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
10000996:	230a      	movs	r3, #10
10000998:	e02d      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
1000099a:	2309      	movs	r3, #9
1000099c:	e02b      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
1000099e:	2308      	movs	r3, #8
100009a0:	e029      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009a2:	2307      	movs	r3, #7
100009a4:	e027      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009a6:	2306      	movs	r3, #6
100009a8:	e025      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009aa:	2305      	movs	r3, #5
100009ac:	e023      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009ae:	2304      	movs	r3, #4
100009b0:	e021      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009b2:	2303      	movs	r3, #3
100009b4:	e01f      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009b6:	2302      	movs	r3, #2
100009b8:	e01d      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009ba:	2301      	movs	r3, #1
100009bc:	e01b      	b.n	100009f6 <HAL_GPIO_Init+0x26a>
100009be:	bf00      	nop
100009c0:	5000d0c0 	.word	0x5000d0c0
100009c4:	5000d000 	.word	0x5000d000
100009c8:	50002000 	.word	0x50002000
100009cc:	50003000 	.word	0x50003000
100009d0:	50004000 	.word	0x50004000
100009d4:	50006000 	.word	0x50006000
100009d8:	50007000 	.word	0x50007000
100009dc:	50008000 	.word	0x50008000
100009e0:	50009000 	.word	0x50009000
100009e4:	5000a000 	.word	0x5000a000
100009e8:	5000b000 	.word	0x5000b000
100009ec:	5000c000 	.word	0x5000c000
100009f0:	54004000 	.word	0x54004000
100009f4:	2300      	movs	r3, #0
100009f6:	69fa      	ldr	r2, [r7, #28]
100009f8:	f002 0203 	and.w	r2, r2, #3
100009fc:	00d2      	lsls	r2, r2, #3
100009fe:	4093      	lsls	r3, r2
10000a00:	461a      	mov	r2, r3
10000a02:	69bb      	ldr	r3, [r7, #24]
10000a04:	4313      	orrs	r3, r2
10000a06:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000a08:	4934      	ldr	r1, [pc, #208]	@ (10000adc <HAL_GPIO_Init+0x350>)
10000a0a:	69fb      	ldr	r3, [r7, #28]
10000a0c:	089b      	lsrs	r3, r3, #2
10000a0e:	3318      	adds	r3, #24
10000a10:	69ba      	ldr	r2, [r7, #24]
10000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000a16:	697b      	ldr	r3, [r7, #20]
10000a18:	681b      	ldr	r3, [r3, #0]
10000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a1c:	68fb      	ldr	r3, [r7, #12]
10000a1e:	43db      	mvns	r3, r3
10000a20:	69ba      	ldr	r2, [r7, #24]
10000a22:	4013      	ands	r3, r2
10000a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000a26:	683b      	ldr	r3, [r7, #0]
10000a28:	685b      	ldr	r3, [r3, #4]
10000a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
10000a2e:	2b00      	cmp	r3, #0
10000a30:	d003      	beq.n	10000a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000a32:	69ba      	ldr	r2, [r7, #24]
10000a34:	68fb      	ldr	r3, [r7, #12]
10000a36:	4313      	orrs	r3, r2
10000a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000a3a:	697b      	ldr	r3, [r7, #20]
10000a3c:	69ba      	ldr	r2, [r7, #24]
10000a3e:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000a40:	697b      	ldr	r3, [r7, #20]
10000a42:	685b      	ldr	r3, [r3, #4]
10000a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a46:	68fb      	ldr	r3, [r7, #12]
10000a48:	43db      	mvns	r3, r3
10000a4a:	69ba      	ldr	r2, [r7, #24]
10000a4c:	4013      	ands	r3, r2
10000a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000a50:	683b      	ldr	r3, [r7, #0]
10000a52:	685b      	ldr	r3, [r3, #4]
10000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10000a58:	2b00      	cmp	r3, #0
10000a5a:	d003      	beq.n	10000a64 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000a5c:	69ba      	ldr	r2, [r7, #24]
10000a5e:	68fb      	ldr	r3, [r7, #12]
10000a60:	4313      	orrs	r3, r2
10000a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000a64:	697b      	ldr	r3, [r7, #20]
10000a66:	69ba      	ldr	r2, [r7, #24]
10000a68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (10000adc <HAL_GPIO_Init+0x350>)
10000a6c:	681b      	ldr	r3, [r3, #0]
10000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a70:	68fb      	ldr	r3, [r7, #12]
10000a72:	43db      	mvns	r3, r3
10000a74:	69ba      	ldr	r2, [r7, #24]
10000a76:	4013      	ands	r3, r2
10000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000a7a:	683b      	ldr	r3, [r7, #0]
10000a7c:	685b      	ldr	r3, [r3, #4]
10000a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10000a82:	2b00      	cmp	r3, #0
10000a84:	d003      	beq.n	10000a8e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000a86:	69ba      	ldr	r2, [r7, #24]
10000a88:	68fb      	ldr	r3, [r7, #12]
10000a8a:	4313      	orrs	r3, r2
10000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000a8e:	4a13      	ldr	r2, [pc, #76]	@ (10000adc <HAL_GPIO_Init+0x350>)
10000a90:	69bb      	ldr	r3, [r7, #24]
10000a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000a94:	4b11      	ldr	r3, [pc, #68]	@ (10000adc <HAL_GPIO_Init+0x350>)
10000a96:	685b      	ldr	r3, [r3, #4]
10000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a9a:	68fb      	ldr	r3, [r7, #12]
10000a9c:	43db      	mvns	r3, r3
10000a9e:	69ba      	ldr	r2, [r7, #24]
10000aa0:	4013      	ands	r3, r2
10000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000aa4:	683b      	ldr	r3, [r7, #0]
10000aa6:	685b      	ldr	r3, [r3, #4]
10000aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10000aac:	2b00      	cmp	r3, #0
10000aae:	d003      	beq.n	10000ab8 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000ab0:	69ba      	ldr	r2, [r7, #24]
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	4313      	orrs	r3, r2
10000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000ab8:	4a08      	ldr	r2, [pc, #32]	@ (10000adc <HAL_GPIO_Init+0x350>)
10000aba:	69bb      	ldr	r3, [r7, #24]
10000abc:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000abe:	69fb      	ldr	r3, [r7, #28]
10000ac0:	3301      	adds	r3, #1
10000ac2:	61fb      	str	r3, [r7, #28]
10000ac4:	69fb      	ldr	r3, [r7, #28]
10000ac6:	2b0f      	cmp	r3, #15
10000ac8:	f67f ae6a 	bls.w	100007a0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000acc:	bf00      	nop
10000ace:	bf00      	nop
10000ad0:	3724      	adds	r7, #36	@ 0x24
10000ad2:	46bd      	mov	sp, r7
10000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ad8:	4770      	bx	lr
10000ada:	bf00      	nop
10000adc:	5000d000 	.word	0x5000d000

10000ae0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000ae0:	b580      	push	{r7, lr}
10000ae2:	b084      	sub	sp, #16
10000ae4:	af00      	add	r7, sp, #0
10000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000ae8:	2300      	movs	r3, #0
10000aea:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000aec:	687b      	ldr	r3, [r7, #4]
10000aee:	2b00      	cmp	r3, #0
10000af0:	d101      	bne.n	10000af6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000af2:	2301      	movs	r3, #1
10000af4:	e320      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000af6:	687b      	ldr	r3, [r7, #4]
10000af8:	681b      	ldr	r3, [r3, #0]
10000afa:	f003 0301 	and.w	r3, r3, #1
10000afe:	2b00      	cmp	r3, #0
10000b00:	f000 8081 	beq.w	10000c06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000b04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b08:	6a1b      	ldr	r3, [r3, #32]
10000b0a:	f003 0303 	and.w	r3, r3, #3
10000b0e:	2b01      	cmp	r3, #1
10000b10:	d107      	bne.n	10000b22 <HAL_RCC_OscConfig+0x42>
10000b12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b16:	6a1b      	ldr	r3, [r3, #32]
10000b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000b20:	d054      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000b28:	f003 0307 	and.w	r3, r3, #7
10000b2c:	2b01      	cmp	r3, #1
10000b2e:	d107      	bne.n	10000b40 <HAL_RCC_OscConfig+0x60>
10000b30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000b3e:	d045      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000b40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000b46:	f003 0303 	and.w	r3, r3, #3
10000b4a:	2b01      	cmp	r3, #1
10000b4c:	d107      	bne.n	10000b5e <HAL_RCC_OscConfig+0x7e>
10000b4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000b5c:	d036      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000b5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000b64:	f003 0303 	and.w	r3, r3, #3
10000b68:	2b01      	cmp	r3, #1
10000b6a:	d10f      	bne.n	10000b8c <HAL_RCC_OscConfig+0xac>
10000b6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000b74:	f003 0302 	and.w	r3, r3, #2
10000b78:	2b02      	cmp	r3, #2
10000b7a:	d027      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000b7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000b84:	f003 0302 	and.w	r3, r3, #2
10000b88:	2b02      	cmp	r3, #2
10000b8a:	d01f      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000b8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b90:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000b94:	f003 0303 	and.w	r3, r3, #3
10000b98:	2b01      	cmp	r3, #1
10000b9a:	d107      	bne.n	10000bac <HAL_RCC_OscConfig+0xcc>
10000b9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ba0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000ba4:	f003 0302 	and.w	r3, r3, #2
10000ba8:	2b02      	cmp	r3, #2
10000baa:	d00f      	beq.n	10000bcc <HAL_RCC_OscConfig+0xec>
10000bac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bb0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000bb4:	f003 0303 	and.w	r3, r3, #3
10000bb8:	2b01      	cmp	r3, #1
10000bba:	d117      	bne.n	10000bec <HAL_RCC_OscConfig+0x10c>
10000bbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bc0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000bc4:	f003 0302 	and.w	r3, r3, #2
10000bc8:	2b02      	cmp	r3, #2
10000bca:	d10f      	bne.n	10000bec <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000bcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bd0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000bdc:	d112      	bne.n	10000c04 <HAL_RCC_OscConfig+0x124>
10000bde:	687b      	ldr	r3, [r7, #4]
10000be0:	685b      	ldr	r3, [r3, #4]
10000be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000be6:	d00d      	beq.n	10000c04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000be8:	2301      	movs	r3, #1
10000bea:	e2a5      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000bec:	687b      	ldr	r3, [r7, #4]
10000bee:	685b      	ldr	r3, [r3, #4]
10000bf0:	4618      	mov	r0, r3
10000bf2:	f000 faa7 	bl	10001144 <HAL_RCC_HSEConfig>
10000bf6:	4603      	mov	r3, r0
10000bf8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000bfa:	7bfb      	ldrb	r3, [r7, #15]
10000bfc:	2b00      	cmp	r3, #0
10000bfe:	d002      	beq.n	10000c06 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000c00:	7bfb      	ldrb	r3, [r7, #15]
10000c02:	e299      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000c04:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000c06:	687b      	ldr	r3, [r7, #4]
10000c08:	681b      	ldr	r3, [r3, #0]
10000c0a:	f003 0302 	and.w	r3, r3, #2
10000c0e:	2b00      	cmp	r3, #0
10000c10:	f000 814e 	beq.w	10000eb0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000c14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c18:	6a1b      	ldr	r3, [r3, #32]
10000c1a:	f003 0303 	and.w	r3, r3, #3
10000c1e:	2b00      	cmp	r3, #0
10000c20:	d107      	bne.n	10000c32 <HAL_RCC_OscConfig+0x152>
10000c22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c26:	6a1b      	ldr	r3, [r3, #32]
10000c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000c30:	d055      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000c32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000c38:	f003 0307 	and.w	r3, r3, #7
10000c3c:	2b00      	cmp	r3, #0
10000c3e:	d107      	bne.n	10000c50 <HAL_RCC_OscConfig+0x170>
10000c40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000c4e:	d046      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000c50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000c56:	f003 0303 	and.w	r3, r3, #3
10000c5a:	2b00      	cmp	r3, #0
10000c5c:	d107      	bne.n	10000c6e <HAL_RCC_OscConfig+0x18e>
10000c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000c6c:	d037      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000c6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000c74:	f003 0303 	and.w	r3, r3, #3
10000c78:	2b00      	cmp	r3, #0
10000c7a:	d10f      	bne.n	10000c9c <HAL_RCC_OscConfig+0x1bc>
10000c7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000c84:	f003 0302 	and.w	r3, r3, #2
10000c88:	2b02      	cmp	r3, #2
10000c8a:	d028      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000c8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000c94:	f003 0302 	and.w	r3, r3, #2
10000c98:	2b02      	cmp	r3, #2
10000c9a:	d020      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000c9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ca0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000ca4:	f003 0303 	and.w	r3, r3, #3
10000ca8:	2b00      	cmp	r3, #0
10000caa:	d107      	bne.n	10000cbc <HAL_RCC_OscConfig+0x1dc>
10000cac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cb0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000cb4:	f003 0302 	and.w	r3, r3, #2
10000cb8:	2b02      	cmp	r3, #2
10000cba:	d010      	beq.n	10000cde <HAL_RCC_OscConfig+0x1fe>
10000cbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cc0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000cc4:	f003 0303 	and.w	r3, r3, #3
10000cc8:	2b00      	cmp	r3, #0
10000cca:	f040 8088 	bne.w	10000dde <HAL_RCC_OscConfig+0x2fe>
10000cce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000cd6:	f003 0302 	and.w	r3, r3, #2
10000cda:	2b02      	cmp	r3, #2
10000cdc:	d17f      	bne.n	10000dde <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000cde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ce2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000ce6:	f003 0301 	and.w	r3, r3, #1
10000cea:	2b01      	cmp	r3, #1
10000cec:	d105      	bne.n	10000cfa <HAL_RCC_OscConfig+0x21a>
10000cee:	687b      	ldr	r3, [r7, #4]
10000cf0:	68db      	ldr	r3, [r3, #12]
10000cf2:	2b01      	cmp	r3, #1
10000cf4:	d001      	beq.n	10000cfa <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000cf6:	2301      	movs	r3, #1
10000cf8:	e21e      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000cfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cfe:	699b      	ldr	r3, [r3, #24]
10000d00:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10000d04:	687b      	ldr	r3, [r7, #4]
10000d06:	691b      	ldr	r3, [r3, #16]
10000d08:	021b      	lsls	r3, r3, #8
10000d0a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000d0e:	4313      	orrs	r3, r2
10000d10:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000d18:	f003 0303 	and.w	r3, r3, #3
10000d1c:	2b00      	cmp	r3, #0
10000d1e:	d10f      	bne.n	10000d40 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000d28:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d2c:	2b02      	cmp	r3, #2
10000d2e:	d047      	beq.n	10000dc0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000d38:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d3c:	2b02      	cmp	r3, #2
10000d3e:	d03f      	beq.n	10000dc0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000d40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d44:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000d48:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d4c:	2b00      	cmp	r3, #0
10000d4e:	d107      	bne.n	10000d60 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000d50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d54:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000d58:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000d5c:	2b02      	cmp	r3, #2
10000d5e:	d02f      	beq.n	10000dc0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d64:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000d68:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000d6c:	2b00      	cmp	r3, #0
10000d6e:	d107      	bne.n	10000d80 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000d70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d74:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000d78:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000d7c:	2b02      	cmp	r3, #2
10000d7e:	d01f      	beq.n	10000dc0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000d80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d84:	699b      	ldr	r3, [r3, #24]
10000d86:	f023 0203 	bic.w	r2, r3, #3
10000d8a:	687b      	ldr	r3, [r7, #4]
10000d8c:	695b      	ldr	r3, [r3, #20]
10000d8e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000d92:	4313      	orrs	r3, r2
10000d94:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000d96:	f7ff fbdb 	bl	10000550 <HAL_GetTick>
10000d9a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d9c:	e008      	b.n	10000db0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d9e:	f7ff fbd7 	bl	10000550 <HAL_GetTick>
10000da2:	4602      	mov	r2, r0
10000da4:	68bb      	ldr	r3, [r7, #8]
10000da6:	1ad3      	subs	r3, r2, r3
10000da8:	2b64      	cmp	r3, #100	@ 0x64
10000daa:	d901      	bls.n	10000db0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000dac:	2303      	movs	r3, #3
10000dae:	e1c3      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000db4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000db8:	f003 0304 	and.w	r3, r3, #4
10000dbc:	2b04      	cmp	r3, #4
10000dbe:	d1ee      	bne.n	10000d9e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000dc0:	f001 fa6a 	bl	10002298 <HAL_RCC_GetSystemCoreClockFreq>
10000dc4:	4603      	mov	r3, r0
10000dc6:	4ab3      	ldr	r2, [pc, #716]	@ (10001094 <HAL_RCC_OscConfig+0x5b4>)
10000dc8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000dca:	4bb3      	ldr	r3, [pc, #716]	@ (10001098 <HAL_RCC_OscConfig+0x5b8>)
10000dcc:	681b      	ldr	r3, [r3, #0]
10000dce:	4618      	mov	r0, r3
10000dd0:	f7ff fb74 	bl	100004bc <HAL_InitTick>
10000dd4:	4603      	mov	r3, r0
10000dd6:	2b00      	cmp	r3, #0
10000dd8:	d069      	beq.n	10000eae <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000dda:	2301      	movs	r3, #1
10000ddc:	e1ac      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000dde:	687b      	ldr	r3, [r7, #4]
10000de0:	68db      	ldr	r3, [r3, #12]
10000de2:	2b00      	cmp	r3, #0
10000de4:	d049      	beq.n	10000e7a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000de6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dea:	68db      	ldr	r3, [r3, #12]
10000dec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000df0:	f043 0301 	orr.w	r3, r3, #1
10000df4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000df6:	f7ff fbab 	bl	10000550 <HAL_GetTick>
10000dfa:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000dfc:	e008      	b.n	10000e10 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000dfe:	f7ff fba7 	bl	10000550 <HAL_GetTick>
10000e02:	4602      	mov	r2, r0
10000e04:	68bb      	ldr	r3, [r7, #8]
10000e06:	1ad3      	subs	r3, r2, r3
10000e08:	2b64      	cmp	r3, #100	@ 0x64
10000e0a:	d901      	bls.n	10000e10 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000e0c:	2303      	movs	r3, #3
10000e0e:	e193      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e14:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000e18:	f003 0301 	and.w	r3, r3, #1
10000e1c:	2b01      	cmp	r3, #1
10000e1e:	d1ee      	bne.n	10000dfe <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000e20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e24:	699b      	ldr	r3, [r3, #24]
10000e26:	f023 0203 	bic.w	r2, r3, #3
10000e2a:	687b      	ldr	r3, [r7, #4]
10000e2c:	695b      	ldr	r3, [r3, #20]
10000e2e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000e32:	4313      	orrs	r3, r2
10000e34:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e36:	f7ff fb8b 	bl	10000550 <HAL_GetTick>
10000e3a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e3c:	e008      	b.n	10000e50 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e3e:	f7ff fb87 	bl	10000550 <HAL_GetTick>
10000e42:	4602      	mov	r2, r0
10000e44:	68bb      	ldr	r3, [r7, #8]
10000e46:	1ad3      	subs	r3, r2, r3
10000e48:	2b64      	cmp	r3, #100	@ 0x64
10000e4a:	d901      	bls.n	10000e50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000e4c:	2303      	movs	r3, #3
10000e4e:	e173      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e54:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000e58:	f003 0304 	and.w	r3, r3, #4
10000e5c:	2b04      	cmp	r3, #4
10000e5e:	d1ee      	bne.n	10000e3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000e60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e64:	699b      	ldr	r3, [r3, #24]
10000e66:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10000e6a:	687b      	ldr	r3, [r7, #4]
10000e6c:	691b      	ldr	r3, [r3, #16]
10000e6e:	021b      	lsls	r3, r3, #8
10000e70:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000e74:	4313      	orrs	r3, r2
10000e76:	618b      	str	r3, [r1, #24]
10000e78:	e01a      	b.n	10000eb0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000e7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e7e:	2201      	movs	r2, #1
10000e80:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e82:	f7ff fb65 	bl	10000550 <HAL_GetTick>
10000e86:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000e88:	e008      	b.n	10000e9c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e8a:	f7ff fb61 	bl	10000550 <HAL_GetTick>
10000e8e:	4602      	mov	r2, r0
10000e90:	68bb      	ldr	r3, [r7, #8]
10000e92:	1ad3      	subs	r3, r2, r3
10000e94:	2b64      	cmp	r3, #100	@ 0x64
10000e96:	d901      	bls.n	10000e9c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000e98:	2303      	movs	r3, #3
10000e9a:	e14d      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000e9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ea0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000ea4:	f003 0301 	and.w	r3, r3, #1
10000ea8:	2b01      	cmp	r3, #1
10000eaa:	d0ee      	beq.n	10000e8a <HAL_RCC_OscConfig+0x3aa>
10000eac:	e000      	b.n	10000eb0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000eae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000eb0:	687b      	ldr	r3, [r7, #4]
10000eb2:	681b      	ldr	r3, [r3, #0]
10000eb4:	f003 0310 	and.w	r3, r3, #16
10000eb8:	2b00      	cmp	r3, #0
10000eba:	f000 8091 	beq.w	10000fe0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000ebe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ec2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000ec6:	f003 0303 	and.w	r3, r3, #3
10000eca:	2b02      	cmp	r3, #2
10000ecc:	d107      	bne.n	10000ede <HAL_RCC_OscConfig+0x3fe>
10000ece:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ed2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000ed6:	f003 0302 	and.w	r3, r3, #2
10000eda:	2b02      	cmp	r3, #2
10000edc:	d01e      	beq.n	10000f1c <HAL_RCC_OscConfig+0x43c>
10000ede:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000ee4:	f003 0303 	and.w	r3, r3, #3
10000ee8:	2b02      	cmp	r3, #2
10000eea:	d107      	bne.n	10000efc <HAL_RCC_OscConfig+0x41c>
10000eec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000efa:	d00f      	beq.n	10000f1c <HAL_RCC_OscConfig+0x43c>
10000efc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f00:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000f04:	f003 0303 	and.w	r3, r3, #3
10000f08:	2b02      	cmp	r3, #2
10000f0a:	d122      	bne.n	10000f52 <HAL_RCC_OscConfig+0x472>
10000f0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000f14:	f003 0302 	and.w	r3, r3, #2
10000f18:	2b02      	cmp	r3, #2
10000f1a:	d11a      	bne.n	10000f52 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000f24:	f003 0310 	and.w	r3, r3, #16
10000f28:	2b10      	cmp	r3, #16
10000f2a:	d105      	bne.n	10000f38 <HAL_RCC_OscConfig+0x458>
10000f2c:	687b      	ldr	r3, [r7, #4]
10000f2e:	69db      	ldr	r3, [r3, #28]
10000f30:	2b10      	cmp	r3, #16
10000f32:	d001      	beq.n	10000f38 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000f34:	2301      	movs	r3, #1
10000f36:	e0ff      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000f38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f3c:	69db      	ldr	r3, [r3, #28]
10000f3e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10000f42:	687b      	ldr	r3, [r7, #4]
10000f44:	6a1b      	ldr	r3, [r3, #32]
10000f46:	021b      	lsls	r3, r3, #8
10000f48:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000f4c:	4313      	orrs	r3, r2
10000f4e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000f50:	e046      	b.n	10000fe0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000f52:	687b      	ldr	r3, [r7, #4]
10000f54:	69db      	ldr	r3, [r3, #28]
10000f56:	2b00      	cmp	r3, #0
10000f58:	d029      	beq.n	10000fae <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000f5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f5e:	68db      	ldr	r3, [r3, #12]
10000f60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000f64:	f043 0310 	orr.w	r3, r3, #16
10000f68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f6a:	f7ff faf1 	bl	10000550 <HAL_GetTick>
10000f6e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000f70:	e008      	b.n	10000f84 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000f72:	f7ff faed 	bl	10000550 <HAL_GetTick>
10000f76:	4602      	mov	r2, r0
10000f78:	68bb      	ldr	r3, [r7, #8]
10000f7a:	1ad3      	subs	r3, r2, r3
10000f7c:	2b64      	cmp	r3, #100	@ 0x64
10000f7e:	d901      	bls.n	10000f84 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000f80:	2303      	movs	r3, #3
10000f82:	e0d9      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000f84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f88:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000f8c:	f003 0310 	and.w	r3, r3, #16
10000f90:	2b10      	cmp	r3, #16
10000f92:	d1ee      	bne.n	10000f72 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000f94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f98:	69db      	ldr	r3, [r3, #28]
10000f9a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10000f9e:	687b      	ldr	r3, [r7, #4]
10000fa0:	6a1b      	ldr	r3, [r3, #32]
10000fa2:	021b      	lsls	r3, r3, #8
10000fa4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000fa8:	4313      	orrs	r3, r2
10000faa:	61cb      	str	r3, [r1, #28]
10000fac:	e018      	b.n	10000fe0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000fae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fb2:	2210      	movs	r2, #16
10000fb4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fb6:	f7ff facb 	bl	10000550 <HAL_GetTick>
10000fba:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000fbc:	e008      	b.n	10000fd0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000fbe:	f7ff fac7 	bl	10000550 <HAL_GetTick>
10000fc2:	4602      	mov	r2, r0
10000fc4:	68bb      	ldr	r3, [r7, #8]
10000fc6:	1ad3      	subs	r3, r2, r3
10000fc8:	2b64      	cmp	r3, #100	@ 0x64
10000fca:	d901      	bls.n	10000fd0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000fcc:	2303      	movs	r3, #3
10000fce:	e0b3      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000fd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fd4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000fd8:	f003 0310 	and.w	r3, r3, #16
10000fdc:	2b10      	cmp	r3, #16
10000fde:	d0ee      	beq.n	10000fbe <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000fe0:	687b      	ldr	r3, [r7, #4]
10000fe2:	681b      	ldr	r3, [r3, #0]
10000fe4:	f003 0308 	and.w	r3, r3, #8
10000fe8:	2b00      	cmp	r3, #0
10000fea:	d042      	beq.n	10001072 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000fec:	687b      	ldr	r3, [r7, #4]
10000fee:	699b      	ldr	r3, [r3, #24]
10000ff0:	2b00      	cmp	r3, #0
10000ff2:	d01f      	beq.n	10001034 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ff8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000ffc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001000:	f043 0301 	orr.w	r3, r3, #1
10001004:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001008:	f7ff faa2 	bl	10000550 <HAL_GetTick>
1000100c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000100e:	e008      	b.n	10001022 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001010:	f7ff fa9e 	bl	10000550 <HAL_GetTick>
10001014:	4602      	mov	r2, r0
10001016:	68bb      	ldr	r3, [r7, #8]
10001018:	1ad3      	subs	r3, r2, r3
1000101a:	2b64      	cmp	r3, #100	@ 0x64
1000101c:	d901      	bls.n	10001022 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000101e:	2303      	movs	r3, #3
10001020:	e08a      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001026:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000102a:	f003 0302 	and.w	r3, r3, #2
1000102e:	2b02      	cmp	r3, #2
10001030:	d1ee      	bne.n	10001010 <HAL_RCC_OscConfig+0x530>
10001032:	e01e      	b.n	10001072 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001034:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001038:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000103c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001040:	f023 0301 	bic.w	r3, r3, #1
10001044:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001048:	f7ff fa82 	bl	10000550 <HAL_GetTick>
1000104c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000104e:	e008      	b.n	10001062 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001050:	f7ff fa7e 	bl	10000550 <HAL_GetTick>
10001054:	4602      	mov	r2, r0
10001056:	68bb      	ldr	r3, [r7, #8]
10001058:	1ad3      	subs	r3, r2, r3
1000105a:	2b64      	cmp	r3, #100	@ 0x64
1000105c:	d901      	bls.n	10001062 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000105e:	2303      	movs	r3, #3
10001060:	e06a      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001062:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001066:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000106a:	f003 0302 	and.w	r3, r3, #2
1000106e:	2b02      	cmp	r3, #2
10001070:	d0ee      	beq.n	10001050 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001072:	687b      	ldr	r3, [r7, #4]
10001074:	681b      	ldr	r3, [r3, #0]
10001076:	f003 0304 	and.w	r3, r3, #4
1000107a:	2b00      	cmp	r3, #0
1000107c:	d02b      	beq.n	100010d6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000107e:	4b07      	ldr	r3, [pc, #28]	@ (1000109c <HAL_RCC_OscConfig+0x5bc>)
10001080:	681b      	ldr	r3, [r3, #0]
10001082:	4a06      	ldr	r2, [pc, #24]	@ (1000109c <HAL_RCC_OscConfig+0x5bc>)
10001084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000108a:	f7ff fa61 	bl	10000550 <HAL_GetTick>
1000108e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001090:	e00f      	b.n	100010b2 <HAL_RCC_OscConfig+0x5d2>
10001092:	bf00      	nop
10001094:	10020000 	.word	0x10020000
10001098:	10020004 	.word	0x10020004
1000109c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100010a0:	f7ff fa56 	bl	10000550 <HAL_GetTick>
100010a4:	4602      	mov	r2, r0
100010a6:	68bb      	ldr	r3, [r7, #8]
100010a8:	1ad3      	subs	r3, r2, r3
100010aa:	2b64      	cmp	r3, #100	@ 0x64
100010ac:	d901      	bls.n	100010b2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100010ae:	2303      	movs	r3, #3
100010b0:	e042      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100010b2:	4b23      	ldr	r3, [pc, #140]	@ (10001140 <HAL_RCC_OscConfig+0x660>)
100010b4:	681b      	ldr	r3, [r3, #0]
100010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100010ba:	2b00      	cmp	r3, #0
100010bc:	d0f0      	beq.n	100010a0 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100010be:	687b      	ldr	r3, [r7, #4]
100010c0:	689b      	ldr	r3, [r3, #8]
100010c2:	4618      	mov	r0, r3
100010c4:	f000 f8a9 	bl	1000121a <HAL_RCC_LSEConfig>
100010c8:	4603      	mov	r3, r0
100010ca:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100010cc:	7bfb      	ldrb	r3, [r7, #15]
100010ce:	2b00      	cmp	r3, #0
100010d0:	d001      	beq.n	100010d6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100010d2:	7bfb      	ldrb	r3, [r7, #15]
100010d4:	e030      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100010d6:	687b      	ldr	r3, [r7, #4]
100010d8:	3324      	adds	r3, #36	@ 0x24
100010da:	4618      	mov	r0, r3
100010dc:	f000 f91a 	bl	10001314 <RCC_PLL1_Config>
100010e0:	4603      	mov	r3, r0
100010e2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100010e4:	7bfb      	ldrb	r3, [r7, #15]
100010e6:	2b00      	cmp	r3, #0
100010e8:	d001      	beq.n	100010ee <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100010ea:	7bfb      	ldrb	r3, [r7, #15]
100010ec:	e024      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100010ee:	687b      	ldr	r3, [r7, #4]
100010f0:	3360      	adds	r3, #96	@ 0x60
100010f2:	4618      	mov	r0, r3
100010f4:	f001 f96c 	bl	100023d0 <RCCEx_PLL2_Config>
100010f8:	4603      	mov	r3, r0
100010fa:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100010fc:	7bfb      	ldrb	r3, [r7, #15]
100010fe:	2b00      	cmp	r3, #0
10001100:	d001      	beq.n	10001106 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10001102:	7bfb      	ldrb	r3, [r7, #15]
10001104:	e018      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001106:	687b      	ldr	r3, [r7, #4]
10001108:	339c      	adds	r3, #156	@ 0x9c
1000110a:	4618      	mov	r0, r3
1000110c:	f001 fae2 	bl	100026d4 <RCCEx_PLL3_Config>
10001110:	4603      	mov	r3, r0
10001112:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001114:	7bfb      	ldrb	r3, [r7, #15]
10001116:	2b00      	cmp	r3, #0
10001118:	d001      	beq.n	1000111e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000111a:	7bfb      	ldrb	r3, [r7, #15]
1000111c:	e00c      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000111e:	687b      	ldr	r3, [r7, #4]
10001120:	33d8      	adds	r3, #216	@ 0xd8
10001122:	4618      	mov	r0, r3
10001124:	f001 fc40 	bl	100029a8 <RCCEx_PLL4_Config>
10001128:	4603      	mov	r3, r0
1000112a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000112c:	7bfb      	ldrb	r3, [r7, #15]
1000112e:	2b00      	cmp	r3, #0
10001130:	d001      	beq.n	10001136 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001132:	7bfb      	ldrb	r3, [r7, #15]
10001134:	e000      	b.n	10001138 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001136:	2300      	movs	r3, #0
}
10001138:	4618      	mov	r0, r3
1000113a:	3710      	adds	r7, #16
1000113c:	46bd      	mov	sp, r7
1000113e:	bd80      	pop	{r7, pc}
10001140:	50001000 	.word	0x50001000

10001144 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001144:	b580      	push	{r7, lr}
10001146:	b084      	sub	sp, #16
10001148:	af00      	add	r7, sp, #0
1000114a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000114c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
10001154:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001156:	f7ff f9fb 	bl	10000550 <HAL_GetTick>
1000115a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000115c:	e008      	b.n	10001170 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000115e:	f7ff f9f7 	bl	10000550 <HAL_GetTick>
10001162:	4602      	mov	r2, r0
10001164:	68fb      	ldr	r3, [r7, #12]
10001166:	1ad3      	subs	r3, r2, r3
10001168:	2b64      	cmp	r3, #100	@ 0x64
1000116a:	d901      	bls.n	10001170 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000116c:	2303      	movs	r3, #3
1000116e:	e050      	b.n	10001212 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001170:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001174:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000117c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001180:	d0ed      	beq.n	1000115e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001182:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001186:	f44f 6290 	mov.w	r2, #1152	@ 0x480
1000118a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000118c:	687b      	ldr	r3, [r7, #4]
1000118e:	2b00      	cmp	r3, #0
10001190:	d03e      	beq.n	10001210 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001192:	687b      	ldr	r3, [r7, #4]
10001194:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10001198:	d108      	bne.n	100011ac <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000119a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000119e:	68db      	ldr	r3, [r3, #12]
100011a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100011a8:	60d3      	str	r3, [r2, #12]
100011aa:	e013      	b.n	100011d4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100011ac:	687b      	ldr	r3, [r7, #4]
100011ae:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100011b2:	d10f      	bne.n	100011d4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100011b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011b8:	68db      	ldr	r3, [r3, #12]
100011ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100011c2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100011c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011c8:	68db      	ldr	r3, [r3, #12]
100011ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100011d2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100011d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011d8:	68db      	ldr	r3, [r3, #12]
100011da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100011e2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100011e4:	f7ff f9b4 	bl	10000550 <HAL_GetTick>
100011e8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100011ea:	e008      	b.n	100011fe <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100011ec:	f7ff f9b0 	bl	10000550 <HAL_GetTick>
100011f0:	4602      	mov	r2, r0
100011f2:	68fb      	ldr	r3, [r7, #12]
100011f4:	1ad3      	subs	r3, r2, r3
100011f6:	2b64      	cmp	r3, #100	@ 0x64
100011f8:	d901      	bls.n	100011fe <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100011fa:	2303      	movs	r3, #3
100011fc:	e009      	b.n	10001212 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100011fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001202:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000120a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000120e:	d1ed      	bne.n	100011ec <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001210:	2300      	movs	r3, #0
}
10001212:	4618      	mov	r0, r3
10001214:	3710      	adds	r7, #16
10001216:	46bd      	mov	sp, r7
10001218:	bd80      	pop	{r7, pc}

1000121a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000121a:	b580      	push	{r7, lr}
1000121c:	b084      	sub	sp, #16
1000121e:	af00      	add	r7, sp, #0
10001220:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001222:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001226:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000122a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000122e:	f023 0301 	bic.w	r3, r3, #1
10001232:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001236:	f7ff f98b 	bl	10000550 <HAL_GetTick>
1000123a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000123c:	e00a      	b.n	10001254 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000123e:	f7ff f987 	bl	10000550 <HAL_GetTick>
10001242:	4602      	mov	r2, r0
10001244:	68fb      	ldr	r3, [r7, #12]
10001246:	1ad3      	subs	r3, r2, r3
10001248:	f241 3288 	movw	r2, #5000	@ 0x1388
1000124c:	4293      	cmp	r3, r2
1000124e:	d901      	bls.n	10001254 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001250:	2303      	movs	r3, #3
10001252:	e05b      	b.n	1000130c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001258:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000125c:	f003 0304 	and.w	r3, r3, #4
10001260:	2b04      	cmp	r3, #4
10001262:	d0ec      	beq.n	1000123e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001268:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000126c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001270:	f023 030a 	bic.w	r3, r3, #10
10001274:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	2b00      	cmp	r3, #0
1000127c:	d045      	beq.n	1000130a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000127e:	687b      	ldr	r3, [r7, #4]
10001280:	2b03      	cmp	r3, #3
10001282:	d10a      	bne.n	1000129a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000128c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001290:	f043 0302 	orr.w	r3, r3, #2
10001294:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10001298:	e016      	b.n	100012c8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	2b0b      	cmp	r3, #11
1000129e:	d113      	bne.n	100012c8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100012a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100012a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012ac:	f043 0308 	orr.w	r3, r3, #8
100012b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100012b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100012bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012c0:	f043 0302 	orr.w	r3, r3, #2
100012c4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100012c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100012d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012d4:	f043 0301 	orr.w	r3, r3, #1
100012d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100012dc:	f7ff f938 	bl	10000550 <HAL_GetTick>
100012e0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100012e2:	e00a      	b.n	100012fa <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100012e4:	f7ff f934 	bl	10000550 <HAL_GetTick>
100012e8:	4602      	mov	r2, r0
100012ea:	68fb      	ldr	r3, [r7, #12]
100012ec:	1ad3      	subs	r3, r2, r3
100012ee:	f241 3288 	movw	r2, #5000	@ 0x1388
100012f2:	4293      	cmp	r3, r2
100012f4:	d901      	bls.n	100012fa <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100012f6:	2303      	movs	r3, #3
100012f8:	e008      	b.n	1000130c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100012fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001302:	f003 0304 	and.w	r3, r3, #4
10001306:	2b04      	cmp	r3, #4
10001308:	d1ec      	bne.n	100012e4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000130a:	2300      	movs	r3, #0
}
1000130c:	4618      	mov	r0, r3
1000130e:	3710      	adds	r7, #16
10001310:	46bd      	mov	sp, r7
10001312:	bd80      	pop	{r7, pc}

10001314 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001314:	b580      	push	{r7, lr}
10001316:	b084      	sub	sp, #16
10001318:	af00      	add	r7, sp, #0
1000131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000131c:	687b      	ldr	r3, [r7, #4]
1000131e:	681b      	ldr	r3, [r3, #0]
10001320:	2b00      	cmp	r3, #0
10001322:	f000 8174 	beq.w	1000160e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000132a:	6a1b      	ldr	r3, [r3, #32]
1000132c:	f003 0303 	and.w	r3, r3, #3
10001330:	2b02      	cmp	r3, #2
10001332:	d108      	bne.n	10001346 <RCC_PLL1_Config+0x32>
10001334:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001338:	6a1b      	ldr	r3, [r3, #32]
1000133a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000133e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001342:	f000 8162 	beq.w	1000160a <RCC_PLL1_Config+0x2f6>
10001346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000134a:	6a1b      	ldr	r3, [r3, #32]
1000134c:	f003 0303 	and.w	r3, r3, #3
10001350:	2b03      	cmp	r3, #3
10001352:	d108      	bne.n	10001366 <RCC_PLL1_Config+0x52>
10001354:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001358:	6a1b      	ldr	r3, [r3, #32]
1000135a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000135e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001362:	f000 8152 	beq.w	1000160a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001366:	687b      	ldr	r3, [r7, #4]
10001368:	681b      	ldr	r3, [r3, #0]
1000136a:	2b02      	cmp	r3, #2
1000136c:	f040 8123 	bne.w	100015b6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001370:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001378:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000137c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001380:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000138c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001390:	f023 0301 	bic.w	r3, r3, #1
10001394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001398:	f7ff f8da 	bl	10000550 <HAL_GetTick>
1000139c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000139e:	e008      	b.n	100013b2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100013a0:	f7ff f8d6 	bl	10000550 <HAL_GetTick>
100013a4:	4602      	mov	r2, r0
100013a6:	68fb      	ldr	r3, [r7, #12]
100013a8:	1ad3      	subs	r3, r2, r3
100013aa:	2b64      	cmp	r3, #100	@ 0x64
100013ac:	d901      	bls.n	100013b2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100013ae:	2303      	movs	r3, #3
100013b0:	e12e      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100013b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100013ba:	f003 0302 	and.w	r3, r3, #2
100013be:	2b02      	cmp	r3, #2
100013c0:	d0ee      	beq.n	100013a0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100013c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100013c8:	f003 0307 	and.w	r3, r3, #7
100013cc:	2b02      	cmp	r3, #2
100013ce:	d112      	bne.n	100013f6 <RCC_PLL1_Config+0xe2>
100013d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100013d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100013da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100013de:	d10a      	bne.n	100013f6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100013e0:	687b      	ldr	r3, [r7, #4]
100013e2:	685a      	ldr	r2, [r3, #4]
100013e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100013ea:	f003 0303 	and.w	r3, r3, #3
100013ee:	429a      	cmp	r2, r3
100013f0:	d00c      	beq.n	1000140c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100013f2:	2301      	movs	r3, #1
100013f4:	e10c      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100013f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100013fc:	f023 0203 	bic.w	r2, r3, #3
10001400:	687b      	ldr	r3, [r7, #4]
10001402:	685b      	ldr	r3, [r3, #4]
10001404:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001408:	4313      	orrs	r3, r2
1000140a:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000140c:	e008      	b.n	10001420 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000140e:	f7ff f89f 	bl	10000550 <HAL_GetTick>
10001412:	4602      	mov	r2, r0
10001414:	68fb      	ldr	r3, [r7, #12]
10001416:	1ad3      	subs	r3, r2, r3
10001418:	2b64      	cmp	r3, #100	@ 0x64
1000141a:	d901      	bls.n	10001420 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000141c:	2303      	movs	r3, #3
1000141e:	e0f7      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000142a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000142e:	d1ee      	bne.n	1000140e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001434:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10001438:	4b77      	ldr	r3, [pc, #476]	@ (10001618 <RCC_PLL1_Config+0x304>)
1000143a:	4013      	ands	r3, r2
1000143c:	687a      	ldr	r2, [r7, #4]
1000143e:	68d2      	ldr	r2, [r2, #12]
10001440:	1e51      	subs	r1, r2, #1
10001442:	687a      	ldr	r2, [r7, #4]
10001444:	6892      	ldr	r2, [r2, #8]
10001446:	3a01      	subs	r2, #1
10001448:	0412      	lsls	r2, r2, #16
1000144a:	430a      	orrs	r2, r1
1000144c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001450:	4313      	orrs	r3, r2
10001452:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10001456:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000145e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001462:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001466:	687a      	ldr	r2, [r7, #4]
10001468:	6912      	ldr	r2, [r2, #16]
1000146a:	1e51      	subs	r1, r2, #1
1000146c:	687a      	ldr	r2, [r7, #4]
1000146e:	6952      	ldr	r2, [r2, #20]
10001470:	3a01      	subs	r2, #1
10001472:	0212      	lsls	r2, r2, #8
10001474:	4311      	orrs	r1, r2
10001476:	687a      	ldr	r2, [r7, #4]
10001478:	6992      	ldr	r2, [r2, #24]
1000147a:	3a01      	subs	r2, #1
1000147c:	0412      	lsls	r2, r2, #16
1000147e:	430a      	orrs	r2, r1
10001480:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001484:	4313      	orrs	r3, r2
10001486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000148a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001492:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000149a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000149e:	687b      	ldr	r3, [r7, #4]
100014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100014a2:	2b02      	cmp	r3, #2
100014a4:	d003      	beq.n	100014ae <RCC_PLL1_Config+0x19a>
100014a6:	687b      	ldr	r3, [r7, #4]
100014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100014aa:	2b00      	cmp	r3, #0
100014ac:	d10c      	bne.n	100014c8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100014ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100014b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100014be:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100014c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
100014c6:	e00f      	b.n	100014e8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100014c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100014d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100014d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100014d8:	687a      	ldr	r2, [r7, #4]
100014da:	6a12      	ldr	r2, [r2, #32]
100014dc:	00d2      	lsls	r2, r2, #3
100014de:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100014e2:	4313      	orrs	r3, r2
100014e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100014e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100014f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100014f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100014fc:	687b      	ldr	r3, [r7, #4]
100014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001500:	2b02      	cmp	r3, #2
10001502:	d124      	bne.n	1000154e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
1000150c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001510:	687b      	ldr	r3, [r7, #4]
10001512:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001514:	687b      	ldr	r3, [r7, #4]
10001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001518:	4319      	orrs	r1, r3
1000151a:	687b      	ldr	r3, [r7, #4]
1000151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000151e:	4319      	orrs	r1, r3
10001520:	687b      	ldr	r3, [r7, #4]
10001522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001524:	4319      	orrs	r1, r3
10001526:	687b      	ldr	r3, [r7, #4]
10001528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000152a:	041b      	lsls	r3, r3, #16
1000152c:	430b      	orrs	r3, r1
1000152e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001532:	4313      	orrs	r3, r2
10001534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001538:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000153c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001540:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001544:	f043 0304 	orr.w	r3, r3, #4
10001548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
1000154c:	e009      	b.n	10001562 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000154e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000155a:	f023 0304 	bic.w	r3, r3, #4
1000155e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001562:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000156a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000156e:	f043 0301 	orr.w	r3, r3, #1
10001572:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001576:	f7fe ffeb 	bl	10000550 <HAL_GetTick>
1000157a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000157c:	e008      	b.n	10001590 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000157e:	f7fe ffe7 	bl	10000550 <HAL_GetTick>
10001582:	4602      	mov	r2, r0
10001584:	68fb      	ldr	r3, [r7, #12]
10001586:	1ad3      	subs	r3, r2, r3
10001588:	2b64      	cmp	r3, #100	@ 0x64
1000158a:	d901      	bls.n	10001590 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000158c:	2303      	movs	r3, #3
1000158e:	e03f      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001590:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001598:	f003 0302 	and.w	r3, r3, #2
1000159c:	2b02      	cmp	r3, #2
1000159e:	d1ee      	bne.n	1000157e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100015a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100015a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100015ac:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100015b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100015b4:	e02b      	b.n	1000160e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100015b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100015be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100015c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100015c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100015ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100015d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100015d6:	f023 0301 	bic.w	r3, r3, #1
100015da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100015de:	f7fe ffb7 	bl	10000550 <HAL_GetTick>
100015e2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100015e4:	e008      	b.n	100015f8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100015e6:	f7fe ffb3 	bl	10000550 <HAL_GetTick>
100015ea:	4602      	mov	r2, r0
100015ec:	68fb      	ldr	r3, [r7, #12]
100015ee:	1ad3      	subs	r3, r2, r3
100015f0:	2b64      	cmp	r3, #100	@ 0x64
100015f2:	d901      	bls.n	100015f8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100015f4:	2303      	movs	r3, #3
100015f6:	e00b      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100015f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001600:	f003 0302 	and.w	r3, r3, #2
10001604:	2b02      	cmp	r3, #2
10001606:	d0ee      	beq.n	100015e6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001608:	e001      	b.n	1000160e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000160a:	2301      	movs	r3, #1
1000160c:	e000      	b.n	10001610 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000160e:	2300      	movs	r3, #0

}
10001610:	4618      	mov	r0, r3
10001612:	3710      	adds	r7, #16
10001614:	46bd      	mov	sp, r7
10001616:	bd80      	pop	{r7, pc}
10001618:	ffc0fe00 	.word	0xffc0fe00

1000161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000161c:	b580      	push	{r7, lr}
1000161e:	b084      	sub	sp, #16
10001620:	af00      	add	r7, sp, #0
10001622:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001624:	2300      	movs	r3, #0
10001626:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001628:	687b      	ldr	r3, [r7, #4]
1000162a:	2b00      	cmp	r3, #0
1000162c:	d101      	bne.n	10001632 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000162e:	2301      	movs	r3, #1
10001630:	e102      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001632:	687b      	ldr	r3, [r7, #4]
10001634:	681b      	ldr	r3, [r3, #0]
10001636:	f003 0301 	and.w	r3, r3, #1
1000163a:	2b00      	cmp	r3, #0
1000163c:	d00b      	beq.n	10001656 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000163e:	687b      	ldr	r3, [r7, #4]
10001640:	3304      	adds	r3, #4
10001642:	4618      	mov	r0, r3
10001644:	f000 f8fc 	bl	10001840 <RCC_MPUConfig>
10001648:	4603      	mov	r3, r0
1000164a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000164c:	7bfb      	ldrb	r3, [r7, #15]
1000164e:	2b00      	cmp	r3, #0
10001650:	d001      	beq.n	10001656 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001652:	7bfb      	ldrb	r3, [r7, #15]
10001654:	e0f0      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001656:	687b      	ldr	r3, [r7, #4]
10001658:	681b      	ldr	r3, [r3, #0]
1000165a:	f003 0302 	and.w	r3, r3, #2
1000165e:	2b00      	cmp	r3, #0
10001660:	d00b      	beq.n	1000167a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001662:	687b      	ldr	r3, [r7, #4]
10001664:	330c      	adds	r3, #12
10001666:	4618      	mov	r0, r3
10001668:	f000 f960 	bl	1000192c <RCC_AXISSConfig>
1000166c:	4603      	mov	r3, r0
1000166e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001670:	7bfb      	ldrb	r3, [r7, #15]
10001672:	2b00      	cmp	r3, #0
10001674:	d001      	beq.n	1000167a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001676:	7bfb      	ldrb	r3, [r7, #15]
10001678:	e0de      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	681b      	ldr	r3, [r3, #0]
1000167e:	f003 0304 	and.w	r3, r3, #4
10001682:	2b00      	cmp	r3, #0
10001684:	d00b      	beq.n	1000169e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001686:	687b      	ldr	r3, [r7, #4]
10001688:	3314      	adds	r3, #20
1000168a:	4618      	mov	r0, r3
1000168c:	f000 f9e6 	bl	10001a5c <RCC_MCUConfig>
10001690:	4603      	mov	r3, r0
10001692:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001694:	7bfb      	ldrb	r3, [r7, #15]
10001696:	2b00      	cmp	r3, #0
10001698:	d001      	beq.n	1000169e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000169a:	7bfb      	ldrb	r3, [r7, #15]
1000169c:	e0cc      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000169e:	687b      	ldr	r3, [r7, #4]
100016a0:	681b      	ldr	r3, [r3, #0]
100016a2:	f003 0308 	and.w	r3, r3, #8
100016a6:	2b00      	cmp	r3, #0
100016a8:	d020      	beq.n	100016ec <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100016aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100016b0:	f023 0207 	bic.w	r2, r3, #7
100016b4:	687b      	ldr	r3, [r7, #4]
100016b6:	69db      	ldr	r3, [r3, #28]
100016b8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100016bc:	4313      	orrs	r3, r2
100016be:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016c0:	f7fe ff46 	bl	10000550 <HAL_GetTick>
100016c4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100016c6:	e009      	b.n	100016dc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016c8:	f7fe ff42 	bl	10000550 <HAL_GetTick>
100016cc:	4602      	mov	r2, r0
100016ce:	68bb      	ldr	r3, [r7, #8]
100016d0:	1ad3      	subs	r3, r2, r3
100016d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100016d6:	d901      	bls.n	100016dc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100016d8:	2303      	movs	r3, #3
100016da:	e0ad      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100016dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100016e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016ea:	d1ed      	bne.n	100016c8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100016ec:	687b      	ldr	r3, [r7, #4]
100016ee:	681b      	ldr	r3, [r3, #0]
100016f0:	f003 0310 	and.w	r3, r3, #16
100016f4:	2b00      	cmp	r3, #0
100016f6:	d020      	beq.n	1000173a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100016f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100016fe:	f023 0207 	bic.w	r2, r3, #7
10001702:	687b      	ldr	r3, [r7, #4]
10001704:	6a1b      	ldr	r3, [r3, #32]
10001706:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000170a:	4313      	orrs	r3, r2
1000170c:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000170e:	f7fe ff1f 	bl	10000550 <HAL_GetTick>
10001712:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001714:	e009      	b.n	1000172a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001716:	f7fe ff1b 	bl	10000550 <HAL_GetTick>
1000171a:	4602      	mov	r2, r0
1000171c:	68bb      	ldr	r3, [r7, #8]
1000171e:	1ad3      	subs	r3, r2, r3
10001720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001724:	d901      	bls.n	1000172a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001726:	2303      	movs	r3, #3
10001728:	e086      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000172a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001738:	d1ed      	bne.n	10001716 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000173a:	687b      	ldr	r3, [r7, #4]
1000173c:	681b      	ldr	r3, [r3, #0]
1000173e:	f003 0320 	and.w	r3, r3, #32
10001742:	2b00      	cmp	r3, #0
10001744:	d023      	beq.n	1000178e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000174a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
1000174e:	f023 0207 	bic.w	r2, r3, #7
10001752:	687b      	ldr	r3, [r7, #4]
10001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001756:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000175a:	4313      	orrs	r3, r2
1000175c:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001760:	f7fe fef6 	bl	10000550 <HAL_GetTick>
10001764:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001766:	e009      	b.n	1000177c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001768:	f7fe fef2 	bl	10000550 <HAL_GetTick>
1000176c:	4602      	mov	r2, r0
1000176e:	68bb      	ldr	r3, [r7, #8]
10001770:	1ad3      	subs	r3, r2, r3
10001772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001776:	d901      	bls.n	1000177c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001778:	2303      	movs	r3, #3
1000177a:	e05d      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000177c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001780:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000178c:	d1ec      	bne.n	10001768 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000178e:	687b      	ldr	r3, [r7, #4]
10001790:	681b      	ldr	r3, [r3, #0]
10001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10001796:	2b00      	cmp	r3, #0
10001798:	d023      	beq.n	100017e2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000179a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000179e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100017a2:	f023 0207 	bic.w	r2, r3, #7
100017a6:	687b      	ldr	r3, [r7, #4]
100017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100017aa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100017ae:	4313      	orrs	r3, r2
100017b0:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100017b4:	f7fe fecc 	bl	10000550 <HAL_GetTick>
100017b8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100017ba:	e009      	b.n	100017d0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100017bc:	f7fe fec8 	bl	10000550 <HAL_GetTick>
100017c0:	4602      	mov	r2, r0
100017c2:	68bb      	ldr	r3, [r7, #8]
100017c4:	1ad3      	subs	r3, r2, r3
100017c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100017ca:	d901      	bls.n	100017d0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100017cc:	2303      	movs	r3, #3
100017ce:	e033      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100017d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017d4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100017d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017e0:	d1ec      	bne.n	100017bc <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100017e2:	687b      	ldr	r3, [r7, #4]
100017e4:	681b      	ldr	r3, [r3, #0]
100017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
100017ea:	2b00      	cmp	r3, #0
100017ec:	d023      	beq.n	10001836 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100017ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017f2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100017f6:	f023 0207 	bic.w	r2, r3, #7
100017fa:	687b      	ldr	r3, [r7, #4]
100017fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100017fe:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001802:	4313      	orrs	r3, r2
10001804:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001808:	f7fe fea2 	bl	10000550 <HAL_GetTick>
1000180c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000180e:	e009      	b.n	10001824 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001810:	f7fe fe9e 	bl	10000550 <HAL_GetTick>
10001814:	4602      	mov	r2, r0
10001816:	68bb      	ldr	r3, [r7, #8]
10001818:	1ad3      	subs	r3, r2, r3
1000181a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000181e:	d901      	bls.n	10001824 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001820:	2303      	movs	r3, #3
10001822:	e009      	b.n	10001838 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001824:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001828:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
1000182c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001834:	d1ec      	bne.n	10001810 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001836:	2300      	movs	r3, #0
}
10001838:	4618      	mov	r0, r3
1000183a:	3710      	adds	r7, #16
1000183c:	46bd      	mov	sp, r7
1000183e:	bd80      	pop	{r7, pc}

10001840 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001840:	b580      	push	{r7, lr}
10001842:	b084      	sub	sp, #16
10001844:	af00      	add	r7, sp, #0
10001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001848:	687b      	ldr	r3, [r7, #4]
1000184a:	681b      	ldr	r3, [r3, #0]
1000184c:	2b03      	cmp	r3, #3
1000184e:	d840      	bhi.n	100018d2 <RCC_MPUConfig+0x92>
10001850:	a201      	add	r2, pc, #4	@ (adr r2, 10001858 <RCC_MPUConfig+0x18>)
10001852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001856:	bf00      	nop
10001858:	10001869 	.word	0x10001869
1000185c:	1000187d 	.word	0x1000187d
10001860:	10001893 	.word	0x10001893
10001864:	100018a7 	.word	0x100018a7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000186c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001870:	f003 0301 	and.w	r3, r3, #1
10001874:	2b01      	cmp	r3, #1
10001876:	d02e      	beq.n	100018d6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001878:	2301      	movs	r3, #1
1000187a:	e053      	b.n	10001924 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000187c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001880:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000188c:	d025      	beq.n	100018da <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000188e:	2301      	movs	r3, #1
10001890:	e048      	b.n	10001924 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001892:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000189a:	f003 0302 	and.w	r3, r3, #2
1000189e:	2b02      	cmp	r3, #2
100018a0:	d01d      	beq.n	100018de <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100018a2:	2301      	movs	r3, #1
100018a4:	e03e      	b.n	10001924 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100018ae:	f003 0302 	and.w	r3, r3, #2
100018b2:	2b02      	cmp	r3, #2
100018b4:	d001      	beq.n	100018ba <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100018b6:	2301      	movs	r3, #1
100018b8:	e034      	b.n	10001924 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100018ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100018c0:	f023 0207 	bic.w	r2, r3, #7
100018c4:	687b      	ldr	r3, [r7, #4]
100018c6:	685b      	ldr	r3, [r3, #4]
100018c8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018cc:	4313      	orrs	r3, r2
100018ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
100018d0:	e006      	b.n	100018e0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100018d2:	2301      	movs	r3, #1
100018d4:	e026      	b.n	10001924 <RCC_MPUConfig+0xe4>
      break;
100018d6:	bf00      	nop
100018d8:	e002      	b.n	100018e0 <RCC_MPUConfig+0xa0>
      break;
100018da:	bf00      	nop
100018dc:	e000      	b.n	100018e0 <RCC_MPUConfig+0xa0>
      break;
100018de:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100018e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018e4:	6a1b      	ldr	r3, [r3, #32]
100018e6:	f023 0203 	bic.w	r2, r3, #3
100018ea:	687b      	ldr	r3, [r7, #4]
100018ec:	681b      	ldr	r3, [r3, #0]
100018ee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018f2:	4313      	orrs	r3, r2
100018f4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100018f6:	f7fe fe2b 	bl	10000550 <HAL_GetTick>
100018fa:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100018fc:	e009      	b.n	10001912 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018fe:	f7fe fe27 	bl	10000550 <HAL_GetTick>
10001902:	4602      	mov	r2, r0
10001904:	68fb      	ldr	r3, [r7, #12]
10001906:	1ad3      	subs	r3, r2, r3
10001908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000190c:	d901      	bls.n	10001912 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000190e:	2303      	movs	r3, #3
10001910:	e008      	b.n	10001924 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001912:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001916:	6a1b      	ldr	r3, [r3, #32]
10001918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000191c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001920:	d1ed      	bne.n	100018fe <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001922:	2300      	movs	r3, #0
}
10001924:	4618      	mov	r0, r3
10001926:	3710      	adds	r7, #16
10001928:	46bd      	mov	sp, r7
1000192a:	bd80      	pop	{r7, pc}

1000192c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000192c:	b580      	push	{r7, lr}
1000192e:	b084      	sub	sp, #16
10001930:	af00      	add	r7, sp, #0
10001932:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001934:	687b      	ldr	r3, [r7, #4]
10001936:	681b      	ldr	r3, [r3, #0]
10001938:	2b02      	cmp	r3, #2
1000193a:	d01b      	beq.n	10001974 <RCC_AXISSConfig+0x48>
1000193c:	2b02      	cmp	r3, #2
1000193e:	d823      	bhi.n	10001988 <RCC_AXISSConfig+0x5c>
10001940:	2b00      	cmp	r3, #0
10001942:	d002      	beq.n	1000194a <RCC_AXISSConfig+0x1e>
10001944:	2b01      	cmp	r3, #1
10001946:	d00a      	beq.n	1000195e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001948:	e01e      	b.n	10001988 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000194a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000194e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001952:	f003 0301 	and.w	r3, r3, #1
10001956:	2b01      	cmp	r3, #1
10001958:	d018      	beq.n	1000198c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000195a:	2301      	movs	r3, #1
1000195c:	e079      	b.n	10001a52 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000195e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001962:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000196a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000196e:	d00f      	beq.n	10001990 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001970:	2301      	movs	r3, #1
10001972:	e06e      	b.n	10001a52 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001974:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000197c:	f003 0302 	and.w	r3, r3, #2
10001980:	2b02      	cmp	r3, #2
10001982:	d007      	beq.n	10001994 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001984:	2301      	movs	r3, #1
10001986:	e064      	b.n	10001a52 <RCC_AXISSConfig+0x126>
      break;
10001988:	bf00      	nop
1000198a:	e004      	b.n	10001996 <RCC_AXISSConfig+0x6a>
      break;
1000198c:	bf00      	nop
1000198e:	e002      	b.n	10001996 <RCC_AXISSConfig+0x6a>
      break;
10001990:	bf00      	nop
10001992:	e000      	b.n	10001996 <RCC_AXISSConfig+0x6a>
      break;
10001994:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001996:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000199c:	f023 0207 	bic.w	r2, r3, #7
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	681b      	ldr	r3, [r3, #0]
100019a4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100019a8:	4313      	orrs	r3, r2
100019aa:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100019ac:	687b      	ldr	r3, [r7, #4]
100019ae:	681b      	ldr	r3, [r3, #0]
100019b0:	2b03      	cmp	r3, #3
100019b2:	d016      	beq.n	100019e2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019b4:	f7fe fdcc 	bl	10000550 <HAL_GetTick>
100019b8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100019ba:	e009      	b.n	100019d0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019bc:	f7fe fdc8 	bl	10000550 <HAL_GetTick>
100019c0:	4602      	mov	r2, r0
100019c2:	68fb      	ldr	r3, [r7, #12]
100019c4:	1ad3      	subs	r3, r2, r3
100019c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100019ca:	d901      	bls.n	100019d0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100019cc:	2303      	movs	r3, #3
100019ce:	e040      	b.n	10001a52 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100019d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100019d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100019da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100019de:	d1ed      	bne.n	100019bc <RCC_AXISSConfig+0x90>
100019e0:	e015      	b.n	10001a0e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019e2:	f7fe fdb5 	bl	10000550 <HAL_GetTick>
100019e6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100019e8:	e009      	b.n	100019fe <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019ea:	f7fe fdb1 	bl	10000550 <HAL_GetTick>
100019ee:	4602      	mov	r2, r0
100019f0:	68fb      	ldr	r3, [r7, #12]
100019f2:	1ad3      	subs	r3, r2, r3
100019f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100019f8:	d901      	bls.n	100019fe <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100019fa:	2303      	movs	r3, #3
100019fc:	e029      	b.n	10001a52 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100019fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001a0c:	d0ed      	beq.n	100019ea <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001a0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001a14:	f023 0207 	bic.w	r2, r3, #7
10001a18:	687b      	ldr	r3, [r7, #4]
10001a1a:	685b      	ldr	r3, [r3, #4]
10001a1c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a20:	4313      	orrs	r3, r2
10001a22:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a24:	f7fe fd94 	bl	10000550 <HAL_GetTick>
10001a28:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a2a:	e009      	b.n	10001a40 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a2c:	f7fe fd90 	bl	10000550 <HAL_GetTick>
10001a30:	4602      	mov	r2, r0
10001a32:	68fb      	ldr	r3, [r7, #12]
10001a34:	1ad3      	subs	r3, r2, r3
10001a36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001a3a:	d901      	bls.n	10001a40 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001a3c:	2303      	movs	r3, #3
10001a3e:	e008      	b.n	10001a52 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001a4e:	d1ed      	bne.n	10001a2c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001a50:	2300      	movs	r3, #0
}
10001a52:	4618      	mov	r0, r3
10001a54:	3710      	adds	r7, #16
10001a56:	46bd      	mov	sp, r7
10001a58:	bd80      	pop	{r7, pc}
	...

10001a5c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001a5c:	b580      	push	{r7, lr}
10001a5e:	b084      	sub	sp, #16
10001a60:	af00      	add	r7, sp, #0
10001a62:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001a64:	687b      	ldr	r3, [r7, #4]
10001a66:	681b      	ldr	r3, [r3, #0]
10001a68:	2b03      	cmp	r3, #3
10001a6a:	d834      	bhi.n	10001ad6 <RCC_MCUConfig+0x7a>
10001a6c:	a201      	add	r2, pc, #4	@ (adr r2, 10001a74 <RCC_MCUConfig+0x18>)
10001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001a72:	bf00      	nop
10001a74:	10001a85 	.word	0x10001a85
10001a78:	10001a99 	.word	0x10001a99
10001a7c:	10001aaf 	.word	0x10001aaf
10001a80:	10001ac3 	.word	0x10001ac3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001a84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a88:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001a8c:	f003 0301 	and.w	r3, r3, #1
10001a90:	2b01      	cmp	r3, #1
10001a92:	d022      	beq.n	10001ada <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001a94:	2301      	movs	r3, #1
10001a96:	e081      	b.n	10001b9c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001a98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a9c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001aa8:	d019      	beq.n	10001ade <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001aaa:	2301      	movs	r3, #1
10001aac:	e076      	b.n	10001b9c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001aae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ab2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001ab6:	f003 0310 	and.w	r3, r3, #16
10001aba:	2b10      	cmp	r3, #16
10001abc:	d011      	beq.n	10001ae2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001abe:	2301      	movs	r3, #1
10001ac0:	e06c      	b.n	10001b9c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001ac2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ac6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001aca:	f003 0302 	and.w	r3, r3, #2
10001ace:	2b02      	cmp	r3, #2
10001ad0:	d009      	beq.n	10001ae6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001ad2:	2301      	movs	r3, #1
10001ad4:	e062      	b.n	10001b9c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001ad6:	bf00      	nop
10001ad8:	e006      	b.n	10001ae8 <RCC_MCUConfig+0x8c>
      break;
10001ada:	bf00      	nop
10001adc:	e004      	b.n	10001ae8 <RCC_MCUConfig+0x8c>
      break;
10001ade:	bf00      	nop
10001ae0:	e002      	b.n	10001ae8 <RCC_MCUConfig+0x8c>
      break;
10001ae2:	bf00      	nop
10001ae4:	e000      	b.n	10001ae8 <RCC_MCUConfig+0x8c>
      break;
10001ae6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001ae8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001aee:	f023 0203 	bic.w	r2, r3, #3
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	681b      	ldr	r3, [r3, #0]
10001af6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001afa:	4313      	orrs	r3, r2
10001afc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001afe:	f7fe fd27 	bl	10000550 <HAL_GetTick>
10001b02:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b04:	e009      	b.n	10001b1a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b06:	f7fe fd23 	bl	10000550 <HAL_GetTick>
10001b0a:	4602      	mov	r2, r0
10001b0c:	68fb      	ldr	r3, [r7, #12]
10001b0e:	1ad3      	subs	r3, r2, r3
10001b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001b14:	d901      	bls.n	10001b1a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001b16:	2303      	movs	r3, #3
10001b18:	e040      	b.n	10001b9c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001b28:	d1ed      	bne.n	10001b06 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b2a:	f000 fbb5 	bl	10002298 <HAL_RCC_GetSystemCoreClockFreq>
10001b2e:	4603      	mov	r3, r0
10001b30:	4a1c      	ldr	r2, [pc, #112]	@ (10001ba4 <RCC_MCUConfig+0x148>)
10001b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001b34:	4b1c      	ldr	r3, [pc, #112]	@ (10001ba8 <RCC_MCUConfig+0x14c>)
10001b36:	681b      	ldr	r3, [r3, #0]
10001b38:	4618      	mov	r0, r3
10001b3a:	f7fe fcbf 	bl	100004bc <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001b3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b42:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001b46:	f023 020f 	bic.w	r2, r3, #15
10001b4a:	687b      	ldr	r3, [r7, #4]
10001b4c:	685b      	ldr	r3, [r3, #4]
10001b4e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001b52:	4313      	orrs	r3, r2
10001b54:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001b58:	f7fe fcfa 	bl	10000550 <HAL_GetTick>
10001b5c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001b5e:	e009      	b.n	10001b74 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b60:	f7fe fcf6 	bl	10000550 <HAL_GetTick>
10001b64:	4602      	mov	r2, r0
10001b66:	68fb      	ldr	r3, [r7, #12]
10001b68:	1ad3      	subs	r3, r2, r3
10001b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001b6e:	d901      	bls.n	10001b74 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001b70:	2303      	movs	r3, #3
10001b72:	e013      	b.n	10001b9c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001b74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b78:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001b84:	d1ec      	bne.n	10001b60 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b86:	f000 fb87 	bl	10002298 <HAL_RCC_GetSystemCoreClockFreq>
10001b8a:	4603      	mov	r3, r0
10001b8c:	4a05      	ldr	r2, [pc, #20]	@ (10001ba4 <RCC_MCUConfig+0x148>)
10001b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001b90:	4b05      	ldr	r3, [pc, #20]	@ (10001ba8 <RCC_MCUConfig+0x14c>)
10001b92:	681b      	ldr	r3, [r3, #0]
10001b94:	4618      	mov	r0, r3
10001b96:	f7fe fc91 	bl	100004bc <HAL_InitTick>
#endif

  return HAL_OK;
10001b9a:	2300      	movs	r3, #0
}
10001b9c:	4618      	mov	r0, r3
10001b9e:	3710      	adds	r7, #16
10001ba0:	46bd      	mov	sp, r7
10001ba2:	bd80      	pop	{r7, pc}
10001ba4:	10020000 	.word	0x10020000
10001ba8:	10020004 	.word	0x10020004

10001bac <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10001bac:	b480      	push	{r7}
10001bae:	b089      	sub	sp, #36	@ 0x24
10001bb0:	af00      	add	r7, sp, #0
10001bb2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10001bb4:	2300      	movs	r3, #0
10001bb6:	61bb      	str	r3, [r7, #24]
10001bb8:	2301      	movs	r3, #1
10001bba:	617b      	str	r3, [r7, #20]
10001bbc:	2300      	movs	r3, #0
10001bbe:	613b      	str	r3, [r7, #16]
10001bc0:	2300      	movs	r3, #0
10001bc2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10001bc4:	f04f 0300 	mov.w	r3, #0
10001bc8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10001bca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001bd0:	f003 0303 	and.w	r3, r3, #3
10001bd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10001bd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
10001bde:	0c1b      	lsrs	r3, r3, #16
10001be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001be4:	3301      	adds	r3, #1
10001be6:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10001be8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001bf0:	0c1b      	lsrs	r3, r3, #16
10001bf2:	f003 0301 	and.w	r3, r3, #1
10001bf6:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10001bf8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001c00:	08db      	lsrs	r3, r3, #3
10001c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001c06:	693a      	ldr	r2, [r7, #16]
10001c08:	fb02 f303 	mul.w	r3, r2, r3
10001c0c:	ee07 3a90 	vmov	s15, r3
10001c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c14:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10001c18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
10001c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001c24:	3301      	adds	r3, #1
10001c26:	ee07 3a90 	vmov	s15, r3
10001c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c2e:	edd7 6a02 	vldr	s13, [r7, #8]
10001c32:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 10001d78 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10001c36:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
10001c3e:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001c42:	69bb      	ldr	r3, [r7, #24]
10001c44:	2b02      	cmp	r3, #2
10001c46:	d047      	beq.n	10001cd8 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10001c48:	69bb      	ldr	r3, [r7, #24]
10001c4a:	2b02      	cmp	r3, #2
10001c4c:	d848      	bhi.n	10001ce0 <HAL_RCC_GetPLL2ClockFreq+0x134>
10001c4e:	69bb      	ldr	r3, [r7, #24]
10001c50:	2b00      	cmp	r3, #0
10001c52:	d003      	beq.n	10001c5c <HAL_RCC_GetPLL2ClockFreq+0xb0>
10001c54:	69bb      	ldr	r3, [r7, #24]
10001c56:	2b01      	cmp	r3, #1
10001c58:	d02f      	beq.n	10001cba <HAL_RCC_GetPLL2ClockFreq+0x10e>
10001c5a:	e041      	b.n	10001ce0 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001c5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c60:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001c64:	f003 0304 	and.w	r3, r3, #4
10001c68:	2b04      	cmp	r3, #4
10001c6a:	d117      	bne.n	10001c9c <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c70:	699b      	ldr	r3, [r3, #24]
10001c72:	f003 0303 	and.w	r3, r3, #3
10001c76:	4a41      	ldr	r2, [pc, #260]	@ (10001d7c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10001c78:	fa22 f303 	lsr.w	r3, r2, r3
10001c7c:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10001c7e:	68fa      	ldr	r2, [r7, #12]
10001c80:	697b      	ldr	r3, [r7, #20]
10001c82:	fbb2 f3f3 	udiv	r3, r2, r3
10001c86:	ee07 3a90 	vmov	s15, r3
10001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c8e:	ed97 7a07 	vldr	s14, [r7, #28]
10001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10001c9a:	e025      	b.n	10001ce8 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10001c9c:	4a37      	ldr	r2, [pc, #220]	@ (10001d7c <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10001c9e:	697b      	ldr	r3, [r7, #20]
10001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
10001ca4:	ee07 3a90 	vmov	s15, r3
10001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001cac:	ed97 7a07 	vldr	s14, [r7, #28]
10001cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001cb8:	e016      	b.n	10001ce8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10001cba:	4a31      	ldr	r2, [pc, #196]	@ (10001d80 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10001cbc:	697b      	ldr	r3, [r7, #20]
10001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
10001cc2:	ee07 3a90 	vmov	s15, r3
10001cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001cca:	ed97 7a07 	vldr	s14, [r7, #28]
10001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001cd6:	e007      	b.n	10001ce8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10001cd8:	f04f 0300 	mov.w	r3, #0
10001cdc:	61fb      	str	r3, [r7, #28]
      break;
10001cde:	e003      	b.n	10001ce8 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10001ce0:	f04f 0300 	mov.w	r3, #0
10001ce4:	61fb      	str	r3, [r7, #28]
      break;
10001ce6:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10001ce8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10001cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001cf4:	3301      	adds	r3, #1
10001cf6:	ee07 3a90 	vmov	s15, r3
10001cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001cfe:	edd7 6a07 	vldr	s13, [r7, #28]
10001d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d0a:	ee17 2a90 	vmov	r2, s15
10001d0e:	687b      	ldr	r3, [r7, #4]
10001d10:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10001d12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10001d1a:	0a1b      	lsrs	r3, r3, #8
10001d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001d20:	3301      	adds	r3, #1
10001d22:	ee07 3a90 	vmov	s15, r3
10001d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d2a:	edd7 6a07 	vldr	s13, [r7, #28]
10001d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d36:	ee17 2a90 	vmov	r2, s15
10001d3a:	687b      	ldr	r3, [r7, #4]
10001d3c:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10001d3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10001d46:	0c1b      	lsrs	r3, r3, #16
10001d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001d4c:	3301      	adds	r3, #1
10001d4e:	ee07 3a90 	vmov	s15, r3
10001d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d56:	edd7 6a07 	vldr	s13, [r7, #28]
10001d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d62:	ee17 2a90 	vmov	r2, s15
10001d66:	687b      	ldr	r3, [r7, #4]
10001d68:	609a      	str	r2, [r3, #8]
}
10001d6a:	bf00      	nop
10001d6c:	3724      	adds	r7, #36	@ 0x24
10001d6e:	46bd      	mov	sp, r7
10001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d74:	4770      	bx	lr
10001d76:	bf00      	nop
10001d78:	46000000 	.word	0x46000000
10001d7c:	03d09000 	.word	0x03d09000
10001d80:	016e3600 	.word	0x016e3600

10001d84 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001d84:	b480      	push	{r7}
10001d86:	b089      	sub	sp, #36	@ 0x24
10001d88:	af00      	add	r7, sp, #0
10001d8a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001d8c:	2300      	movs	r3, #0
10001d8e:	61bb      	str	r3, [r7, #24]
10001d90:	2301      	movs	r3, #1
10001d92:	617b      	str	r3, [r7, #20]
10001d94:	2300      	movs	r3, #0
10001d96:	613b      	str	r3, [r7, #16]
10001d98:	2300      	movs	r3, #0
10001d9a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001d9c:	f04f 0300 	mov.w	r3, #0
10001da0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001da6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001daa:	f003 0303 	and.w	r3, r3, #3
10001dae:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001db4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001db8:	0c1b      	lsrs	r3, r3, #16
10001dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001dbe:	3301      	adds	r3, #1
10001dc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001dc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dc6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001dca:	0c1b      	lsrs	r3, r3, #16
10001dcc:	f003 0301 	and.w	r3, r3, #1
10001dd0:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001dd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dd6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001dda:	08db      	lsrs	r3, r3, #3
10001ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001de0:	693a      	ldr	r2, [r7, #16]
10001de2:	fb02 f303 	mul.w	r3, r2, r3
10001de6:	ee07 3a90 	vmov	s15, r3
10001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001dee:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001df2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001df6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001dfe:	3301      	adds	r3, #1
10001e00:	ee07 3a90 	vmov	s15, r3
10001e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e08:	edd7 6a02 	vldr	s13, [r7, #8]
10001e0c:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10001f68 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001e10:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
10001e18:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001e1c:	69bb      	ldr	r3, [r7, #24]
10001e1e:	2b03      	cmp	r3, #3
10001e20:	d85b      	bhi.n	10001eda <HAL_RCC_GetPLL3ClockFreq+0x156>
10001e22:	a201      	add	r2, pc, #4	@ (adr r2, 10001e28 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001e28:	10001e39 	.word	0x10001e39
10001e2c:	10001e97 	.word	0x10001e97
10001e30:	10001eb5 	.word	0x10001eb5
10001e34:	10001ed3 	.word	0x10001ed3
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001e38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e3c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001e40:	f003 0304 	and.w	r3, r3, #4
10001e44:	2b04      	cmp	r3, #4
10001e46:	d117      	bne.n	10001e78 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e4c:	699b      	ldr	r3, [r3, #24]
10001e4e:	f003 0303 	and.w	r3, r3, #3
10001e52:	4a46      	ldr	r2, [pc, #280]	@ (10001f6c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001e54:	fa22 f303 	lsr.w	r3, r2, r3
10001e58:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001e5a:	68fa      	ldr	r2, [r7, #12]
10001e5c:	697b      	ldr	r3, [r7, #20]
10001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
10001e62:	ee07 3a90 	vmov	s15, r3
10001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e6a:	ed97 7a07 	vldr	s14, [r7, #28]
10001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001e76:	e030      	b.n	10001eda <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001e78:	4a3c      	ldr	r2, [pc, #240]	@ (10001f6c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001e7a:	697b      	ldr	r3, [r7, #20]
10001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
10001e80:	ee07 3a90 	vmov	s15, r3
10001e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e88:	ed97 7a07 	vldr	s14, [r7, #28]
10001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001e94:	e021      	b.n	10001eda <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001e96:	4a36      	ldr	r2, [pc, #216]	@ (10001f70 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001e98:	697b      	ldr	r3, [r7, #20]
10001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
10001e9e:	ee07 3a90 	vmov	s15, r3
10001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ea6:	ed97 7a07 	vldr	s14, [r7, #28]
10001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
10001eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001eb2:	e012      	b.n	10001eda <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001eb4:	4a2f      	ldr	r2, [pc, #188]	@ (10001f74 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001eb6:	697b      	ldr	r3, [r7, #20]
10001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
10001ebc:	ee07 3a90 	vmov	s15, r3
10001ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ec4:	ed97 7a07 	vldr	s14, [r7, #28]
10001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
10001ecc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001ed0:	e003      	b.n	10001eda <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001ed2:	f04f 0300 	mov.w	r3, #0
10001ed6:	61fb      	str	r3, [r7, #28]
      break;
10001ed8:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001eda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ede:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001ee6:	3301      	adds	r3, #1
10001ee8:	ee07 3a90 	vmov	s15, r3
10001eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ef0:	edd7 6a07 	vldr	s13, [r7, #28]
10001ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001efc:	ee17 2a90 	vmov	r2, s15
10001f00:	687b      	ldr	r3, [r7, #4]
10001f02:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f08:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001f0c:	0a1b      	lsrs	r3, r3, #8
10001f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001f12:	3301      	adds	r3, #1
10001f14:	ee07 3a90 	vmov	s15, r3
10001f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f1c:	edd7 6a07 	vldr	s13, [r7, #28]
10001f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001f28:	ee17 2a90 	vmov	r2, s15
10001f2c:	687b      	ldr	r3, [r7, #4]
10001f2e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001f30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f34:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001f38:	0c1b      	lsrs	r3, r3, #16
10001f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001f3e:	3301      	adds	r3, #1
10001f40:	ee07 3a90 	vmov	s15, r3
10001f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f48:	edd7 6a07 	vldr	s13, [r7, #28]
10001f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001f54:	ee17 2a90 	vmov	r2, s15
10001f58:	687b      	ldr	r3, [r7, #4]
10001f5a:	609a      	str	r2, [r3, #8]
}
10001f5c:	bf00      	nop
10001f5e:	3724      	adds	r7, #36	@ 0x24
10001f60:	46bd      	mov	sp, r7
10001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f66:	4770      	bx	lr
10001f68:	46000000 	.word	0x46000000
10001f6c:	03d09000 	.word	0x03d09000
10001f70:	016e3600 	.word	0x016e3600
10001f74:	003d0900 	.word	0x003d0900

10001f78 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10001f78:	b480      	push	{r7}
10001f7a:	b089      	sub	sp, #36	@ 0x24
10001f7c:	af00      	add	r7, sp, #0
10001f7e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10001f80:	2300      	movs	r3, #0
10001f82:	61bb      	str	r3, [r7, #24]
10001f84:	2301      	movs	r3, #1
10001f86:	617b      	str	r3, [r7, #20]
10001f88:	2300      	movs	r3, #0
10001f8a:	613b      	str	r3, [r7, #16]
10001f8c:	2300      	movs	r3, #0
10001f8e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10001f90:	f04f 0300 	mov.w	r3, #0
10001f94:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10001f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f9a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001f9e:	f003 0303 	and.w	r3, r3, #3
10001fa2:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10001fa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fa8:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10001fac:	0c1b      	lsrs	r3, r3, #16
10001fae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001fb2:	3301      	adds	r3, #1
10001fb4:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10001fb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fba:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001fbe:	0c1b      	lsrs	r3, r3, #16
10001fc0:	f003 0301 	and.w	r3, r3, #1
10001fc4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10001fc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fca:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001fce:	08db      	lsrs	r3, r3, #3
10001fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001fd4:	693a      	ldr	r2, [r7, #16]
10001fd6:	fb02 f303 	mul.w	r3, r2, r3
10001fda:	ee07 3a90 	vmov	s15, r3
10001fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fe2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001fe6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fea:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10001fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001ff2:	3301      	adds	r3, #1
10001ff4:	ee07 3a90 	vmov	s15, r3
10001ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ffc:	edd7 6a02 	vldr	s13, [r7, #8]
10002000:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 10002174 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10002004:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002008:	ee77 7a27 	vadd.f32	s15, s14, s15
1000200c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002010:	69bb      	ldr	r3, [r7, #24]
10002012:	2b03      	cmp	r3, #3
10002014:	d866      	bhi.n	100020e4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10002016:	a201      	add	r2, pc, #4	@ (adr r2, 1000201c <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000201c:	1000202d 	.word	0x1000202d
10002020:	1000208b 	.word	0x1000208b
10002024:	100020a9 	.word	0x100020a9
10002028:	100020c7 	.word	0x100020c7
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
1000202c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002030:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002034:	f003 0304 	and.w	r3, r3, #4
10002038:	2b04      	cmp	r3, #4
1000203a:	d117      	bne.n	1000206c <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000203c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002040:	699b      	ldr	r3, [r3, #24]
10002042:	f003 0303 	and.w	r3, r3, #3
10002046:	4a4c      	ldr	r2, [pc, #304]	@ (10002178 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10002048:	fa22 f303 	lsr.w	r3, r2, r3
1000204c:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
1000204e:	68fa      	ldr	r2, [r7, #12]
10002050:	697b      	ldr	r3, [r7, #20]
10002052:	fbb2 f3f3 	udiv	r3, r2, r3
10002056:	ee07 3a90 	vmov	s15, r3
1000205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000205e:	ed97 7a07 	vldr	s14, [r7, #28]
10002062:	ee67 7a27 	vmul.f32	s15, s14, s15
10002066:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
1000206a:	e03b      	b.n	100020e4 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
1000206c:	4a42      	ldr	r2, [pc, #264]	@ (10002178 <HAL_RCC_GetPLL4ClockFreq+0x200>)
1000206e:	697b      	ldr	r3, [r7, #20]
10002070:	fbb2 f3f3 	udiv	r3, r2, r3
10002074:	ee07 3a90 	vmov	s15, r3
10002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000207c:	ed97 7a07 	vldr	s14, [r7, #28]
10002080:	ee67 7a27 	vmul.f32	s15, s14, s15
10002084:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002088:	e02c      	b.n	100020e4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
1000208a:	4a3c      	ldr	r2, [pc, #240]	@ (1000217c <HAL_RCC_GetPLL4ClockFreq+0x204>)
1000208c:	697b      	ldr	r3, [r7, #20]
1000208e:	fbb2 f3f3 	udiv	r3, r2, r3
10002092:	ee07 3a90 	vmov	s15, r3
10002096:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000209a:	ed97 7a07 	vldr	s14, [r7, #28]
1000209e:	ee67 7a27 	vmul.f32	s15, s14, s15
100020a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100020a6:	e01d      	b.n	100020e4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
100020a8:	4a35      	ldr	r2, [pc, #212]	@ (10002180 <HAL_RCC_GetPLL4ClockFreq+0x208>)
100020aa:	697b      	ldr	r3, [r7, #20]
100020ac:	fbb2 f3f3 	udiv	r3, r2, r3
100020b0:	ee07 3a90 	vmov	s15, r3
100020b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100020b8:	ed97 7a07 	vldr	s14, [r7, #28]
100020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
100020c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100020c4:	e00e      	b.n	100020e4 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
100020c6:	4a2f      	ldr	r2, [pc, #188]	@ (10002184 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
100020c8:	697b      	ldr	r3, [r7, #20]
100020ca:	fbb2 f3f3 	udiv	r3, r2, r3
100020ce:	ee07 3a90 	vmov	s15, r3
100020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100020d6:	ed97 7a07 	vldr	s14, [r7, #28]
100020da:	ee67 7a27 	vmul.f32	s15, s14, s15
100020de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100020e2:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
100020e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020e8:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
100020ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100020f0:	3301      	adds	r3, #1
100020f2:	ee07 3a90 	vmov	s15, r3
100020f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100020fa:	edd7 6a07 	vldr	s13, [r7, #28]
100020fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002106:	ee17 2a90 	vmov	r2, s15
1000210a:	687b      	ldr	r3, [r7, #4]
1000210c:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
1000210e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002112:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002116:	0a1b      	lsrs	r3, r3, #8
10002118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000211c:	3301      	adds	r3, #1
1000211e:	ee07 3a90 	vmov	s15, r3
10002122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002126:	edd7 6a07 	vldr	s13, [r7, #28]
1000212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000212e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002132:	ee17 2a90 	vmov	r2, s15
10002136:	687b      	ldr	r3, [r7, #4]
10002138:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
1000213a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000213e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002142:	0c1b      	lsrs	r3, r3, #16
10002144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002148:	3301      	adds	r3, #1
1000214a:	ee07 3a90 	vmov	s15, r3
1000214e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002152:	edd7 6a07 	vldr	s13, [r7, #28]
10002156:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000215a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000215e:	ee17 2a90 	vmov	r2, s15
10002162:	687b      	ldr	r3, [r7, #4]
10002164:	609a      	str	r2, [r3, #8]
}
10002166:	bf00      	nop
10002168:	3724      	adds	r7, #36	@ 0x24
1000216a:	46bd      	mov	sp, r7
1000216c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002170:	4770      	bx	lr
10002172:	bf00      	nop
10002174:	46000000 	.word	0x46000000
10002178:	03d09000 	.word	0x03d09000
1000217c:	016e3600 	.word	0x016e3600
10002180:	003d0900 	.word	0x003d0900
10002184:	00bb8000 	.word	0x00bb8000

10002188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10002188:	b580      	push	{r7, lr}
1000218a:	b082      	sub	sp, #8
1000218c:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000218e:	2300      	movs	r3, #0
10002190:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10002192:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002196:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
1000219a:	f003 0307 	and.w	r3, r3, #7
1000219e:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
100021a0:	687b      	ldr	r3, [r7, #4]
100021a2:	2b04      	cmp	r3, #4
100021a4:	d901      	bls.n	100021aa <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
100021a6:	2304      	movs	r3, #4
100021a8:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
100021aa:	f000 f85a 	bl	10002262 <HAL_RCC_GetMCUFreq>
100021ae:	4602      	mov	r2, r0
100021b0:	687b      	ldr	r3, [r7, #4]
100021b2:	fa22 f303 	lsr.w	r3, r2, r3
}
100021b6:	4618      	mov	r0, r3
100021b8:	3708      	adds	r7, #8
100021ba:	46bd      	mov	sp, r7
100021bc:	bd80      	pop	{r7, pc}

100021be <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
100021be:	b580      	push	{r7, lr}
100021c0:	b082      	sub	sp, #8
100021c2:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
100021c4:	2300      	movs	r3, #0
100021c6:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
100021c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021cc:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100021d0:	f003 0307 	and.w	r3, r3, #7
100021d4:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100021d6:	687b      	ldr	r3, [r7, #4]
100021d8:	2b04      	cmp	r3, #4
100021da:	d901      	bls.n	100021e0 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100021dc:	2304      	movs	r3, #4
100021de:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100021e0:	f000 f83f 	bl	10002262 <HAL_RCC_GetMCUFreq>
100021e4:	4602      	mov	r2, r0
100021e6:	687b      	ldr	r3, [r7, #4]
100021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
100021ec:	4618      	mov	r0, r3
100021ee:	3708      	adds	r7, #8
100021f0:	46bd      	mov	sp, r7
100021f2:	bd80      	pop	{r7, pc}

100021f4 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
100021f4:	b580      	push	{r7, lr}
100021f6:	b082      	sub	sp, #8
100021f8:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
100021fa:	2300      	movs	r3, #0
100021fc:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
100021fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10002204:	f003 0307 	and.w	r3, r3, #7
10002208:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
1000220a:	687b      	ldr	r3, [r7, #4]
1000220c:	2b04      	cmp	r3, #4
1000220e:	d901      	bls.n	10002214 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10002210:	2304      	movs	r3, #4
10002212:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10002214:	f000 f808 	bl	10002228 <HAL_RCC_GetACLKFreq>
10002218:	4602      	mov	r2, r0
1000221a:	687b      	ldr	r3, [r7, #4]
1000221c:	fa22 f303 	lsr.w	r3, r2, r3
}
10002220:	4618      	mov	r0, r3
10002222:	3708      	adds	r7, #8
10002224:	46bd      	mov	sp, r7
10002226:	bd80      	pop	{r7, pc}

10002228 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10002228:	b580      	push	{r7, lr}
1000222a:	b082      	sub	sp, #8
1000222c:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
1000222e:	2300      	movs	r3, #0
10002230:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10002232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002238:	f003 0307 	and.w	r3, r3, #7
1000223c:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	2b03      	cmp	r3, #3
10002242:	d901      	bls.n	10002248 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10002244:	2303      	movs	r3, #3
10002246:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10002248:	687b      	ldr	r3, [r7, #4]
1000224a:	3301      	adds	r3, #1
1000224c:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
1000224e:	f000 f82b 	bl	100022a8 <HAL_RCC_GetAXISSFreq>
10002252:	4602      	mov	r2, r0
10002254:	687b      	ldr	r3, [r7, #4]
10002256:	fbb2 f3f3 	udiv	r3, r2, r3
}
1000225a:	4618      	mov	r0, r3
1000225c:	3708      	adds	r7, #8
1000225e:	46bd      	mov	sp, r7
10002260:	bd80      	pop	{r7, pc}

10002262 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10002262:	b580      	push	{r7, lr}
10002264:	b082      	sub	sp, #8
10002266:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002268:	2300      	movs	r3, #0
1000226a:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000226c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002270:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002274:	f003 030f 	and.w	r3, r3, #15
10002278:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
1000227a:	687b      	ldr	r3, [r7, #4]
1000227c:	2b09      	cmp	r3, #9
1000227e:	d901      	bls.n	10002284 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10002280:	2309      	movs	r3, #9
10002282:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002284:	f000 f84e 	bl	10002324 <HAL_RCC_GetMCUSSFreq>
10002288:	4602      	mov	r2, r0
1000228a:	687b      	ldr	r3, [r7, #4]
1000228c:	fa22 f303 	lsr.w	r3, r2, r3
}
10002290:	4618      	mov	r0, r3
10002292:	3708      	adds	r7, #8
10002294:	46bd      	mov	sp, r7
10002296:	bd80      	pop	{r7, pc}

10002298 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002298:	b580      	push	{r7, lr}
1000229a:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000229c:	f7ff ffe1 	bl	10002262 <HAL_RCC_GetMCUFreq>
100022a0:	4603      	mov	r3, r0
#endif
}
100022a2:	4618      	mov	r0, r3
100022a4:	bd80      	pop	{r7, pc}
	...

100022a8 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
100022a8:	b580      	push	{r7, lr}
100022aa:	b084      	sub	sp, #16
100022ac:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
100022ae:	2300      	movs	r3, #0
100022b0:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
100022b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100022b8:	f003 0307 	and.w	r3, r3, #7
100022bc:	2b02      	cmp	r3, #2
100022be:	d006      	beq.n	100022ce <HAL_RCC_GetAXISSFreq+0x26>
100022c0:	2b02      	cmp	r3, #2
100022c2:	d823      	bhi.n	1000230c <HAL_RCC_GetAXISSFreq+0x64>
100022c4:	2b00      	cmp	r3, #0
100022c6:	d009      	beq.n	100022dc <HAL_RCC_GetAXISSFreq+0x34>
100022c8:	2b01      	cmp	r3, #1
100022ca:	d01c      	beq.n	10002306 <HAL_RCC_GetAXISSFreq+0x5e>
100022cc:	e01e      	b.n	1000230c <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100022ce:	463b      	mov	r3, r7
100022d0:	4618      	mov	r0, r3
100022d2:	f7ff fc6b 	bl	10001bac <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
100022d6:	683b      	ldr	r3, [r7, #0]
100022d8:	60fb      	str	r3, [r7, #12]
      break;
100022da:	e01a      	b.n	10002312 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100022dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100022e4:	f003 0304 	and.w	r3, r3, #4
100022e8:	2b04      	cmp	r3, #4
100022ea:	d109      	bne.n	10002300 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100022ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022f0:	699b      	ldr	r3, [r3, #24]
100022f2:	f003 0303 	and.w	r3, r3, #3
100022f6:	4a09      	ldr	r2, [pc, #36]	@ (1000231c <HAL_RCC_GetAXISSFreq+0x74>)
100022f8:	fa22 f303 	lsr.w	r3, r2, r3
100022fc:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
100022fe:	e008      	b.n	10002312 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
10002300:	4b06      	ldr	r3, [pc, #24]	@ (1000231c <HAL_RCC_GetAXISSFreq+0x74>)
10002302:	60fb      	str	r3, [r7, #12]
      break;
10002304:	e005      	b.n	10002312 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10002306:	4b06      	ldr	r3, [pc, #24]	@ (10002320 <HAL_RCC_GetAXISSFreq+0x78>)
10002308:	60fb      	str	r3, [r7, #12]
      break;
1000230a:	e002      	b.n	10002312 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
1000230c:	2300      	movs	r3, #0
1000230e:	60fb      	str	r3, [r7, #12]
      break;
10002310:	bf00      	nop
  }

  return axissfreq;
10002312:	68fb      	ldr	r3, [r7, #12]
}
10002314:	4618      	mov	r0, r3
10002316:	3710      	adds	r7, #16
10002318:	46bd      	mov	sp, r7
1000231a:	bd80      	pop	{r7, pc}
1000231c:	03d09000 	.word	0x03d09000
10002320:	016e3600 	.word	0x016e3600

10002324 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
1000232a:	2300      	movs	r3, #0
1000232c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000232e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002334:	f003 0303 	and.w	r3, r3, #3
10002338:	2b03      	cmp	r3, #3
1000233a:	d822      	bhi.n	10002382 <HAL_RCC_GetMCUSSFreq+0x5e>
1000233c:	a201      	add	r2, pc, #4	@ (adr r2, 10002344 <HAL_RCC_GetMCUSSFreq+0x20>)
1000233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002342:	bf00      	nop
10002344:	10002363 	.word	0x10002363
10002348:	10002377 	.word	0x10002377
1000234c:	1000237d 	.word	0x1000237d
10002350:	10002355 	.word	0x10002355
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10002354:	463b      	mov	r3, r7
10002356:	4618      	mov	r0, r3
10002358:	f7ff fd14 	bl	10001d84 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000235c:	683b      	ldr	r3, [r7, #0]
1000235e:	60fb      	str	r3, [r7, #12]
      break;
10002360:	e00f      	b.n	10002382 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002366:	699b      	ldr	r3, [r3, #24]
10002368:	f003 0303 	and.w	r3, r3, #3
1000236c:	4a07      	ldr	r2, [pc, #28]	@ (1000238c <HAL_RCC_GetMCUSSFreq+0x68>)
1000236e:	fa22 f303 	lsr.w	r3, r2, r3
10002372:	60fb      	str	r3, [r7, #12]

      break;
10002374:	e005      	b.n	10002382 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10002376:	4b06      	ldr	r3, [pc, #24]	@ (10002390 <HAL_RCC_GetMCUSSFreq+0x6c>)
10002378:	60fb      	str	r3, [r7, #12]
      break;
1000237a:	e002      	b.n	10002382 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000237c:	4b05      	ldr	r3, [pc, #20]	@ (10002394 <HAL_RCC_GetMCUSSFreq+0x70>)
1000237e:	60fb      	str	r3, [r7, #12]
      break;
10002380:	bf00      	nop
  }

  return mcussfreq;
10002382:	68fb      	ldr	r3, [r7, #12]
}
10002384:	4618      	mov	r0, r3
10002386:	3710      	adds	r7, #16
10002388:	46bd      	mov	sp, r7
1000238a:	bd80      	pop	{r7, pc}
1000238c:	03d09000 	.word	0x03d09000
10002390:	016e3600 	.word	0x016e3600
10002394:	003d0900 	.word	0x003d0900

10002398 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002398:	b580      	push	{r7, lr}
1000239a:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
1000239c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023a0:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
100023a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
100023a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
100023ac:	d107      	bne.n	100023be <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100023ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
100023b6:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100023ba:	f000 f802 	bl	100023c2 <HAL_RCC_WAKEUP_Callback>
  }
}
100023be:	bf00      	nop
100023c0:	bd80      	pop	{r7, pc}

100023c2 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100023c2:	b480      	push	{r7}
100023c4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100023c6:	bf00      	nop
100023c8:	46bd      	mov	sp, r7
100023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100023ce:	4770      	bx	lr

100023d0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100023d0:	b580      	push	{r7, lr}
100023d2:	b084      	sub	sp, #16
100023d4:	af00      	add	r7, sp, #0
100023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100023d8:	687b      	ldr	r3, [r7, #4]
100023da:	681b      	ldr	r3, [r3, #0]
100023dc:	2b00      	cmp	r3, #0
100023de:	f000 8171 	beq.w	100026c4 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100023e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100023e8:	f003 0307 	and.w	r3, r3, #7
100023ec:	2b02      	cmp	r3, #2
100023ee:	d108      	bne.n	10002402 <RCCEx_PLL2_Config+0x32>
100023f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100023f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100023fe:	f000 815f 	beq.w	100026c0 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10002402:	687b      	ldr	r3, [r7, #4]
10002404:	681b      	ldr	r3, [r3, #0]
10002406:	2b02      	cmp	r3, #2
10002408:	f040 8130 	bne.w	1000266c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000240c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002412:	f003 0303 	and.w	r3, r3, #3
10002416:	2b00      	cmp	r3, #0
10002418:	d008      	beq.n	1000242c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
1000241a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002420:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002424:	2b01      	cmp	r3, #1
10002426:	d001      	beq.n	1000242c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10002428:	2301      	movs	r3, #1
1000242a:	e14c      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000242c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002434:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000243c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10002440:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002448:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000244c:	f023 0301 	bic.w	r3, r3, #1
10002450:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002454:	f7fe f87c 	bl	10000550 <HAL_GetTick>
10002458:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000245a:	e008      	b.n	1000246e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000245c:	f7fe f878 	bl	10000550 <HAL_GetTick>
10002460:	4602      	mov	r2, r0
10002462:	68fb      	ldr	r3, [r7, #12]
10002464:	1ad3      	subs	r3, r2, r3
10002466:	2b64      	cmp	r3, #100	@ 0x64
10002468:	d901      	bls.n	1000246e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000246a:	2303      	movs	r3, #3
1000246c:	e12b      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000246e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002476:	f003 0302 	and.w	r3, r3, #2
1000247a:	2b02      	cmp	r3, #2
1000247c:	d0ee      	beq.n	1000245c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000247e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002482:	6a1b      	ldr	r3, [r3, #32]
10002484:	f003 0303 	and.w	r3, r3, #3
10002488:	2b02      	cmp	r3, #2
1000248a:	d107      	bne.n	1000249c <RCCEx_PLL2_Config+0xcc>
1000248c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002490:	6a1b      	ldr	r3, [r3, #32]
10002492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000249a:	d00e      	beq.n	100024ba <RCCEx_PLL2_Config+0xea>
1000249c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024a0:	6a1b      	ldr	r3, [r3, #32]
100024a2:	f003 0303 	and.w	r3, r3, #3
100024a6:	2b03      	cmp	r3, #3
100024a8:	d112      	bne.n	100024d0 <RCCEx_PLL2_Config+0x100>
100024aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024ae:	6a1b      	ldr	r3, [r3, #32]
100024b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100024b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100024b8:	d10a      	bne.n	100024d0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100024ba:	687b      	ldr	r3, [r7, #4]
100024bc:	685a      	ldr	r2, [r3, #4]
100024be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100024c4:	f003 0303 	and.w	r3, r3, #3
100024c8:	429a      	cmp	r2, r3
100024ca:	d00c      	beq.n	100024e6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100024cc:	2301      	movs	r3, #1
100024ce:	e0fa      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100024d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100024d6:	f023 0203 	bic.w	r2, r3, #3
100024da:	687b      	ldr	r3, [r7, #4]
100024dc:	685b      	ldr	r3, [r3, #4]
100024de:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024e2:	4313      	orrs	r3, r2
100024e4:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100024e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
100024ee:	4b78      	ldr	r3, [pc, #480]	@ (100026d0 <RCCEx_PLL2_Config+0x300>)
100024f0:	4013      	ands	r3, r2
100024f2:	687a      	ldr	r2, [r7, #4]
100024f4:	68d2      	ldr	r2, [r2, #12]
100024f6:	1e51      	subs	r1, r2, #1
100024f8:	687a      	ldr	r2, [r7, #4]
100024fa:	6892      	ldr	r2, [r2, #8]
100024fc:	3a01      	subs	r2, #1
100024fe:	0412      	lsls	r2, r2, #16
10002500:	430a      	orrs	r2, r1
10002502:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002506:	4313      	orrs	r3, r2
10002508:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
1000250c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002510:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10002514:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002518:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000251c:	687a      	ldr	r2, [r7, #4]
1000251e:	6912      	ldr	r2, [r2, #16]
10002520:	1e51      	subs	r1, r2, #1
10002522:	687a      	ldr	r2, [r7, #4]
10002524:	6952      	ldr	r2, [r2, #20]
10002526:	3a01      	subs	r2, #1
10002528:	0212      	lsls	r2, r2, #8
1000252a:	4311      	orrs	r1, r2
1000252c:	687a      	ldr	r2, [r7, #4]
1000252e:	6992      	ldr	r2, [r2, #24]
10002530:	3a01      	subs	r2, #1
10002532:	0412      	lsls	r2, r2, #16
10002534:	430a      	orrs	r2, r1
10002536:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000253a:	4313      	orrs	r3, r2
1000253c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10002540:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002548:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002550:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002554:	687b      	ldr	r3, [r7, #4]
10002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002558:	2b02      	cmp	r3, #2
1000255a:	d003      	beq.n	10002564 <RCCEx_PLL2_Config+0x194>
1000255c:	687b      	ldr	r3, [r7, #4]
1000255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002560:	2b00      	cmp	r3, #0
10002562:	d10c      	bne.n	1000257e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002564:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000256c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002570:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002574:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002578:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
1000257c:	e00f      	b.n	1000259e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000257e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000258a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000258e:	687a      	ldr	r2, [r7, #4]
10002590:	6a12      	ldr	r2, [r2, #32]
10002592:	00d2      	lsls	r2, r2, #3
10002594:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002598:	4313      	orrs	r3, r2
1000259a:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000259e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100025a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100025ae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100025b2:	687b      	ldr	r3, [r7, #4]
100025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100025b6:	2b02      	cmp	r3, #2
100025b8:	d124      	bne.n	10002604 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100025ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
100025c2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100025c6:	687b      	ldr	r3, [r7, #4]
100025c8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100025ca:	687b      	ldr	r3, [r7, #4]
100025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100025ce:	4319      	orrs	r1, r3
100025d0:	687b      	ldr	r3, [r7, #4]
100025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100025d4:	4319      	orrs	r1, r3
100025d6:	687b      	ldr	r3, [r7, #4]
100025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100025da:	4319      	orrs	r1, r3
100025dc:	687b      	ldr	r3, [r7, #4]
100025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100025e0:	041b      	lsls	r3, r3, #16
100025e2:	430b      	orrs	r3, r1
100025e4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100025e8:	4313      	orrs	r3, r2
100025ea:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100025ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025fa:	f043 0304 	orr.w	r3, r3, #4
100025fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10002602:	e009      	b.n	10002618 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000260c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002610:	f023 0304 	bic.w	r3, r3, #4
10002614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002618:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002620:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002624:	f043 0301 	orr.w	r3, r3, #1
10002628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000262c:	f7fd ff90 	bl	10000550 <HAL_GetTick>
10002630:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002632:	e008      	b.n	10002646 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002634:	f7fd ff8c 	bl	10000550 <HAL_GetTick>
10002638:	4602      	mov	r2, r0
1000263a:	68fb      	ldr	r3, [r7, #12]
1000263c:	1ad3      	subs	r3, r2, r3
1000263e:	2b64      	cmp	r3, #100	@ 0x64
10002640:	d901      	bls.n	10002646 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10002642:	2303      	movs	r3, #3
10002644:	e03f      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002646:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000264e:	f003 0302 	and.w	r3, r3, #2
10002652:	2b02      	cmp	r3, #2
10002654:	d1ee      	bne.n	10002634 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002656:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000265e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002662:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000266a:	e02b      	b.n	100026c4 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000266c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002674:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000267c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002680:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002688:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000268c:	f023 0301 	bic.w	r3, r3, #1
10002690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002694:	f7fd ff5c 	bl	10000550 <HAL_GetTick>
10002698:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000269a:	e008      	b.n	100026ae <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000269c:	f7fd ff58 	bl	10000550 <HAL_GetTick>
100026a0:	4602      	mov	r2, r0
100026a2:	68fb      	ldr	r3, [r7, #12]
100026a4:	1ad3      	subs	r3, r2, r3
100026a6:	2b64      	cmp	r3, #100	@ 0x64
100026a8:	d901      	bls.n	100026ae <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100026aa:	2303      	movs	r3, #3
100026ac:	e00b      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100026ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100026b6:	f003 0302 	and.w	r3, r3, #2
100026ba:	2b02      	cmp	r3, #2
100026bc:	d0ee      	beq.n	1000269c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100026be:	e001      	b.n	100026c4 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100026c0:	2301      	movs	r3, #1
100026c2:	e000      	b.n	100026c6 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100026c4:	2300      	movs	r3, #0

}
100026c6:	4618      	mov	r0, r3
100026c8:	3710      	adds	r7, #16
100026ca:	46bd      	mov	sp, r7
100026cc:	bd80      	pop	{r7, pc}
100026ce:	bf00      	nop
100026d0:	ffc0fe00 	.word	0xffc0fe00

100026d4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100026d4:	b580      	push	{r7, lr}
100026d6:	b084      	sub	sp, #16
100026d8:	af00      	add	r7, sp, #0
100026da:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100026dc:	687b      	ldr	r3, [r7, #4]
100026de:	681b      	ldr	r3, [r3, #0]
100026e0:	2b00      	cmp	r3, #0
100026e2:	f000 815a 	beq.w	1000299a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100026e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026ec:	f003 0303 	and.w	r3, r3, #3
100026f0:	2b03      	cmp	r3, #3
100026f2:	d108      	bne.n	10002706 <RCCEx_PLL3_Config+0x32>
100026f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002702:	f000 8148 	beq.w	10002996 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002706:	687b      	ldr	r3, [r7, #4]
10002708:	681b      	ldr	r3, [r3, #0]
1000270a:	2b02      	cmp	r3, #2
1000270c:	f040 8119 	bne.w	10002942 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002710:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002714:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002718:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000271c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002720:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002728:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000272c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002730:	f023 0301 	bic.w	r3, r3, #1
10002734:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002738:	f7fd ff0a 	bl	10000550 <HAL_GetTick>
1000273c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000273e:	e008      	b.n	10002752 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002740:	f7fd ff06 	bl	10000550 <HAL_GetTick>
10002744:	4602      	mov	r2, r0
10002746:	68fb      	ldr	r3, [r7, #12]
10002748:	1ad3      	subs	r3, r2, r3
1000274a:	2b64      	cmp	r3, #100	@ 0x64
1000274c:	d901      	bls.n	10002752 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000274e:	2303      	movs	r3, #3
10002750:	e124      	b.n	1000299c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002752:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002756:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000275a:	f003 0302 	and.w	r3, r3, #2
1000275e:	2b02      	cmp	r3, #2
10002760:	d0ee      	beq.n	10002740 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002762:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002766:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000276a:	f023 0203 	bic.w	r2, r3, #3
1000276e:	687b      	ldr	r3, [r7, #4]
10002770:	685b      	ldr	r3, [r3, #4]
10002772:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002776:	4313      	orrs	r3, r2
10002778:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000277c:	e008      	b.n	10002790 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000277e:	f7fd fee7 	bl	10000550 <HAL_GetTick>
10002782:	4602      	mov	r2, r0
10002784:	68fb      	ldr	r3, [r7, #12]
10002786:	1ad3      	subs	r3, r2, r3
10002788:	2b64      	cmp	r3, #100	@ 0x64
1000278a:	d901      	bls.n	10002790 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000278c:	2303      	movs	r3, #3
1000278e:	e105      	b.n	1000299c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002790:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002794:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000279c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100027a0:	d1ed      	bne.n	1000277e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100027a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027a6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100027aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100027ae:	687b      	ldr	r3, [r7, #4]
100027b0:	69db      	ldr	r3, [r3, #28]
100027b2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100027b6:	4313      	orrs	r3, r2
100027b8:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100027bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027c0:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
100027c4:	4b77      	ldr	r3, [pc, #476]	@ (100029a4 <RCCEx_PLL3_Config+0x2d0>)
100027c6:	4013      	ands	r3, r2
100027c8:	687a      	ldr	r2, [r7, #4]
100027ca:	68d2      	ldr	r2, [r2, #12]
100027cc:	1e51      	subs	r1, r2, #1
100027ce:	687a      	ldr	r2, [r7, #4]
100027d0:	6892      	ldr	r2, [r2, #8]
100027d2:	3a01      	subs	r2, #1
100027d4:	0412      	lsls	r2, r2, #16
100027d6:	430a      	orrs	r2, r1
100027d8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100027dc:	4313      	orrs	r3, r2
100027de:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
100027e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027e6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100027ea:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100027ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100027f2:	687a      	ldr	r2, [r7, #4]
100027f4:	6912      	ldr	r2, [r2, #16]
100027f6:	1e51      	subs	r1, r2, #1
100027f8:	687a      	ldr	r2, [r7, #4]
100027fa:	6952      	ldr	r2, [r2, #20]
100027fc:	3a01      	subs	r2, #1
100027fe:	0212      	lsls	r2, r2, #8
10002800:	4311      	orrs	r1, r2
10002802:	687a      	ldr	r2, [r7, #4]
10002804:	6992      	ldr	r2, [r2, #24]
10002806:	3a01      	subs	r2, #1
10002808:	0412      	lsls	r2, r2, #16
1000280a:	430a      	orrs	r2, r1
1000280c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002810:	4313      	orrs	r3, r2
10002812:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000281a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000281e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002826:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
1000282a:	687b      	ldr	r3, [r7, #4]
1000282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000282e:	2b02      	cmp	r3, #2
10002830:	d003      	beq.n	1000283a <RCCEx_PLL3_Config+0x166>
10002832:	687b      	ldr	r3, [r7, #4]
10002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002836:	2b00      	cmp	r3, #0
10002838:	d10c      	bne.n	10002854 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000283a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000283e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000284a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000284e:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10002852:	e00f      	b.n	10002874 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002854:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002858:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000285c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002860:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002864:	687a      	ldr	r2, [r7, #4]
10002866:	6a12      	ldr	r2, [r2, #32]
10002868:	00d2      	lsls	r2, r2, #3
1000286a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000286e:	4313      	orrs	r3, r2
10002870:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002878:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000287c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002884:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002888:	687b      	ldr	r3, [r7, #4]
1000288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000288c:	2b02      	cmp	r3, #2
1000288e:	d124      	bne.n	100028da <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002890:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002894:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10002898:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100028a0:	687b      	ldr	r3, [r7, #4]
100028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100028a4:	4319      	orrs	r1, r3
100028a6:	687b      	ldr	r3, [r7, #4]
100028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100028aa:	4319      	orrs	r1, r3
100028ac:	687b      	ldr	r3, [r7, #4]
100028ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100028b0:	4319      	orrs	r1, r3
100028b2:	687b      	ldr	r3, [r7, #4]
100028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100028b6:	041b      	lsls	r3, r3, #16
100028b8:	430b      	orrs	r3, r1
100028ba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100028be:	4313      	orrs	r3, r2
100028c0:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100028c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028d0:	f043 0304 	orr.w	r3, r3, #4
100028d4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
100028d8:	e009      	b.n	100028ee <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100028da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028de:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028e6:	f023 0304 	bic.w	r3, r3, #4
100028ea:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100028ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028f2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028fa:	f043 0301 	orr.w	r3, r3, #1
100028fe:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002902:	f7fd fe25 	bl	10000550 <HAL_GetTick>
10002906:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002908:	e008      	b.n	1000291c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000290a:	f7fd fe21 	bl	10000550 <HAL_GetTick>
1000290e:	4602      	mov	r2, r0
10002910:	68fb      	ldr	r3, [r7, #12]
10002912:	1ad3      	subs	r3, r2, r3
10002914:	2b64      	cmp	r3, #100	@ 0x64
10002916:	d901      	bls.n	1000291c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002918:	2303      	movs	r3, #3
1000291a:	e03f      	b.n	1000299c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000291c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002920:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002924:	f003 0302 	and.w	r3, r3, #2
10002928:	2b02      	cmp	r3, #2
1000292a:	d1ee      	bne.n	1000290a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000292c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002930:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002934:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002938:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000293c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002940:	e02b      	b.n	1000299a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002942:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002946:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000294a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000294e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002952:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002956:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000295a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000295e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002962:	f023 0301 	bic.w	r3, r3, #1
10002966:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000296a:	f7fd fdf1 	bl	10000550 <HAL_GetTick>
1000296e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002970:	e008      	b.n	10002984 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002972:	f7fd fded 	bl	10000550 <HAL_GetTick>
10002976:	4602      	mov	r2, r0
10002978:	68fb      	ldr	r3, [r7, #12]
1000297a:	1ad3      	subs	r3, r2, r3
1000297c:	2b64      	cmp	r3, #100	@ 0x64
1000297e:	d901      	bls.n	10002984 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002980:	2303      	movs	r3, #3
10002982:	e00b      	b.n	1000299c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002984:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002988:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000298c:	f003 0302 	and.w	r3, r3, #2
10002990:	2b02      	cmp	r3, #2
10002992:	d0ee      	beq.n	10002972 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002994:	e001      	b.n	1000299a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002996:	2301      	movs	r3, #1
10002998:	e000      	b.n	1000299c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000299a:	2300      	movs	r3, #0
}
1000299c:	4618      	mov	r0, r3
1000299e:	3710      	adds	r7, #16
100029a0:	46bd      	mov	sp, r7
100029a2:	bd80      	pop	{r7, pc}
100029a4:	ffc0fe00 	.word	0xffc0fe00

100029a8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100029a8:	b580      	push	{r7, lr}
100029aa:	b084      	sub	sp, #16
100029ac:	af00      	add	r7, sp, #0
100029ae:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	681b      	ldr	r3, [r3, #0]
100029b4:	2b00      	cmp	r3, #0
100029b6:	f000 8147 	beq.w	10002c48 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100029ba:	687b      	ldr	r3, [r7, #4]
100029bc:	681b      	ldr	r3, [r3, #0]
100029be:	2b02      	cmp	r3, #2
100029c0:	f040 8119 	bne.w	10002bf6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100029c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100029cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100029d4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100029d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100029e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029e4:	f023 0301 	bic.w	r3, r3, #1
100029e8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100029ec:	f7fd fdb0 	bl	10000550 <HAL_GetTick>
100029f0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100029f2:	e008      	b.n	10002a06 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029f4:	f7fd fdac 	bl	10000550 <HAL_GetTick>
100029f8:	4602      	mov	r2, r0
100029fa:	68fb      	ldr	r3, [r7, #12]
100029fc:	1ad3      	subs	r3, r2, r3
100029fe:	2b64      	cmp	r3, #100	@ 0x64
10002a00:	d901      	bls.n	10002a06 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002a02:	2303      	movs	r3, #3
10002a04:	e121      	b.n	10002c4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002a06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a0a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002a0e:	f003 0302 	and.w	r3, r3, #2
10002a12:	2b02      	cmp	r3, #2
10002a14:	d0ee      	beq.n	100029f4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002a16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a1a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002a1e:	f023 0203 	bic.w	r2, r3, #3
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	685b      	ldr	r3, [r3, #4]
10002a26:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a2a:	4313      	orrs	r3, r2
10002a2c:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002a30:	e008      	b.n	10002a44 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a32:	f7fd fd8d 	bl	10000550 <HAL_GetTick>
10002a36:	4602      	mov	r2, r0
10002a38:	68fb      	ldr	r3, [r7, #12]
10002a3a:	1ad3      	subs	r3, r2, r3
10002a3c:	2b64      	cmp	r3, #100	@ 0x64
10002a3e:	d901      	bls.n	10002a44 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002a40:	2303      	movs	r3, #3
10002a42:	e102      	b.n	10002c4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a48:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a54:	d1ed      	bne.n	10002a32 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002a56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a5a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002a5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10002a62:	687b      	ldr	r3, [r7, #4]
10002a64:	69db      	ldr	r3, [r3, #28]
10002a66:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a6a:	4313      	orrs	r3, r2
10002a6c:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002a70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a74:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10002a78:	4b76      	ldr	r3, [pc, #472]	@ (10002c54 <RCCEx_PLL4_Config+0x2ac>)
10002a7a:	4013      	ands	r3, r2
10002a7c:	687a      	ldr	r2, [r7, #4]
10002a7e:	68d2      	ldr	r2, [r2, #12]
10002a80:	1e51      	subs	r1, r2, #1
10002a82:	687a      	ldr	r2, [r7, #4]
10002a84:	6892      	ldr	r2, [r2, #8]
10002a86:	3a01      	subs	r2, #1
10002a88:	0412      	lsls	r2, r2, #16
10002a8a:	430a      	orrs	r2, r1
10002a8c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a90:	4313      	orrs	r3, r2
10002a92:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10002a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a9a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002a9e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002aa2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002aa6:	687a      	ldr	r2, [r7, #4]
10002aa8:	6912      	ldr	r2, [r2, #16]
10002aaa:	1e51      	subs	r1, r2, #1
10002aac:	687a      	ldr	r2, [r7, #4]
10002aae:	6952      	ldr	r2, [r2, #20]
10002ab0:	3a01      	subs	r2, #1
10002ab2:	0212      	lsls	r2, r2, #8
10002ab4:	4311      	orrs	r1, r2
10002ab6:	687a      	ldr	r2, [r7, #4]
10002ab8:	6992      	ldr	r2, [r2, #24]
10002aba:	3a01      	subs	r2, #1
10002abc:	0412      	lsls	r2, r2, #16
10002abe:	430a      	orrs	r2, r1
10002ac0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002ac4:	4313      	orrs	r3, r2
10002ac6:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002aca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ace:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002ada:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ae2:	2b02      	cmp	r3, #2
10002ae4:	d003      	beq.n	10002aee <RCCEx_PLL4_Config+0x146>
10002ae6:	687b      	ldr	r3, [r7, #4]
10002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002aea:	2b00      	cmp	r3, #0
10002aec:	d10c      	bne.n	10002b08 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002aee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002af2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002af6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002afe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002b02:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10002b06:	e00f      	b.n	10002b28 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002b08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b0c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002b10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002b14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002b18:	687a      	ldr	r2, [r7, #4]
10002b1a:	6a12      	ldr	r2, [r2, #32]
10002b1c:	00d2      	lsls	r2, r2, #3
10002b1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b22:	4313      	orrs	r3, r2
10002b24:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002b28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b2c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002b30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002b38:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002b3c:	687b      	ldr	r3, [r7, #4]
10002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002b40:	2b02      	cmp	r3, #2
10002b42:	d124      	bne.n	10002b8e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002b44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b48:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10002b4c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002b50:	687b      	ldr	r3, [r7, #4]
10002b52:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002b54:	687b      	ldr	r3, [r7, #4]
10002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002b58:	4319      	orrs	r1, r3
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002b5e:	4319      	orrs	r1, r3
10002b60:	687b      	ldr	r3, [r7, #4]
10002b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002b64:	4319      	orrs	r1, r3
10002b66:	687b      	ldr	r3, [r7, #4]
10002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002b6a:	041b      	lsls	r3, r3, #16
10002b6c:	430b      	orrs	r3, r1
10002b6e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b72:	4313      	orrs	r3, r2
10002b74:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002b78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b7c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b84:	f043 0304 	orr.w	r3, r3, #4
10002b88:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002b8c:	e009      	b.n	10002ba2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002b8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b92:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b9a:	f023 0304 	bic.w	r3, r3, #4
10002b9e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002ba2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ba6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002baa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bae:	f043 0301 	orr.w	r3, r3, #1
10002bb2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002bb6:	f7fd fccb 	bl	10000550 <HAL_GetTick>
10002bba:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002bbc:	e008      	b.n	10002bd0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002bbe:	f7fd fcc7 	bl	10000550 <HAL_GetTick>
10002bc2:	4602      	mov	r2, r0
10002bc4:	68fb      	ldr	r3, [r7, #12]
10002bc6:	1ad3      	subs	r3, r2, r3
10002bc8:	2b64      	cmp	r3, #100	@ 0x64
10002bca:	d901      	bls.n	10002bd0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002bcc:	2303      	movs	r3, #3
10002bce:	e03c      	b.n	10002c4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002bd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002bd8:	f003 0302 	and.w	r3, r3, #2
10002bdc:	2b02      	cmp	r3, #2
10002bde:	d1ee      	bne.n	10002bbe <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002be4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002be8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bec:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002bf0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002bf4:	e028      	b.n	10002c48 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bfa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002bfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002c06:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002c0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c0e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002c12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c16:	f023 0301 	bic.w	r3, r3, #1
10002c1a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002c1e:	f7fd fc97 	bl	10000550 <HAL_GetTick>
10002c22:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002c24:	e008      	b.n	10002c38 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002c26:	f7fd fc93 	bl	10000550 <HAL_GetTick>
10002c2a:	4602      	mov	r2, r0
10002c2c:	68fb      	ldr	r3, [r7, #12]
10002c2e:	1ad3      	subs	r3, r2, r3
10002c30:	2b64      	cmp	r3, #100	@ 0x64
10002c32:	d901      	bls.n	10002c38 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002c34:	2303      	movs	r3, #3
10002c36:	e008      	b.n	10002c4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002c38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c3c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002c40:	f003 0302 	and.w	r3, r3, #2
10002c44:	2b02      	cmp	r3, #2
10002c46:	d0ee      	beq.n	10002c26 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002c48:	2300      	movs	r3, #0
}
10002c4a:	4618      	mov	r0, r3
10002c4c:	3710      	adds	r7, #16
10002c4e:	46bd      	mov	sp, r7
10002c50:	bd80      	pop	{r7, pc}
10002c52:	bf00      	nop
10002c54:	ffc0fe00 	.word	0xffc0fe00

10002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10002c5c:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
10002c60:	af00      	add	r7, sp, #0
10002c62:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002c66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c6a:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002c6c:	2300      	movs	r3, #0
10002c6e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
10002c72:	2300      	movs	r3, #0
10002c74:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002c78:	2300      	movs	r3, #0
10002c7a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002c7e:	2300      	movs	r3, #0
10002c80:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002c84:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c8c:	681b      	ldr	r3, [r3, #0]
10002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
10002c92:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10002c96:	2500      	movs	r5, #0
10002c98:	ea54 0305 	orrs.w	r3, r4, r5
10002c9c:	d011      	beq.n	10002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002c9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ca2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10002ca6:	f023 0103 	bic.w	r1, r3, #3
10002caa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002cae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cb2:	681b      	ldr	r3, [r3, #0]
10002cb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10002cb8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002cbc:	430b      	orrs	r3, r1
10002cbe:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002cc2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cca:	681b      	ldr	r3, [r3, #0]
10002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
10002cd0:	f002 0810 	and.w	r8, r2, #16
10002cd4:	f04f 0900 	mov.w	r9, #0
10002cd8:	ea58 0309 	orrs.w	r3, r8, r9
10002cdc:	d038      	beq.n	10002d50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002cde:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ce6:	681b      	ldr	r3, [r3, #0]
10002ce8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002cec:	2b01      	cmp	r3, #1
10002cee:	d11d      	bne.n	10002d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002cf0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002cf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cf8:	681b      	ldr	r3, [r3, #0]
10002cfa:	3380      	adds	r3, #128	@ 0x80
10002cfc:	4618      	mov	r0, r3
10002cfe:	f7ff fe53 	bl	100029a8 <RCCEx_PLL4_Config>
10002d02:	4603      	mov	r3, r0
10002d04:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10002d08:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002d0c:	2b00      	cmp	r3, #0
10002d0e:	d003      	beq.n	10002d18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10002d10:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002d14:	f001 bd4c 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002d18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d1c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002d20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002d28:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002d2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d30:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10002d34:	f023 0107 	bic.w	r1, r3, #7
10002d38:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002d3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d40:	681b      	ldr	r3, [r3, #0]
10002d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002d46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d4a:	430b      	orrs	r3, r1
10002d4c:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002d50:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002d54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d58:	681b      	ldr	r3, [r3, #0]
10002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
10002d5e:	f002 0a20 	and.w	sl, r2, #32
10002d62:	f04f 0b00 	mov.w	fp, #0
10002d66:	ea5a 030b 	orrs.w	r3, sl, fp
10002d6a:	d038      	beq.n	10002dde <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002d6c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002d70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d74:	681b      	ldr	r3, [r3, #0]
10002d76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002d7a:	2b01      	cmp	r3, #1
10002d7c:	d11d      	bne.n	10002dba <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002d7e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d86:	681b      	ldr	r3, [r3, #0]
10002d88:	3380      	adds	r3, #128	@ 0x80
10002d8a:	4618      	mov	r0, r3
10002d8c:	f7ff fe0c 	bl	100029a8 <RCCEx_PLL4_Config>
10002d90:	4603      	mov	r3, r0
10002d92:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10002d96:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002d9a:	2b00      	cmp	r3, #0
10002d9c:	d003      	beq.n	10002da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10002d9e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002da2:	f001 bd05 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002da6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002daa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002dae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002db6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002dba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dbe:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10002dc2:	f023 0107 	bic.w	r1, r3, #7
10002dc6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002dce:	681b      	ldr	r3, [r3, #0]
10002dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002dd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dd8:	430b      	orrs	r3, r1
10002dda:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002dde:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002de2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002de6:	681b      	ldr	r3, [r3, #0]
10002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
10002dec:	2100      	movs	r1, #0
10002dee:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
10002df2:	f003 0320 	and.w	r3, r3, #32
10002df6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10002dfa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10002dfe:	460b      	mov	r3, r1
10002e00:	4313      	orrs	r3, r2
10002e02:	d038      	beq.n	10002e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002e04:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e0c:	681b      	ldr	r3, [r3, #0]
10002e0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002e12:	2b01      	cmp	r3, #1
10002e14:	d11d      	bne.n	10002e52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002e16:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002e1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e1e:	681b      	ldr	r3, [r3, #0]
10002e20:	3344      	adds	r3, #68	@ 0x44
10002e22:	4618      	mov	r0, r3
10002e24:	f7ff fc56 	bl	100026d4 <RCCEx_PLL3_Config>
10002e28:	4603      	mov	r3, r0
10002e2a:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10002e2e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002e32:	2b00      	cmp	r3, #0
10002e34:	d003      	beq.n	10002e3e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10002e36:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002e3a:	f001 bcb9 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002e3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002e46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e4a:	f043 0320 	orr.w	r3, r3, #32
10002e4e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002e52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002e5a:	f023 0107 	bic.w	r1, r3, #7
10002e5e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002e62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e66:	681b      	ldr	r3, [r3, #0]
10002e68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002e6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e70:	430b      	orrs	r3, r1
10002e72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002e76:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002e7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e7e:	681b      	ldr	r3, [r3, #0]
10002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
10002e84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10002e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10002e8c:	2300      	movs	r3, #0
10002e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
10002e92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
10002e96:	460b      	mov	r3, r1
10002e98:	4313      	orrs	r3, r2
10002e9a:	d07e      	beq.n	10002f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10002e9c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002ea0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ea4:	681b      	ldr	r3, [r3, #0]
10002ea6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002eaa:	2b04      	cmp	r3, #4
10002eac:	d044      	beq.n	10002f38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10002eae:	2b04      	cmp	r3, #4
10002eb0:	d861      	bhi.n	10002f76 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10002eb2:	2b00      	cmp	r3, #0
10002eb4:	d002      	beq.n	10002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>
10002eb6:	2b01      	cmp	r3, #1
10002eb8:	d01f      	beq.n	10002efa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10002eba:	e05c      	b.n	10002f76 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002ebc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ec4:	681b      	ldr	r3, [r3, #0]
10002ec6:	3380      	adds	r3, #128	@ 0x80
10002ec8:	4618      	mov	r0, r3
10002eca:	f7ff fd6d 	bl	100029a8 <RCCEx_PLL4_Config>
10002ece:	4603      	mov	r3, r0
10002ed0:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10002ed4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002ed8:	2b00      	cmp	r3, #0
10002eda:	d003      	beq.n	10002ee4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10002edc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002ee0:	f001 bc66 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002ee4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ee8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002eec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ef0:	f043 0320 	orr.w	r3, r3, #32
10002ef4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10002ef8:	e03d      	b.n	10002f76 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002efa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002efe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f02:	681b      	ldr	r3, [r3, #0]
10002f04:	3344      	adds	r3, #68	@ 0x44
10002f06:	4618      	mov	r0, r3
10002f08:	f7ff fbe4 	bl	100026d4 <RCCEx_PLL3_Config>
10002f0c:	4603      	mov	r3, r0
10002f0e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10002f12:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002f16:	2b00      	cmp	r3, #0
10002f18:	d003      	beq.n	10002f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10002f1a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002f1e:	f001 bc47 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002f22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f26:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002f2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f2e:	f043 0320 	orr.w	r3, r3, #32
10002f32:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002f36:	e01e      	b.n	10002f76 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f38:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002f3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f40:	681b      	ldr	r3, [r3, #0]
10002f42:	3344      	adds	r3, #68	@ 0x44
10002f44:	4618      	mov	r0, r3
10002f46:	f7ff fbc5 	bl	100026d4 <RCCEx_PLL3_Config>
10002f4a:	4603      	mov	r3, r0
10002f4c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10002f50:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002f54:	2b00      	cmp	r3, #0
10002f56:	d003      	beq.n	10002f60 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10002f58:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002f5c:	f001 bc28 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10002f60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f64:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002f68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002f70:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002f74:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10002f76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f7a:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10002f7e:	f023 0107 	bic.w	r1, r3, #7
10002f82:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002f86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f8a:	681b      	ldr	r3, [r3, #0]
10002f8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002f90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f94:	430b      	orrs	r3, r1
10002f96:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10002f9a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002fa2:	681b      	ldr	r3, [r3, #0]
10002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
10002fa8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10002fac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10002fb0:	2300      	movs	r3, #0
10002fb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
10002fb6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
10002fba:	460b      	mov	r3, r1
10002fbc:	4313      	orrs	r3, r2
10002fbe:	d07e      	beq.n	100030be <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10002fc0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002fc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002fc8:	681b      	ldr	r3, [r3, #0]
10002fca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10002fce:	2b05      	cmp	r3, #5
10002fd0:	d044      	beq.n	1000305c <HAL_RCCEx_PeriphCLKConfig+0x404>
10002fd2:	2b05      	cmp	r3, #5
10002fd4:	d861      	bhi.n	1000309a <HAL_RCCEx_PeriphCLKConfig+0x442>
10002fd6:	2b00      	cmp	r3, #0
10002fd8:	d002      	beq.n	10002fe0 <HAL_RCCEx_PeriphCLKConfig+0x388>
10002fda:	2b01      	cmp	r3, #1
10002fdc:	d01f      	beq.n	1000301e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10002fde:	e05c      	b.n	1000309a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002fe0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10002fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002fe8:	681b      	ldr	r3, [r3, #0]
10002fea:	3380      	adds	r3, #128	@ 0x80
10002fec:	4618      	mov	r0, r3
10002fee:	f7ff fcdb 	bl	100029a8 <RCCEx_PLL4_Config>
10002ff2:	4603      	mov	r3, r0
10002ff4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10002ff8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10002ffc:	2b00      	cmp	r3, #0
10002ffe:	d003      	beq.n	10003008 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10003000:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003004:	f001 bbd4 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003008:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000300c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003010:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003014:	f043 0320 	orr.w	r3, r3, #32
10003018:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000301c:	e03d      	b.n	1000309a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000301e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003026:	681b      	ldr	r3, [r3, #0]
10003028:	3344      	adds	r3, #68	@ 0x44
1000302a:	4618      	mov	r0, r3
1000302c:	f7ff fb52 	bl	100026d4 <RCCEx_PLL3_Config>
10003030:	4603      	mov	r3, r0
10003032:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003036:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000303a:	2b00      	cmp	r3, #0
1000303c:	d003      	beq.n	10003046 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
1000303e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003042:	f001 bbb5 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003046:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000304a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000304e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003052:	f043 0320 	orr.w	r3, r3, #32
10003056:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000305a:	e01e      	b.n	1000309a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000305c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003060:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003064:	681b      	ldr	r3, [r3, #0]
10003066:	3344      	adds	r3, #68	@ 0x44
10003068:	4618      	mov	r0, r3
1000306a:	f7ff fb33 	bl	100026d4 <RCCEx_PLL3_Config>
1000306e:	4603      	mov	r3, r0
10003070:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003074:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003078:	2b00      	cmp	r3, #0
1000307a:	d003      	beq.n	10003084 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
1000307c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003080:	f001 bb96 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003084:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003088:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000308c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003094:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003098:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000309a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000309e:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
100030a2:	f023 0107 	bic.w	r1, r3, #7
100030a6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100030aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030ae:	681b      	ldr	r3, [r3, #0]
100030b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100030b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030b8:	430b      	orrs	r3, r1
100030ba:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100030be:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100030c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030c6:	681b      	ldr	r3, [r3, #0]
100030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
100030cc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
100030d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
100030d4:	2300      	movs	r3, #0
100030d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
100030da:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
100030de:	460b      	mov	r3, r1
100030e0:	4313      	orrs	r3, r2
100030e2:	d07e      	beq.n	100031e2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100030e4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100030e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030ec:	681b      	ldr	r3, [r3, #0]
100030ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100030f2:	2b04      	cmp	r3, #4
100030f4:	d044      	beq.n	10003180 <HAL_RCCEx_PeriphCLKConfig+0x528>
100030f6:	2b04      	cmp	r3, #4
100030f8:	d861      	bhi.n	100031be <HAL_RCCEx_PeriphCLKConfig+0x566>
100030fa:	2b00      	cmp	r3, #0
100030fc:	d002      	beq.n	10003104 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100030fe:	2b01      	cmp	r3, #1
10003100:	d01f      	beq.n	10003142 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10003102:	e05c      	b.n	100031be <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003104:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003108:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000310c:	681b      	ldr	r3, [r3, #0]
1000310e:	3380      	adds	r3, #128	@ 0x80
10003110:	4618      	mov	r0, r3
10003112:	f7ff fc49 	bl	100029a8 <RCCEx_PLL4_Config>
10003116:	4603      	mov	r3, r0
10003118:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000311c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003120:	2b00      	cmp	r3, #0
10003122:	d003      	beq.n	1000312c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10003124:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003128:	f001 bb42 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000312c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003130:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003134:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003138:	f043 0320 	orr.w	r3, r3, #32
1000313c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003140:	e03d      	b.n	100031be <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003142:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003146:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000314a:	681b      	ldr	r3, [r3, #0]
1000314c:	3344      	adds	r3, #68	@ 0x44
1000314e:	4618      	mov	r0, r3
10003150:	f7ff fac0 	bl	100026d4 <RCCEx_PLL3_Config>
10003154:	4603      	mov	r3, r0
10003156:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000315a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000315e:	2b00      	cmp	r3, #0
10003160:	d003      	beq.n	1000316a <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10003162:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003166:	f001 bb23 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000316a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000316e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003172:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003176:	f043 0320 	orr.w	r3, r3, #32
1000317a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000317e:	e01e      	b.n	100031be <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003180:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003188:	681b      	ldr	r3, [r3, #0]
1000318a:	3344      	adds	r3, #68	@ 0x44
1000318c:	4618      	mov	r0, r3
1000318e:	f7ff faa1 	bl	100026d4 <RCCEx_PLL3_Config>
10003192:	4603      	mov	r3, r0
10003194:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003198:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000319c:	2b00      	cmp	r3, #0
1000319e:	d003      	beq.n	100031a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
100031a0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100031a4:	f001 bb04 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100031a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031ac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100031b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100031b8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100031bc:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100031be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031c2:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
100031c6:	f023 0107 	bic.w	r1, r3, #7
100031ca:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100031ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031d2:	681b      	ldr	r3, [r3, #0]
100031d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100031d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031dc:	430b      	orrs	r3, r1
100031de:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100031e2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100031e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031ea:	681b      	ldr	r3, [r3, #0]
100031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
100031f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
100031f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
100031f8:	2300      	movs	r3, #0
100031fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
100031fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
10003202:	460b      	mov	r3, r1
10003204:	4313      	orrs	r3, r2
10003206:	d07e      	beq.n	10003306 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10003208:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000320c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003210:	681b      	ldr	r3, [r3, #0]
10003212:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003216:	2b04      	cmp	r3, #4
10003218:	d044      	beq.n	100032a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
1000321a:	2b04      	cmp	r3, #4
1000321c:	d861      	bhi.n	100032e2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000321e:	2b00      	cmp	r3, #0
10003220:	d002      	beq.n	10003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10003222:	2b01      	cmp	r3, #1
10003224:	d01f      	beq.n	10003266 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10003226:	e05c      	b.n	100032e2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003228:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000322c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003230:	681b      	ldr	r3, [r3, #0]
10003232:	3380      	adds	r3, #128	@ 0x80
10003234:	4618      	mov	r0, r3
10003236:	f7ff fbb7 	bl	100029a8 <RCCEx_PLL4_Config>
1000323a:	4603      	mov	r3, r0
1000323c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003240:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003244:	2b00      	cmp	r3, #0
10003246:	d003      	beq.n	10003250 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10003248:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000324c:	f001 bab0 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003250:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003254:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003258:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000325c:	f043 0320 	orr.w	r3, r3, #32
10003260:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003264:	e03d      	b.n	100032e2 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003266:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000326a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000326e:	681b      	ldr	r3, [r3, #0]
10003270:	3344      	adds	r3, #68	@ 0x44
10003272:	4618      	mov	r0, r3
10003274:	f7ff fa2e 	bl	100026d4 <RCCEx_PLL3_Config>
10003278:	4603      	mov	r3, r0
1000327a:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000327e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003282:	2b00      	cmp	r3, #0
10003284:	d003      	beq.n	1000328e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10003286:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000328a:	f001 ba91 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000328e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003292:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003296:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000329a:	f043 0320 	orr.w	r3, r3, #32
1000329e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100032a2:	e01e      	b.n	100032e2 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100032a4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100032a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032ac:	681b      	ldr	r3, [r3, #0]
100032ae:	3344      	adds	r3, #68	@ 0x44
100032b0:	4618      	mov	r0, r3
100032b2:	f7ff fa0f 	bl	100026d4 <RCCEx_PLL3_Config>
100032b6:	4603      	mov	r3, r0
100032b8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100032bc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100032c0:	2b00      	cmp	r3, #0
100032c2:	d003      	beq.n	100032cc <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
100032c4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100032c8:	f001 ba72 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100032cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032d0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100032d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100032dc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100032e0:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100032e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032e6:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
100032ea:	f023 0107 	bic.w	r1, r3, #7
100032ee:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100032f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032f6:	681b      	ldr	r3, [r3, #0]
100032f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100032fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003300:	430b      	orrs	r3, r1
10003302:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10003306:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000330a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000330e:	681b      	ldr	r3, [r3, #0]
10003310:	e9d3 2300 	ldrd	r2, r3, [r3]
10003314:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10003318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
1000331c:	2300      	movs	r3, #0
1000331e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
10003322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10003326:	460b      	mov	r3, r1
10003328:	4313      	orrs	r3, r2
1000332a:	d07e      	beq.n	1000342a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
1000332c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003334:	681b      	ldr	r3, [r3, #0]
10003336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
1000333a:	2b04      	cmp	r3, #4
1000333c:	d044      	beq.n	100033c8 <HAL_RCCEx_PeriphCLKConfig+0x770>
1000333e:	2b04      	cmp	r3, #4
10003340:	d861      	bhi.n	10003406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10003342:	2b00      	cmp	r3, #0
10003344:	d002      	beq.n	1000334c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10003346:	2b01      	cmp	r3, #1
10003348:	d01f      	beq.n	1000338a <HAL_RCCEx_PeriphCLKConfig+0x732>
1000334a:	e05c      	b.n	10003406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000334c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003354:	681b      	ldr	r3, [r3, #0]
10003356:	3380      	adds	r3, #128	@ 0x80
10003358:	4618      	mov	r0, r3
1000335a:	f7ff fb25 	bl	100029a8 <RCCEx_PLL4_Config>
1000335e:	4603      	mov	r3, r0
10003360:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003364:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003368:	2b00      	cmp	r3, #0
1000336a:	d003      	beq.n	10003374 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
1000336c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003370:	f001 ba1e 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003374:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003378:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000337c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003380:	f043 0310 	orr.w	r3, r3, #16
10003384:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003388:	e03d      	b.n	10003406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000338a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000338e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003392:	681b      	ldr	r3, [r3, #0]
10003394:	3344      	adds	r3, #68	@ 0x44
10003396:	4618      	mov	r0, r3
10003398:	f7ff f99c 	bl	100026d4 <RCCEx_PLL3_Config>
1000339c:	4603      	mov	r3, r0
1000339e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100033a2:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100033a6:	2b00      	cmp	r3, #0
100033a8:	d003      	beq.n	100033b2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
100033aa:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100033ae:	f001 b9ff 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100033b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100033ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033be:	f043 0320 	orr.w	r3, r3, #32
100033c2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100033c6:	e01e      	b.n	10003406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100033c8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100033cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033d0:	681b      	ldr	r3, [r3, #0]
100033d2:	3344      	adds	r3, #68	@ 0x44
100033d4:	4618      	mov	r0, r3
100033d6:	f7ff f97d 	bl	100026d4 <RCCEx_PLL3_Config>
100033da:	4603      	mov	r3, r0
100033dc:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100033e0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100033e4:	2b00      	cmp	r3, #0
100033e6:	d003      	beq.n	100033f0 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100033e8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100033ec:	f001 b9e0 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100033f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033f4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100033f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003400:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003404:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000340a:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
1000340e:	f023 0107 	bic.w	r1, r3, #7
10003412:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003416:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000341a:	681b      	ldr	r3, [r3, #0]
1000341c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10003420:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003424:	430b      	orrs	r3, r1
10003426:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
1000342a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000342e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003432:	681b      	ldr	r3, [r3, #0]
10003434:	e9d3 2300 	ldrd	r2, r3, [r3]
10003438:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
1000343c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10003440:	2300      	movs	r3, #0
10003442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
10003446:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
1000344a:	460b      	mov	r3, r1
1000344c:	4313      	orrs	r3, r2
1000344e:	d07e      	beq.n	1000354e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10003450:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003454:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003458:	681b      	ldr	r3, [r3, #0]
1000345a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
1000345e:	2b04      	cmp	r3, #4
10003460:	d044      	beq.n	100034ec <HAL_RCCEx_PeriphCLKConfig+0x894>
10003462:	2b04      	cmp	r3, #4
10003464:	d861      	bhi.n	1000352a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10003466:	2b00      	cmp	r3, #0
10003468:	d002      	beq.n	10003470 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000346a:	2b01      	cmp	r3, #1
1000346c:	d01f      	beq.n	100034ae <HAL_RCCEx_PeriphCLKConfig+0x856>
1000346e:	e05c      	b.n	1000352a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003470:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003478:	681b      	ldr	r3, [r3, #0]
1000347a:	3380      	adds	r3, #128	@ 0x80
1000347c:	4618      	mov	r0, r3
1000347e:	f7ff fa93 	bl	100029a8 <RCCEx_PLL4_Config>
10003482:	4603      	mov	r3, r0
10003484:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003488:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000348c:	2b00      	cmp	r3, #0
1000348e:	d003      	beq.n	10003498 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10003490:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003494:	f001 b98c 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003498:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000349c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100034a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034a4:	f043 0310 	orr.w	r3, r3, #16
100034a8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100034ac:	e03d      	b.n	1000352a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100034ae:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100034b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034b6:	681b      	ldr	r3, [r3, #0]
100034b8:	3344      	adds	r3, #68	@ 0x44
100034ba:	4618      	mov	r0, r3
100034bc:	f7ff f90a 	bl	100026d4 <RCCEx_PLL3_Config>
100034c0:	4603      	mov	r3, r0
100034c2:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100034c6:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100034ca:	2b00      	cmp	r3, #0
100034cc:	d003      	beq.n	100034d6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
100034ce:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100034d2:	f001 b96d 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100034d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034da:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034e2:	f043 0320 	orr.w	r3, r3, #32
100034e6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100034ea:	e01e      	b.n	1000352a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100034ec:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100034f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034f4:	681b      	ldr	r3, [r3, #0]
100034f6:	3344      	adds	r3, #68	@ 0x44
100034f8:	4618      	mov	r0, r3
100034fa:	f7ff f8eb 	bl	100026d4 <RCCEx_PLL3_Config>
100034fe:	4603      	mov	r3, r0
10003500:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003504:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003508:	2b00      	cmp	r3, #0
1000350a:	d003      	beq.n	10003514 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
1000350c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003510:	f001 b94e 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003514:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003518:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000351c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003524:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003528:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
1000352a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000352e:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
10003532:	f023 0107 	bic.w	r1, r3, #7
10003536:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000353a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000353e:	681b      	ldr	r3, [r3, #0]
10003540:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10003544:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003548:	430b      	orrs	r3, r1
1000354a:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
1000354e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003552:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003556:	681b      	ldr	r3, [r3, #0]
10003558:	e9d3 2300 	ldrd	r2, r3, [r3]
1000355c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10003560:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10003564:	2300      	movs	r3, #0
10003566:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
1000356a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
1000356e:	460b      	mov	r3, r1
10003570:	4313      	orrs	r3, r2
10003572:	d038      	beq.n	100035e6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10003574:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000357c:	681b      	ldr	r3, [r3, #0]
1000357e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10003582:	2b01      	cmp	r3, #1
10003584:	d11d      	bne.n	100035c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003586:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000358a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000358e:	681b      	ldr	r3, [r3, #0]
10003590:	3380      	adds	r3, #128	@ 0x80
10003592:	4618      	mov	r0, r3
10003594:	f7ff fa08 	bl	100029a8 <RCCEx_PLL4_Config>
10003598:	4603      	mov	r3, r0
1000359a:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
1000359e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100035a2:	2b00      	cmp	r3, #0
100035a4:	d003      	beq.n	100035ae <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
100035a6:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100035aa:	f001 b901 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100035ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035b2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100035b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035ba:	f043 0320 	orr.w	r3, r3, #32
100035be:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
100035c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035c6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
100035ca:	f023 0107 	bic.w	r1, r3, #7
100035ce:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100035d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035d6:	681b      	ldr	r3, [r3, #0]
100035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
100035dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035e0:	430b      	orrs	r3, r1
100035e2:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
100035e6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100035ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035ee:	681b      	ldr	r3, [r3, #0]
100035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
100035f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
100035f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
100035fc:	2300      	movs	r3, #0
100035fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10003602:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10003606:	460b      	mov	r3, r1
10003608:	4313      	orrs	r3, r2
1000360a:	d05b      	beq.n	100036c4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
1000360c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003610:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003614:	681b      	ldr	r3, [r3, #0]
10003616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
1000361a:	2b01      	cmp	r3, #1
1000361c:	d002      	beq.n	10003624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
1000361e:	2b05      	cmp	r3, #5
10003620:	d01f      	beq.n	10003662 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10003622:	e03d      	b.n	100036a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003624:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000362c:	681b      	ldr	r3, [r3, #0]
1000362e:	3380      	adds	r3, #128	@ 0x80
10003630:	4618      	mov	r0, r3
10003632:	f7ff f9b9 	bl	100029a8 <RCCEx_PLL4_Config>
10003636:	4603      	mov	r3, r0
10003638:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000363c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003640:	2b00      	cmp	r3, #0
10003642:	d003      	beq.n	1000364c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10003644:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003648:	f001 b8b2 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000364c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003650:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003654:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003658:	f043 0320 	orr.w	r3, r3, #32
1000365c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003660:	e01e      	b.n	100036a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003662:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003666:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000366a:	681b      	ldr	r3, [r3, #0]
1000366c:	3344      	adds	r3, #68	@ 0x44
1000366e:	4618      	mov	r0, r3
10003670:	f7ff f830 	bl	100026d4 <RCCEx_PLL3_Config>
10003674:	4603      	mov	r3, r0
10003676:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000367a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000367e:	2b00      	cmp	r3, #0
10003680:	d003      	beq.n	1000368a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10003682:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003686:	f001 b893 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000368a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000368e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003692:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003696:	f043 0320 	orr.w	r3, r3, #32
1000369a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000369e:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
100036a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
100036a8:	f023 0107 	bic.w	r1, r3, #7
100036ac:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100036b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036b4:	681b      	ldr	r3, [r3, #0]
100036b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100036ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036be:	430b      	orrs	r3, r1
100036c0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
100036c4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100036c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036cc:	681b      	ldr	r3, [r3, #0]
100036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
100036d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
100036d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
100036da:	2300      	movs	r3, #0
100036dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
100036e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
100036e4:	460b      	mov	r3, r1
100036e6:	4313      	orrs	r3, r2
100036e8:	d038      	beq.n	1000375c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100036ea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100036ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036f2:	681b      	ldr	r3, [r3, #0]
100036f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100036f8:	2b01      	cmp	r3, #1
100036fa:	d11d      	bne.n	10003738 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100036fc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003700:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003704:	681b      	ldr	r3, [r3, #0]
10003706:	3380      	adds	r3, #128	@ 0x80
10003708:	4618      	mov	r0, r3
1000370a:	f7ff f94d 	bl	100029a8 <RCCEx_PLL4_Config>
1000370e:	4603      	mov	r3, r0
10003710:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10003714:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003718:	2b00      	cmp	r3, #0
1000371a:	d003      	beq.n	10003724 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
1000371c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003720:	f001 b846 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003728:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000372c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003730:	f043 0320 	orr.w	r3, r3, #32
10003734:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10003738:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000373c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10003740:	f023 0107 	bic.w	r1, r3, #7
10003744:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003748:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000374c:	681b      	ldr	r3, [r3, #0]
1000374e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10003752:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003756:	430b      	orrs	r3, r1
10003758:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000375c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003760:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003764:	681b      	ldr	r3, [r3, #0]
10003766:	e9d3 2300 	ldrd	r2, r3, [r3]
1000376a:	f002 0302 	and.w	r3, r2, #2
1000376e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10003772:	2300      	movs	r3, #0
10003774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10003778:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
1000377c:	460b      	mov	r3, r1
1000377e:	4313      	orrs	r3, r2
10003780:	d038      	beq.n	100037f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10003782:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003786:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000378a:	681b      	ldr	r3, [r3, #0]
1000378c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10003790:	2b01      	cmp	r3, #1
10003792:	d11d      	bne.n	100037d0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003794:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003798:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000379c:	681b      	ldr	r3, [r3, #0]
1000379e:	3380      	adds	r3, #128	@ 0x80
100037a0:	4618      	mov	r0, r3
100037a2:	f7ff f901 	bl	100029a8 <RCCEx_PLL4_Config>
100037a6:	4603      	mov	r3, r0
100037a8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
100037ac:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100037b0:	2b00      	cmp	r3, #0
100037b2:	d003      	beq.n	100037bc <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
100037b4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100037b8:	f000 bffa 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100037bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100037c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037c8:	f043 0320 	orr.w	r3, r3, #32
100037cc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
100037d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037d4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
100037d8:	f023 0107 	bic.w	r1, r3, #7
100037dc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100037e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037e4:	681b      	ldr	r3, [r3, #0]
100037e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
100037ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037ee:	430b      	orrs	r3, r1
100037f0:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100037f4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100037f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037fc:	681b      	ldr	r3, [r3, #0]
100037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
10003802:	f002 0304 	and.w	r3, r2, #4
10003806:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
1000380a:	2300      	movs	r3, #0
1000380c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10003810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10003814:	460b      	mov	r3, r1
10003816:	4313      	orrs	r3, r2
10003818:	d038      	beq.n	1000388c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
1000381a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000381e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003822:	681b      	ldr	r3, [r3, #0]
10003824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003828:	2b01      	cmp	r3, #1
1000382a:	d11d      	bne.n	10003868 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000382c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003830:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003834:	681b      	ldr	r3, [r3, #0]
10003836:	3380      	adds	r3, #128	@ 0x80
10003838:	4618      	mov	r0, r3
1000383a:	f7ff f8b5 	bl	100029a8 <RCCEx_PLL4_Config>
1000383e:	4603      	mov	r3, r0
10003840:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10003844:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003848:	2b00      	cmp	r3, #0
1000384a:	d003      	beq.n	10003854 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
1000384c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003850:	f000 bfae 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003854:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003858:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000385c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003860:	f043 0320 	orr.w	r3, r3, #32
10003864:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10003868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000386c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10003870:	f023 0107 	bic.w	r1, r3, #7
10003874:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003878:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000387c:	681b      	ldr	r3, [r3, #0]
1000387e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003882:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003886:	430b      	orrs	r3, r1
10003888:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
1000388c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003894:	681b      	ldr	r3, [r3, #0]
10003896:	e9d3 2300 	ldrd	r2, r3, [r3]
1000389a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
1000389e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
100038a2:	2300      	movs	r3, #0
100038a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
100038a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
100038ac:	460b      	mov	r3, r1
100038ae:	4313      	orrs	r3, r2
100038b0:	d038      	beq.n	10003924 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
100038b2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100038b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038ba:	681b      	ldr	r3, [r3, #0]
100038bc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
100038c0:	2b01      	cmp	r3, #1
100038c2:	d11d      	bne.n	10003900 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100038c4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100038c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038cc:	681b      	ldr	r3, [r3, #0]
100038ce:	3380      	adds	r3, #128	@ 0x80
100038d0:	4618      	mov	r0, r3
100038d2:	f7ff f869 	bl	100029a8 <RCCEx_PLL4_Config>
100038d6:	4603      	mov	r3, r0
100038d8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
100038dc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100038e0:	2b00      	cmp	r3, #0
100038e2:	d003      	beq.n	100038ec <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
100038e4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100038e8:	f000 bf62 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100038ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100038f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038f8:	f043 0320 	orr.w	r3, r3, #32
100038fc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10003900:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003904:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10003908:	f023 0107 	bic.w	r1, r3, #7
1000390c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003910:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003914:	681b      	ldr	r3, [r3, #0]
10003916:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
1000391a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000391e:	430b      	orrs	r3, r1
10003920:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10003924:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003928:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000392c:	681b      	ldr	r3, [r3, #0]
1000392e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003932:	f002 0301 	and.w	r3, r2, #1
10003936:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
1000393a:	2300      	movs	r3, #0
1000393c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10003940:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10003944:	460b      	mov	r3, r1
10003946:	4313      	orrs	r3, r2
10003948:	d05b      	beq.n	10003a02 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000394a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000394e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003952:	681b      	ldr	r3, [r3, #0]
10003954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10003958:	2b01      	cmp	r3, #1
1000395a:	d002      	beq.n	10003962 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
1000395c:	2b04      	cmp	r3, #4
1000395e:	d01f      	beq.n	100039a0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10003960:	e03d      	b.n	100039de <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003962:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003966:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000396a:	681b      	ldr	r3, [r3, #0]
1000396c:	3344      	adds	r3, #68	@ 0x44
1000396e:	4618      	mov	r0, r3
10003970:	f7fe feb0 	bl	100026d4 <RCCEx_PLL3_Config>
10003974:	4603      	mov	r3, r0
10003976:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000397a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000397e:	2b00      	cmp	r3, #0
10003980:	d003      	beq.n	1000398a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10003982:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003986:	f000 bf13 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000398a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000398e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003992:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003996:	f043 0320 	orr.w	r3, r3, #32
1000399a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000399e:	e01e      	b.n	100039de <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039a0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100039a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039a8:	681b      	ldr	r3, [r3, #0]
100039aa:	3380      	adds	r3, #128	@ 0x80
100039ac:	4618      	mov	r0, r3
100039ae:	f7fe fffb 	bl	100029a8 <RCCEx_PLL4_Config>
100039b2:	4603      	mov	r3, r0
100039b4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100039b8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100039bc:	2b00      	cmp	r3, #0
100039be:	d003      	beq.n	100039c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
100039c0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100039c4:	f000 bef4 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100039c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100039d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039d4:	f043 0320 	orr.w	r3, r3, #32
100039d8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100039dc:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
100039de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100039e6:	f023 0107 	bic.w	r1, r3, #7
100039ea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100039ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039f2:	681b      	ldr	r3, [r3, #0]
100039f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100039f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039fc:	430b      	orrs	r3, r1
100039fe:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10003a02:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003a06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a0a:	681b      	ldr	r3, [r3, #0]
10003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003a10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10003a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
10003a18:	2300      	movs	r3, #0
10003a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10003a1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
10003a22:	460b      	mov	r3, r1
10003a24:	4313      	orrs	r3, r2
10003a26:	d05b      	beq.n	10003ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10003a28:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003a2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a30:	681b      	ldr	r3, [r3, #0]
10003a32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003a36:	2b01      	cmp	r3, #1
10003a38:	d002      	beq.n	10003a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003a3a:	2b02      	cmp	r3, #2
10003a3c:	d01f      	beq.n	10003a7e <HAL_RCCEx_PeriphCLKConfig+0xe26>
10003a3e:	e03d      	b.n	10003abc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a40:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003a44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a48:	681b      	ldr	r3, [r3, #0]
10003a4a:	3344      	adds	r3, #68	@ 0x44
10003a4c:	4618      	mov	r0, r3
10003a4e:	f7fe fe41 	bl	100026d4 <RCCEx_PLL3_Config>
10003a52:	4603      	mov	r3, r0
10003a54:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003a58:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003a5c:	2b00      	cmp	r3, #0
10003a5e:	d003      	beq.n	10003a68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10003a60:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003a64:	f000 bea4 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003a68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a6c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003a70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003a78:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003a7c:	e01e      	b.n	10003abc <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a7e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003a82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a86:	681b      	ldr	r3, [r3, #0]
10003a88:	3380      	adds	r3, #128	@ 0x80
10003a8a:	4618      	mov	r0, r3
10003a8c:	f7fe ff8c 	bl	100029a8 <RCCEx_PLL4_Config>
10003a90:	4603      	mov	r3, r0
10003a92:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003a96:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003a9a:	2b00      	cmp	r3, #0
10003a9c:	d003      	beq.n	10003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10003a9e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003aa2:	f000 be85 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003aa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aaa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ab2:	f043 0310 	orr.w	r3, r3, #16
10003ab6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003aba:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10003abc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ac0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10003ac4:	f023 0107 	bic.w	r1, r3, #7
10003ac8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ad0:	681b      	ldr	r3, [r3, #0]
10003ad2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003ad6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ada:	430b      	orrs	r3, r1
10003adc:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10003ae0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003ae4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ae8:	681b      	ldr	r3, [r3, #0]
10003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
10003aee:	2100      	movs	r1, #0
10003af0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
10003af4:	f003 0301 	and.w	r3, r3, #1
10003af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10003afc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10003b00:	460b      	mov	r3, r1
10003b02:	4313      	orrs	r3, r2
10003b04:	d05b      	beq.n	10003bbe <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003b06:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b0e:	681b      	ldr	r3, [r3, #0]
10003b10:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003b14:	2b01      	cmp	r3, #1
10003b16:	d002      	beq.n	10003b1e <HAL_RCCEx_PeriphCLKConfig+0xec6>
10003b18:	2b02      	cmp	r3, #2
10003b1a:	d01f      	beq.n	10003b5c <HAL_RCCEx_PeriphCLKConfig+0xf04>
10003b1c:	e03d      	b.n	10003b9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003b1e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003b22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b26:	681b      	ldr	r3, [r3, #0]
10003b28:	3344      	adds	r3, #68	@ 0x44
10003b2a:	4618      	mov	r0, r3
10003b2c:	f7fe fdd2 	bl	100026d4 <RCCEx_PLL3_Config>
10003b30:	4603      	mov	r3, r0
10003b32:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003b36:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003b3a:	2b00      	cmp	r3, #0
10003b3c:	d003      	beq.n	10003b46 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10003b3e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003b42:	f000 be35 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003b46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b4a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003b4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003b56:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003b5a:	e01e      	b.n	10003b9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b5c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b64:	681b      	ldr	r3, [r3, #0]
10003b66:	3380      	adds	r3, #128	@ 0x80
10003b68:	4618      	mov	r0, r3
10003b6a:	f7fe ff1d 	bl	100029a8 <RCCEx_PLL4_Config>
10003b6e:	4603      	mov	r3, r0
10003b70:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003b74:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003b78:	2b00      	cmp	r3, #0
10003b7a:	d003      	beq.n	10003b84 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10003b7c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003b80:	f000 be16 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003b84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b88:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b90:	f043 0310 	orr.w	r3, r3, #16
10003b94:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003b98:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b9e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10003ba2:	f023 0107 	bic.w	r1, r3, #7
10003ba6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bae:	681b      	ldr	r3, [r3, #0]
10003bb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003bb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bb8:	430b      	orrs	r3, r1
10003bba:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003bbe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003bc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bc6:	681b      	ldr	r3, [r3, #0]
10003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
10003bcc:	2100      	movs	r1, #0
10003bce:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
10003bd2:	f003 0302 	and.w	r3, r3, #2
10003bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10003bda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10003bde:	460b      	mov	r3, r1
10003be0:	4313      	orrs	r3, r2
10003be2:	d05b      	beq.n	10003c9c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003be4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003be8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bec:	681b      	ldr	r3, [r3, #0]
10003bee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003bf2:	2b00      	cmp	r3, #0
10003bf4:	d002      	beq.n	10003bfc <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10003bf6:	2b01      	cmp	r3, #1
10003bf8:	d01f      	beq.n	10003c3a <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10003bfa:	e03d      	b.n	10003c78 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003bfc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003c00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c04:	681b      	ldr	r3, [r3, #0]
10003c06:	3380      	adds	r3, #128	@ 0x80
10003c08:	4618      	mov	r0, r3
10003c0a:	f7fe fecd 	bl	100029a8 <RCCEx_PLL4_Config>
10003c0e:	4603      	mov	r3, r0
10003c10:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003c14:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003c18:	2b00      	cmp	r3, #0
10003c1a:	d003      	beq.n	10003c24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10003c1c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003c20:	f000 bdc6 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003c24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c28:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003c2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c30:	f043 0310 	orr.w	r3, r3, #16
10003c34:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003c38:	e01e      	b.n	10003c78 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c3a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c42:	681b      	ldr	r3, [r3, #0]
10003c44:	3344      	adds	r3, #68	@ 0x44
10003c46:	4618      	mov	r0, r3
10003c48:	f7fe fd44 	bl	100026d4 <RCCEx_PLL3_Config>
10003c4c:	4603      	mov	r3, r0
10003c4e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003c52:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003c56:	2b00      	cmp	r3, #0
10003c58:	d003      	beq.n	10003c62 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10003c5a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003c5e:	f000 bda7 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003c62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c66:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003c6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c6e:	f043 0320 	orr.w	r3, r3, #32
10003c72:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003c76:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003c78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c7c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10003c80:	f023 0103 	bic.w	r1, r3, #3
10003c84:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c8c:	681b      	ldr	r3, [r3, #0]
10003c8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003c92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c96:	430b      	orrs	r3, r1
10003c98:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003c9c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003ca0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ca4:	681b      	ldr	r3, [r3, #0]
10003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
10003caa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10003cae:	67bb      	str	r3, [r7, #120]	@ 0x78
10003cb0:	2300      	movs	r3, #0
10003cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
10003cb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10003cb8:	460b      	mov	r3, r1
10003cba:	4313      	orrs	r3, r2
10003cbc:	d05b      	beq.n	10003d76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003cbe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cc6:	681b      	ldr	r3, [r3, #0]
10003cc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003ccc:	2b01      	cmp	r3, #1
10003cce:	d002      	beq.n	10003cd6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
10003cd0:	2b02      	cmp	r3, #2
10003cd2:	d01f      	beq.n	10003d14 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
10003cd4:	e03d      	b.n	10003d52 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003cd6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003cda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cde:	681b      	ldr	r3, [r3, #0]
10003ce0:	3344      	adds	r3, #68	@ 0x44
10003ce2:	4618      	mov	r0, r3
10003ce4:	f7fe fcf6 	bl	100026d4 <RCCEx_PLL3_Config>
10003ce8:	4603      	mov	r3, r0
10003cea:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003cee:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003cf2:	2b00      	cmp	r3, #0
10003cf4:	d003      	beq.n	10003cfe <HAL_RCCEx_PeriphCLKConfig+0x10a6>
        {
          return status;
10003cf6:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003cfa:	f000 bd59 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003cfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d02:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003d0e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003d12:	e01e      	b.n	10003d52 <HAL_RCCEx_PeriphCLKConfig+0x10fa>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d14:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d1c:	681b      	ldr	r3, [r3, #0]
10003d1e:	3380      	adds	r3, #128	@ 0x80
10003d20:	4618      	mov	r0, r3
10003d22:	f7fe fe41 	bl	100029a8 <RCCEx_PLL4_Config>
10003d26:	4603      	mov	r3, r0
10003d28:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003d2c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003d30:	2b00      	cmp	r3, #0
10003d32:	d003      	beq.n	10003d3c <HAL_RCCEx_PeriphCLKConfig+0x10e4>
        {
          return status;
10003d34:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003d38:	f000 bd3a 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003d3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003d44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d48:	f043 0310 	orr.w	r3, r3, #16
10003d4c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003d50:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003d52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d56:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10003d5a:	f023 0103 	bic.w	r1, r3, #3
10003d5e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d66:	681b      	ldr	r3, [r3, #0]
10003d68:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003d6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d70:	430b      	orrs	r3, r1
10003d72:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003d76:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d7e:	681b      	ldr	r3, [r3, #0]
10003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10003d88:	673b      	str	r3, [r7, #112]	@ 0x70
10003d8a:	2300      	movs	r3, #0
10003d8c:	677b      	str	r3, [r7, #116]	@ 0x74
10003d8e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10003d92:	460b      	mov	r3, r1
10003d94:	4313      	orrs	r3, r2
10003d96:	d05b      	beq.n	10003e50 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003d98:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003da0:	681b      	ldr	r3, [r3, #0]
10003da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003da6:	2b01      	cmp	r3, #1
10003da8:	d002      	beq.n	10003db0 <HAL_RCCEx_PeriphCLKConfig+0x1158>
10003daa:	2b02      	cmp	r3, #2
10003dac:	d01f      	beq.n	10003dee <HAL_RCCEx_PeriphCLKConfig+0x1196>
10003dae:	e03d      	b.n	10003e2c <HAL_RCCEx_PeriphCLKConfig+0x11d4>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003db0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003db4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003db8:	681b      	ldr	r3, [r3, #0]
10003dba:	3344      	adds	r3, #68	@ 0x44
10003dbc:	4618      	mov	r0, r3
10003dbe:	f7fe fc89 	bl	100026d4 <RCCEx_PLL3_Config>
10003dc2:	4603      	mov	r3, r0
10003dc4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003dc8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003dcc:	2b00      	cmp	r3, #0
10003dce:	d003      	beq.n	10003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        {
          return status;
10003dd0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003dd4:	f000 bcec 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003dd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ddc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003de0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003de8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003dec:	e01e      	b.n	10003e2c <HAL_RCCEx_PeriphCLKConfig+0x11d4>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003dee:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003df2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003df6:	681b      	ldr	r3, [r3, #0]
10003df8:	3380      	adds	r3, #128	@ 0x80
10003dfa:	4618      	mov	r0, r3
10003dfc:	f7fe fdd4 	bl	100029a8 <RCCEx_PLL4_Config>
10003e00:	4603      	mov	r3, r0
10003e02:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003e06:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003e0a:	2b00      	cmp	r3, #0
10003e0c:	d003      	beq.n	10003e16 <HAL_RCCEx_PeriphCLKConfig+0x11be>
        {
          return status;
10003e0e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003e12:	f000 bccd 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003e16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e1a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003e1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e22:	f043 0310 	orr.w	r3, r3, #16
10003e26:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003e2a:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003e2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e30:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10003e34:	f023 0103 	bic.w	r1, r3, #3
10003e38:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e40:	681b      	ldr	r3, [r3, #0]
10003e42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003e46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e4a:	430b      	orrs	r3, r1
10003e4c:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10003e50:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e58:	681b      	ldr	r3, [r3, #0]
10003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e5e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10003e62:	66bb      	str	r3, [r7, #104]	@ 0x68
10003e64:	2300      	movs	r3, #0
10003e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
10003e68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10003e6c:	460b      	mov	r3, r1
10003e6e:	4313      	orrs	r3, r2
10003e70:	d05b      	beq.n	10003f2a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10003e72:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003e76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e7a:	681b      	ldr	r3, [r3, #0]
10003e7c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003e80:	2b00      	cmp	r3, #0
10003e82:	d002      	beq.n	10003e8a <HAL_RCCEx_PeriphCLKConfig+0x1232>
10003e84:	2b01      	cmp	r3, #1
10003e86:	d01f      	beq.n	10003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
10003e88:	e03d      	b.n	10003f06 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e8a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003e8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e92:	681b      	ldr	r3, [r3, #0]
10003e94:	3380      	adds	r3, #128	@ 0x80
10003e96:	4618      	mov	r0, r3
10003e98:	f7fe fd86 	bl	100029a8 <RCCEx_PLL4_Config>
10003e9c:	4603      	mov	r3, r0
10003e9e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003ea2:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003ea6:	2b00      	cmp	r3, #0
10003ea8:	d003      	beq.n	10003eb2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
        {
          return status;
10003eaa:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003eae:	f000 bc7f 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003eb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003eb6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003eba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ebe:	f043 0310 	orr.w	r3, r3, #16
10003ec2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003ec6:	e01e      	b.n	10003f06 <HAL_RCCEx_PeriphCLKConfig+0x12ae>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003ec8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003ecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ed0:	681b      	ldr	r3, [r3, #0]
10003ed2:	3344      	adds	r3, #68	@ 0x44
10003ed4:	4618      	mov	r0, r3
10003ed6:	f7fe fbfd 	bl	100026d4 <RCCEx_PLL3_Config>
10003eda:	4603      	mov	r3, r0
10003edc:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10003ee0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003ee4:	2b00      	cmp	r3, #0
10003ee6:	d003      	beq.n	10003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        {
          return status;
10003ee8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003eec:	f000 bc60 	b.w	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ef4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003ef8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003efc:	f043 0320 	orr.w	r3, r3, #32
10003f00:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f04:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10003f06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f0a:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10003f0e:	f023 0103 	bic.w	r1, r3, #3
10003f12:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003f16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f1a:	681b      	ldr	r3, [r3, #0]
10003f1c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003f20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f24:	430b      	orrs	r3, r1
10003f26:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10003f2a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003f2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f32:	681b      	ldr	r3, [r3, #0]
10003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f38:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10003f3c:	663b      	str	r3, [r7, #96]	@ 0x60
10003f3e:	2300      	movs	r3, #0
10003f40:	667b      	str	r3, [r7, #100]	@ 0x64
10003f42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10003f46:	460b      	mov	r3, r1
10003f48:	4313      	orrs	r3, r2
10003f4a:	d011      	beq.n	10003f70 <HAL_RCCEx_PeriphCLKConfig+0x1318>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10003f4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f50:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10003f54:	f023 0103 	bic.w	r1, r3, #3
10003f58:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003f5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f60:	681b      	ldr	r3, [r3, #0]
10003f62:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10003f66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f6a:	430b      	orrs	r3, r1
10003f6c:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10003f70:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003f74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f78:	681b      	ldr	r3, [r3, #0]
10003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f7e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
10003f82:	65bb      	str	r3, [r7, #88]	@ 0x58
10003f84:	2300      	movs	r3, #0
10003f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
10003f88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
10003f8c:	460b      	mov	r3, r1
10003f8e:	4313      	orrs	r3, r2
10003f90:	d037      	beq.n	10004002 <HAL_RCCEx_PeriphCLKConfig+0x13aa>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10003f92:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003f96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f9a:	681b      	ldr	r3, [r3, #0]
10003f9c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10003fa0:	2b01      	cmp	r3, #1
10003fa2:	d11c      	bne.n	10003fde <HAL_RCCEx_PeriphCLKConfig+0x1386>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003fa4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fac:	681b      	ldr	r3, [r3, #0]
10003fae:	3380      	adds	r3, #128	@ 0x80
10003fb0:	4618      	mov	r0, r3
10003fb2:	f7fe fcf9 	bl	100029a8 <RCCEx_PLL4_Config>
10003fb6:	4603      	mov	r3, r0
10003fb8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10003fbc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003fc0:	2b00      	cmp	r3, #0
10003fc2:	d002      	beq.n	10003fca <HAL_RCCEx_PeriphCLKConfig+0x1372>
      {
        return status;
10003fc4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10003fc8:	e3f2      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003fca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003fd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003fda:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10003fde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fe2:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10003fe6:	f023 0103 	bic.w	r1, r3, #3
10003fea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10003fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ff2:	681b      	ldr	r3, [r3, #0]
10003ff4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10003ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ffc:	430b      	orrs	r3, r1
10003ffe:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10004002:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000400a:	681b      	ldr	r3, [r3, #0]
1000400c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004010:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
10004014:	653b      	str	r3, [r7, #80]	@ 0x50
10004016:	2300      	movs	r3, #0
10004018:	657b      	str	r3, [r7, #84]	@ 0x54
1000401a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
1000401e:	460b      	mov	r3, r1
10004020:	4313      	orrs	r3, r2
10004022:	d037      	beq.n	10004094 <HAL_RCCEx_PeriphCLKConfig+0x143c>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10004024:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000402c:	681b      	ldr	r3, [r3, #0]
1000402e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004032:	2b00      	cmp	r3, #0
10004034:	d11c      	bne.n	10004070 <HAL_RCCEx_PeriphCLKConfig+0x1418>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004036:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000403a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000403e:	681b      	ldr	r3, [r3, #0]
10004040:	3380      	adds	r3, #128	@ 0x80
10004042:	4618      	mov	r0, r3
10004044:	f7fe fcb0 	bl	100029a8 <RCCEx_PLL4_Config>
10004048:	4603      	mov	r3, r0
1000404a:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
1000404e:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004052:	2b00      	cmp	r3, #0
10004054:	d002      	beq.n	1000405c <HAL_RCCEx_PeriphCLKConfig+0x1404>
      {
        return status;
10004056:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000405a:	e3a9      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000405c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004060:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004064:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000406c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10004070:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004074:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004078:	f023 0110 	bic.w	r1, r3, #16
1000407c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004080:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004084:	681b      	ldr	r3, [r3, #0]
10004086:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
1000408a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000408e:	430b      	orrs	r3, r1
10004090:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10004094:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004098:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000409c:	681b      	ldr	r3, [r3, #0]
1000409e:	e9d3 2300 	ldrd	r2, r3, [r3]
100040a2:	2100      	movs	r1, #0
100040a4:	64b9      	str	r1, [r7, #72]	@ 0x48
100040a6:	f003 0304 	and.w	r3, r3, #4
100040aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
100040ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
100040b0:	460b      	mov	r3, r1
100040b2:	4313      	orrs	r3, r2
100040b4:	d037      	beq.n	10004126 <HAL_RCCEx_PeriphCLKConfig+0x14ce>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100040b6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100040ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040be:	681b      	ldr	r3, [r3, #0]
100040c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100040c4:	2b01      	cmp	r3, #1
100040c6:	d11c      	bne.n	10004102 <HAL_RCCEx_PeriphCLKConfig+0x14aa>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040c8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100040cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040d0:	681b      	ldr	r3, [r3, #0]
100040d2:	3380      	adds	r3, #128	@ 0x80
100040d4:	4618      	mov	r0, r3
100040d6:	f7fe fc67 	bl	100029a8 <RCCEx_PLL4_Config>
100040da:	4603      	mov	r3, r0
100040dc:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
100040e0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100040e4:	2b00      	cmp	r3, #0
100040e6:	d002      	beq.n	100040ee <HAL_RCCEx_PeriphCLKConfig+0x1496>
      {
        return status;
100040e8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100040ec:	e360      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100040ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100040fe:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10004102:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004106:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
1000410a:	f023 0103 	bic.w	r1, r3, #3
1000410e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004116:	681b      	ldr	r3, [r3, #0]
10004118:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000411c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004120:	430b      	orrs	r3, r1
10004122:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10004126:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000412a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000412e:	681b      	ldr	r3, [r3, #0]
10004130:	e9d3 2300 	ldrd	r2, r3, [r3]
10004134:	2100      	movs	r1, #0
10004136:	6439      	str	r1, [r7, #64]	@ 0x40
10004138:	f003 0308 	and.w	r3, r3, #8
1000413c:	647b      	str	r3, [r7, #68]	@ 0x44
1000413e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
10004142:	460b      	mov	r3, r1
10004144:	4313      	orrs	r3, r2
10004146:	d037      	beq.n	100041b8 <HAL_RCCEx_PeriphCLKConfig+0x1560>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10004148:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000414c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004150:	681b      	ldr	r3, [r3, #0]
10004152:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004156:	2b01      	cmp	r3, #1
10004158:	d11c      	bne.n	10004194 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000415a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000415e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004162:	681b      	ldr	r3, [r3, #0]
10004164:	3380      	adds	r3, #128	@ 0x80
10004166:	4618      	mov	r0, r3
10004168:	f7fe fc1e 	bl	100029a8 <RCCEx_PLL4_Config>
1000416c:	4603      	mov	r3, r0
1000416e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
10004172:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004176:	2b00      	cmp	r3, #0
10004178:	d002      	beq.n	10004180 <HAL_RCCEx_PeriphCLKConfig+0x1528>
      {
        return status;
1000417a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000417e:	e317      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004184:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004188:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000418c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004190:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10004194:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004198:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
1000419c:	f023 0103 	bic.w	r1, r3, #3
100041a0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100041a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041a8:	681b      	ldr	r3, [r3, #0]
100041aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
100041ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041b2:	430b      	orrs	r3, r1
100041b4:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100041b8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100041bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041c0:	681b      	ldr	r3, [r3, #0]
100041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100041c6:	2100      	movs	r1, #0
100041c8:	63b9      	str	r1, [r7, #56]	@ 0x38
100041ca:	f003 0310 	and.w	r3, r3, #16
100041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
100041d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
100041d4:	460b      	mov	r3, r1
100041d6:	4313      	orrs	r3, r2
100041d8:	d011      	beq.n	100041fe <HAL_RCCEx_PeriphCLKConfig+0x15a6>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100041da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100041e2:	f023 0103 	bic.w	r1, r3, #3
100041e6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100041ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041ee:	681b      	ldr	r3, [r3, #0]
100041f0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
100041f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041f8:	430b      	orrs	r3, r1
100041fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100041fe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004202:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004206:	681b      	ldr	r3, [r3, #0]
10004208:	e9d3 2300 	ldrd	r2, r3, [r3]
1000420c:	f002 0308 	and.w	r3, r2, #8
10004210:	633b      	str	r3, [r7, #48]	@ 0x30
10004212:	2300      	movs	r3, #0
10004214:	637b      	str	r3, [r7, #52]	@ 0x34
10004216:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
1000421a:	460b      	mov	r3, r1
1000421c:	4313      	orrs	r3, r2
1000421e:	d059      	beq.n	100042d4 <HAL_RCCEx_PeriphCLKConfig+0x167c>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10004220:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004224:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004228:	681b      	ldr	r3, [r3, #0]
1000422a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000422e:	2b00      	cmp	r3, #0
10004230:	d002      	beq.n	10004238 <HAL_RCCEx_PeriphCLKConfig+0x15e0>
10004232:	2b02      	cmp	r3, #2
10004234:	d01e      	beq.n	10004274 <HAL_RCCEx_PeriphCLKConfig+0x161c>
10004236:	e03b      	b.n	100042b0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004238:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000423c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004240:	681b      	ldr	r3, [r3, #0]
10004242:	3380      	adds	r3, #128	@ 0x80
10004244:	4618      	mov	r0, r3
10004246:	f7fe fbaf 	bl	100029a8 <RCCEx_PLL4_Config>
1000424a:	4603      	mov	r3, r0
1000424c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10004250:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004254:	2b00      	cmp	r3, #0
10004256:	d002      	beq.n	1000425e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        {
          return status;
10004258:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000425c:	e2a8      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000425e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004262:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004266:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000426a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000426e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
10004272:	e01d      	b.n	100042b0 <HAL_RCCEx_PeriphCLKConfig+0x1658>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004274:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004278:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000427c:	681b      	ldr	r3, [r3, #0]
1000427e:	3344      	adds	r3, #68	@ 0x44
10004280:	4618      	mov	r0, r3
10004282:	f7fe fa27 	bl	100026d4 <RCCEx_PLL3_Config>
10004286:	4603      	mov	r3, r0
10004288:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000428c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004290:	2b00      	cmp	r3, #0
10004292:	d002      	beq.n	1000429a <HAL_RCCEx_PeriphCLKConfig+0x1642>
        {
          return status;
10004294:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004298:	e28a      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000429a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000429e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100042a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042a6:	f043 0320 	orr.w	r3, r3, #32
100042aa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100042ae:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100042b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042b4:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
100042b8:	f023 0103 	bic.w	r1, r3, #3
100042bc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100042c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042c4:	681b      	ldr	r3, [r3, #0]
100042c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100042ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042ce:	430b      	orrs	r3, r1
100042d0:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
100042d4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100042d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042dc:	681b      	ldr	r3, [r3, #0]
100042de:	e9d3 2300 	ldrd	r2, r3, [r3]
100042e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
100042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
100042e8:	2300      	movs	r3, #0
100042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
100042ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
100042f0:	460b      	mov	r3, r1
100042f2:	4313      	orrs	r3, r2
100042f4:	d058      	beq.n	100043a8 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
100042f6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100042fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042fe:	681b      	ldr	r3, [r3, #0]
10004300:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004304:	2b01      	cmp	r3, #1
10004306:	d01f      	beq.n	10004348 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
10004308:	2b02      	cmp	r3, #2
1000430a:	d13b      	bne.n	10004384 <HAL_RCCEx_PeriphCLKConfig+0x172c>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000430c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004314:	681b      	ldr	r3, [r3, #0]
10004316:	3344      	adds	r3, #68	@ 0x44
10004318:	4618      	mov	r0, r3
1000431a:	f7fe f9db 	bl	100026d4 <RCCEx_PLL3_Config>
1000431e:	4603      	mov	r3, r0
10004320:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10004324:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004328:	2b00      	cmp	r3, #0
1000432a:	d002      	beq.n	10004332 <HAL_RCCEx_PeriphCLKConfig+0x16da>
        {
          return status;
1000432c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004330:	e23e      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004332:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004336:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000433a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000433e:	f043 0320 	orr.w	r3, r3, #32
10004342:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004346:	e01d      	b.n	10004384 <HAL_RCCEx_PeriphCLKConfig+0x172c>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004348:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000434c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004350:	681b      	ldr	r3, [r3, #0]
10004352:	3380      	adds	r3, #128	@ 0x80
10004354:	4618      	mov	r0, r3
10004356:	f7fe fb27 	bl	100029a8 <RCCEx_PLL4_Config>
1000435a:	4603      	mov	r3, r0
1000435c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
10004360:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004364:	2b00      	cmp	r3, #0
10004366:	d002      	beq.n	1000436e <HAL_RCCEx_PeriphCLKConfig+0x1716>
        {
          return status;
10004368:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000436c:	e220      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000436e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004372:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004376:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000437a:	f043 0310 	orr.w	r3, r3, #16
1000437e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004382:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10004384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004388:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
1000438c:	f023 0207 	bic.w	r2, r3, #7
10004390:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004394:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004398:	681b      	ldr	r3, [r3, #0]
1000439a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000439e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100043a2:	4313      	orrs	r3, r2
100043a4:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100043a8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100043ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043b0:	681b      	ldr	r3, [r3, #0]
100043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
100043b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
100043ba:	623b      	str	r3, [r7, #32]
100043bc:	2300      	movs	r3, #0
100043be:	627b      	str	r3, [r7, #36]	@ 0x24
100043c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
100043c4:	460b      	mov	r3, r1
100043c6:	4313      	orrs	r3, r2
100043c8:	d037      	beq.n	1000443a <HAL_RCCEx_PeriphCLKConfig+0x17e2>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
100043ca:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100043ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043d2:	681b      	ldr	r3, [r3, #0]
100043d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
100043d8:	2b01      	cmp	r3, #1
100043da:	d11c      	bne.n	10004416 <HAL_RCCEx_PeriphCLKConfig+0x17be>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100043dc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100043e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043e4:	681b      	ldr	r3, [r3, #0]
100043e6:	3380      	adds	r3, #128	@ 0x80
100043e8:	4618      	mov	r0, r3
100043ea:	f7fe fadd 	bl	100029a8 <RCCEx_PLL4_Config>
100043ee:	4603      	mov	r3, r0
100043f0:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
      if (status != HAL_OK)
100043f4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100043f8:	2b00      	cmp	r3, #0
100043fa:	d002      	beq.n	10004402 <HAL_RCCEx_PeriphCLKConfig+0x17aa>
      {
        return status;
100043fc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004400:	e1d6      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004402:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004406:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000440a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000440e:	f043 0320 	orr.w	r3, r3, #32
10004412:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10004416:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000441a:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
1000441e:	f023 0207 	bic.w	r2, r3, #7
10004422:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004426:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000442a:	681b      	ldr	r3, [r3, #0]
1000442c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10004430:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004434:	4313      	orrs	r3, r2
10004436:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
1000443a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000443e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004442:	681b      	ldr	r3, [r3, #0]
10004444:	e9d3 2300 	ldrd	r2, r3, [r3]
10004448:	f002 0340 	and.w	r3, r2, #64	@ 0x40
1000444c:	61bb      	str	r3, [r7, #24]
1000444e:	2300      	movs	r3, #0
10004450:	61fb      	str	r3, [r7, #28]
10004452:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10004456:	460b      	mov	r3, r1
10004458:	4313      	orrs	r3, r2
1000445a:	d058      	beq.n	1000450e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
1000445c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004460:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004464:	681b      	ldr	r3, [r3, #0]
10004466:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000446a:	2b01      	cmp	r3, #1
1000446c:	d01f      	beq.n	100044ae <HAL_RCCEx_PeriphCLKConfig+0x1856>
1000446e:	2b02      	cmp	r3, #2
10004470:	d13b      	bne.n	100044ea <HAL_RCCEx_PeriphCLKConfig+0x1892>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004472:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004476:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000447a:	681b      	ldr	r3, [r3, #0]
1000447c:	3344      	adds	r3, #68	@ 0x44
1000447e:	4618      	mov	r0, r3
10004480:	f7fe f928 	bl	100026d4 <RCCEx_PLL3_Config>
10004484:	4603      	mov	r3, r0
10004486:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
1000448a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
1000448e:	2b00      	cmp	r3, #0
10004490:	d002      	beq.n	10004498 <HAL_RCCEx_PeriphCLKConfig+0x1840>
        {
          return status;
10004492:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
10004496:	e18b      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004498:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000449c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100044a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044a4:	f043 0320 	orr.w	r3, r3, #32
100044a8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100044ac:	e01d      	b.n	100044ea <HAL_RCCEx_PeriphCLKConfig+0x1892>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044ae:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100044b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044b6:	681b      	ldr	r3, [r3, #0]
100044b8:	3380      	adds	r3, #128	@ 0x80
100044ba:	4618      	mov	r0, r3
100044bc:	f7fe fa74 	bl	100029a8 <RCCEx_PLL4_Config>
100044c0:	4603      	mov	r3, r0
100044c2:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
        if (status != HAL_OK)
100044c6:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100044ca:	2b00      	cmp	r3, #0
100044cc:	d002      	beq.n	100044d4 <HAL_RCCEx_PeriphCLKConfig+0x187c>
        {
          return status;
100044ce:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
100044d2:	e16d      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100044d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100044dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044e0:	f043 0310 	orr.w	r3, r3, #16
100044e4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100044e8:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
100044ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044ee:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
100044f2:	f023 0207 	bic.w	r2, r3, #7
100044f6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100044fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044fe:	681b      	ldr	r3, [r3, #0]
10004500:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10004504:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004508:	4313      	orrs	r3, r2
1000450a:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000450e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004512:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004516:	681b      	ldr	r3, [r3, #0]
10004518:	e9d3 2300 	ldrd	r2, r3, [r3]
1000451c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10004520:	613b      	str	r3, [r7, #16]
10004522:	2300      	movs	r3, #0
10004524:	617b      	str	r3, [r7, #20]
10004526:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1000452a:	460b      	mov	r3, r1
1000452c:	4313      	orrs	r3, r2
1000452e:	f000 80c6 	beq.w	100046be <HAL_RCCEx_PeriphCLKConfig+0x1a66>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10004532:	4ba2      	ldr	r3, [pc, #648]	@ (100047bc <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
10004534:	681b      	ldr	r3, [r3, #0]
10004536:	4aa1      	ldr	r2, [pc, #644]	@ (100047bc <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
10004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000453c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000453e:	f7fc f807 	bl	10000550 <HAL_GetTick>
10004542:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004546:	e00a      	b.n	1000455e <HAL_RCCEx_PeriphCLKConfig+0x1906>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10004548:	f7fc f802 	bl	10000550 <HAL_GetTick>
1000454c:	4602      	mov	r2, r0
1000454e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
10004552:	1ad3      	subs	r3, r2, r3
10004554:	2b64      	cmp	r3, #100	@ 0x64
10004556:	d902      	bls.n	1000455e <HAL_RCCEx_PeriphCLKConfig+0x1906>
      {
        ret = HAL_TIMEOUT;
10004558:	2303      	movs	r3, #3
1000455a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000455e:	4b97      	ldr	r3, [pc, #604]	@ (100047bc <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
10004560:	681b      	ldr	r3, [r3, #0]
10004562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10004566:	2b00      	cmp	r3, #0
10004568:	d0ee      	beq.n	10004548 <HAL_RCCEx_PeriphCLKConfig+0x18f0>
      }
    }

    if (ret == HAL_OK)
1000456a:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
1000456e:	2b00      	cmp	r3, #0
10004570:	f040 80a2 	bne.w	100046b8 <HAL_RCCEx_PeriphCLKConfig+0x1a60>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10004574:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004578:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000457c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004584:	681b      	ldr	r3, [r3, #0]
10004586:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
1000458a:	4053      	eors	r3, r2
1000458c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10004590:	2b00      	cmp	r3, #0
10004592:	f000 8086 	beq.w	100046a2 <HAL_RCCEx_PeriphCLKConfig+0x1a4a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10004596:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000459a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000459e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
100045a2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100045a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100045ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100045b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100045ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100045c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
100045ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
100045ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100045d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
100045da:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
100045de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
100045e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100045e6:	4313      	orrs	r3, r2
100045e8:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
100045ec:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100045f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100045f4:	2204      	movs	r2, #4
100045f6:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
100045f8:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
100045fc:	f003 020b 	and.w	r2, r3, #11
10004600:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004604:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004608:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
1000460a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000460e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004612:	2200      	movs	r2, #0
10004614:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10004616:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000461a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000461e:	2200      	movs	r2, #0
10004620:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10004622:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004626:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000462a:	2200      	movs	r2, #0
1000462c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004630:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004634:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004638:	2200      	movs	r2, #0
1000463a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000463e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
10004642:	4618      	mov	r0, r3
10004644:	f7fc fa4c 	bl	10000ae0 <HAL_RCC_OscConfig>
10004648:	4603      	mov	r3, r0
1000464a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
        if (ret != HAL_OK)
1000464e:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
10004652:	2b00      	cmp	r3, #0
10004654:	d002      	beq.n	1000465c <HAL_RCCEx_PeriphCLKConfig+0x1a04>
        {
          return ret;
10004656:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
1000465a:	e0a9      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1000465c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004660:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10004668:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000466c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004670:	681b      	ldr	r3, [r3, #0]
10004672:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10004676:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000467a:	4313      	orrs	r3, r2
1000467c:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10004680:	4b4f      	ldr	r3, [pc, #316]	@ (100047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
10004682:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10004686:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000468a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000468e:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
10004692:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
10004696:	400b      	ands	r3, r1
10004698:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000469c:	4313      	orrs	r3, r2
1000469e:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100046a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100046aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100046b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100046b6:	e002      	b.n	100046be <HAL_RCCEx_PeriphCLKConfig+0x1a66>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100046b8:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
100046bc:	e078      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100046be:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100046c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046c6:	681b      	ldr	r3, [r3, #0]
100046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
100046cc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
100046d0:	60bb      	str	r3, [r7, #8]
100046d2:	2300      	movs	r3, #0
100046d4:	60fb      	str	r3, [r7, #12]
100046d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
100046da:	460b      	mov	r3, r1
100046dc:	4313      	orrs	r3, r2
100046de:	d02a      	beq.n	10004736 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100046e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046e4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
100046e8:	f023 0201 	bic.w	r2, r3, #1
100046ec:	f507 730e 	add.w	r3, r7, #568	@ 0x238
100046f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046f4:	681b      	ldr	r3, [r3, #0]
100046f6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
100046fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100046fe:	4313      	orrs	r3, r2
10004700:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004704:	f7fb ff24 	bl	10000550 <HAL_GetTick>
10004708:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000470c:	e00a      	b.n	10004724 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000470e:	f7fb ff1f 	bl	10000550 <HAL_GetTick>
10004712:	4602      	mov	r2, r0
10004714:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
10004718:	1ad3      	subs	r3, r2, r3
1000471a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000471e:	d901      	bls.n	10004724 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      {
        return HAL_TIMEOUT;
10004720:	2303      	movs	r3, #3
10004722:	e045      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004728:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
1000472c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004734:	d1eb      	bne.n	1000470e <HAL_RCCEx_PeriphCLKConfig+0x1ab6>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10004736:	f507 730e 	add.w	r3, r7, #568	@ 0x238
1000473a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000473e:	681b      	ldr	r3, [r3, #0]
10004740:	e9d3 2300 	ldrd	r2, r3, [r3]
10004744:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10004748:	603b      	str	r3, [r7, #0]
1000474a:	2300      	movs	r3, #0
1000474c:	607b      	str	r3, [r7, #4]
1000474e:	e9d7 1200 	ldrd	r1, r2, [r7]
10004752:	460b      	mov	r3, r1
10004754:	4313      	orrs	r3, r2
10004756:	d02a      	beq.n	100047ae <HAL_RCCEx_PeriphCLKConfig+0x1b56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10004758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000475c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10004760:	f023 0201 	bic.w	r2, r3, #1
10004764:	f507 730e 	add.w	r3, r7, #568	@ 0x238
10004768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000476c:	681b      	ldr	r3, [r3, #0]
1000476e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10004772:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004776:	4313      	orrs	r3, r2
10004778:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000477c:	f7fb fee8 	bl	10000550 <HAL_GetTick>
10004780:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004784:	e00a      	b.n	1000479c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004786:	f7fb fee3 	bl	10000550 <HAL_GetTick>
1000478a:	4602      	mov	r2, r0
1000478c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
10004790:	1ad3      	subs	r3, r2, r3
10004792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004796:	d901      	bls.n	1000479c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
      {
        return HAL_TIMEOUT;
10004798:	2303      	movs	r3, #3
1000479a:	e009      	b.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000479c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047a0:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
100047a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100047ac:	d1eb      	bne.n	10004786 <HAL_RCCEx_PeriphCLKConfig+0x1b2e>
      }
    }
  }

  return HAL_OK;
100047ae:	2300      	movs	r3, #0
}
100047b0:	4618      	mov	r0, r3
100047b2:	f507 770e 	add.w	r7, r7, #568	@ 0x238
100047b6:	46bd      	mov	sp, r7
100047b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100047bc:	50001000 	.word	0x50001000
100047c0:	7fecfdc0 	.word	0x7fecfdc0

100047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100047c4:	b580      	push	{r7, lr}
100047c6:	b082      	sub	sp, #8
100047c8:	af00      	add	r7, sp, #0
100047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100047cc:	687b      	ldr	r3, [r7, #4]
100047ce:	2b00      	cmp	r3, #0
100047d0:	d101      	bne.n	100047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100047d2:	2301      	movs	r3, #1
100047d4:	e042      	b.n	1000485c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100047d6:	687b      	ldr	r3, [r7, #4]
100047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
100047dc:	2b00      	cmp	r3, #0
100047de:	d106      	bne.n	100047ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100047e0:	687b      	ldr	r3, [r7, #4]
100047e2:	2200      	movs	r2, #0
100047e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100047e8:	6878      	ldr	r0, [r7, #4]
100047ea:	f7fb fd95 	bl	10000318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100047ee:	687b      	ldr	r3, [r7, #4]
100047f0:	2224      	movs	r2, #36	@ 0x24
100047f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
100047f6:	687b      	ldr	r3, [r7, #4]
100047f8:	681b      	ldr	r3, [r3, #0]
100047fa:	681a      	ldr	r2, [r3, #0]
100047fc:	687b      	ldr	r3, [r7, #4]
100047fe:	681b      	ldr	r3, [r3, #0]
10004800:	f022 0201 	bic.w	r2, r2, #1
10004804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10004806:	6878      	ldr	r0, [r7, #4]
10004808:	f000 f82c 	bl	10004864 <UART_SetConfig>
1000480c:	4603      	mov	r3, r0
1000480e:	2b01      	cmp	r3, #1
10004810:	d101      	bne.n	10004816 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10004812:	2301      	movs	r3, #1
10004814:	e022      	b.n	1000485c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10004816:	687b      	ldr	r3, [r7, #4]
10004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000481a:	2b00      	cmp	r3, #0
1000481c:	d002      	beq.n	10004824 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
1000481e:	6878      	ldr	r0, [r7, #4]
10004820:	f001 f8c6 	bl	100059b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10004824:	687b      	ldr	r3, [r7, #4]
10004826:	681b      	ldr	r3, [r3, #0]
10004828:	685a      	ldr	r2, [r3, #4]
1000482a:	687b      	ldr	r3, [r7, #4]
1000482c:	681b      	ldr	r3, [r3, #0]
1000482e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
10004832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10004834:	687b      	ldr	r3, [r7, #4]
10004836:	681b      	ldr	r3, [r3, #0]
10004838:	689a      	ldr	r2, [r3, #8]
1000483a:	687b      	ldr	r3, [r7, #4]
1000483c:	681b      	ldr	r3, [r3, #0]
1000483e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
10004842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10004844:	687b      	ldr	r3, [r7, #4]
10004846:	681b      	ldr	r3, [r3, #0]
10004848:	681a      	ldr	r2, [r3, #0]
1000484a:	687b      	ldr	r3, [r7, #4]
1000484c:	681b      	ldr	r3, [r3, #0]
1000484e:	f042 0201 	orr.w	r2, r2, #1
10004852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10004854:	6878      	ldr	r0, [r7, #4]
10004856:	f001 f94d 	bl	10005af4 <UART_CheckIdleState>
1000485a:	4603      	mov	r3, r0
}
1000485c:	4618      	mov	r0, r3
1000485e:	3708      	adds	r7, #8
10004860:	46bd      	mov	sp, r7
10004862:	bd80      	pop	{r7, pc}

10004864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10004864:	b580      	push	{r7, lr}
10004866:	b08e      	sub	sp, #56	@ 0x38
10004868:	af00      	add	r7, sp, #0
1000486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
1000486c:	2300      	movs	r3, #0
1000486e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10004870:	2300      	movs	r3, #0
10004872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10004876:	687b      	ldr	r3, [r7, #4]
10004878:	689a      	ldr	r2, [r3, #8]
1000487a:	687b      	ldr	r3, [r7, #4]
1000487c:	691b      	ldr	r3, [r3, #16]
1000487e:	431a      	orrs	r2, r3
10004880:	687b      	ldr	r3, [r7, #4]
10004882:	695b      	ldr	r3, [r3, #20]
10004884:	431a      	orrs	r2, r3
10004886:	687b      	ldr	r3, [r7, #4]
10004888:	69db      	ldr	r3, [r3, #28]
1000488a:	4313      	orrs	r3, r2
1000488c:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
1000488e:	687b      	ldr	r3, [r7, #4]
10004890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10004892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10004894:	4313      	orrs	r3, r2
10004896:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10004898:	687b      	ldr	r3, [r7, #4]
1000489a:	681b      	ldr	r3, [r3, #0]
1000489c:	681a      	ldr	r2, [r3, #0]
1000489e:	4bb1      	ldr	r3, [pc, #708]	@ (10004b64 <UART_SetConfig+0x300>)
100048a0:	4013      	ands	r3, r2
100048a2:	687a      	ldr	r2, [r7, #4]
100048a4:	6812      	ldr	r2, [r2, #0]
100048a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100048a8:	430b      	orrs	r3, r1
100048aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
100048ac:	687b      	ldr	r3, [r7, #4]
100048ae:	681b      	ldr	r3, [r3, #0]
100048b0:	685b      	ldr	r3, [r3, #4]
100048b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
100048b6:	687b      	ldr	r3, [r7, #4]
100048b8:	68da      	ldr	r2, [r3, #12]
100048ba:	687b      	ldr	r3, [r7, #4]
100048bc:	681b      	ldr	r3, [r3, #0]
100048be:	430a      	orrs	r2, r1
100048c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
100048c2:	687b      	ldr	r3, [r7, #4]
100048c4:	699b      	ldr	r3, [r3, #24]
100048c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tmpreg |= huart->Init.OneBitSampling;
100048c8:	687b      	ldr	r3, [r7, #4]
100048ca:	6a1b      	ldr	r3, [r3, #32]
100048cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100048ce:	4313      	orrs	r3, r2
100048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
100048d2:	687b      	ldr	r3, [r7, #4]
100048d4:	681b      	ldr	r3, [r3, #0]
100048d6:	689b      	ldr	r3, [r3, #8]
100048d8:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
100048dc:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
100048e0:	687a      	ldr	r2, [r7, #4]
100048e2:	6812      	ldr	r2, [r2, #0]
100048e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100048e6:	430b      	orrs	r3, r1
100048e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
100048ea:	687b      	ldr	r3, [r7, #4]
100048ec:	681b      	ldr	r3, [r3, #0]
100048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100048f0:	f023 010f 	bic.w	r1, r3, #15
100048f4:	687b      	ldr	r3, [r7, #4]
100048f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100048f8:	687b      	ldr	r3, [r7, #4]
100048fa:	681b      	ldr	r3, [r3, #0]
100048fc:	430a      	orrs	r2, r1
100048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10004900:	687b      	ldr	r3, [r7, #4]
10004902:	681b      	ldr	r3, [r3, #0]
10004904:	f1b3 4fb8 	cmp.w	r3, #1543503872	@ 0x5c000000
10004908:	d132      	bne.n	10004970 <UART_SetConfig+0x10c>
1000490a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000490e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10004912:	f003 0307 	and.w	r3, r3, #7
10004916:	2b05      	cmp	r3, #5
10004918:	d826      	bhi.n	10004968 <UART_SetConfig+0x104>
1000491a:	a201      	add	r2, pc, #4	@ (adr r2, 10004920 <UART_SetConfig+0xbc>)
1000491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004920:	10004939 	.word	0x10004939
10004924:	10004941 	.word	0x10004941
10004928:	10004949 	.word	0x10004949
1000492c:	10004951 	.word	0x10004951
10004930:	10004959 	.word	0x10004959
10004934:	10004961 	.word	0x10004961
10004938:	2302      	movs	r3, #2
1000493a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000493e:	e184      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004940:	2304      	movs	r3, #4
10004942:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004946:	e180      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004948:	2310      	movs	r3, #16
1000494a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000494e:	e17c      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004950:	2320      	movs	r3, #32
10004952:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004956:	e178      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004958:	2308      	movs	r3, #8
1000495a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000495e:	e174      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004960:	2340      	movs	r3, #64	@ 0x40
10004962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004966:	e170      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004968:	2380      	movs	r3, #128	@ 0x80
1000496a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000496e:	e16c      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004970:	687b      	ldr	r3, [r7, #4]
10004972:	681b      	ldr	r3, [r3, #0]
10004974:	4a7c      	ldr	r2, [pc, #496]	@ (10004b68 <UART_SetConfig+0x304>)
10004976:	4293      	cmp	r3, r2
10004978:	d12c      	bne.n	100049d4 <UART_SetConfig+0x170>
1000497a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000497e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10004982:	f003 0307 	and.w	r3, r3, #7
10004986:	2b04      	cmp	r3, #4
10004988:	d820      	bhi.n	100049cc <UART_SetConfig+0x168>
1000498a:	a201      	add	r2, pc, #4	@ (adr r2, 10004990 <UART_SetConfig+0x12c>)
1000498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004990:	100049a5 	.word	0x100049a5
10004994:	100049ad 	.word	0x100049ad
10004998:	100049b5 	.word	0x100049b5
1000499c:	100049bd 	.word	0x100049bd
100049a0:	100049c5 	.word	0x100049c5
100049a4:	2300      	movs	r3, #0
100049a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049aa:	e14e      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049ac:	2308      	movs	r3, #8
100049ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049b2:	e14a      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049b4:	2310      	movs	r3, #16
100049b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049ba:	e146      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049bc:	2320      	movs	r3, #32
100049be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049c2:	e142      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049c4:	2340      	movs	r3, #64	@ 0x40
100049c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049ca:	e13e      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049cc:	2380      	movs	r3, #128	@ 0x80
100049ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100049d2:	e13a      	b.n	10004c4a <UART_SetConfig+0x3e6>
100049d4:	687b      	ldr	r3, [r7, #4]
100049d6:	681b      	ldr	r3, [r3, #0]
100049d8:	4a64      	ldr	r2, [pc, #400]	@ (10004b6c <UART_SetConfig+0x308>)
100049da:	4293      	cmp	r3, r2
100049dc:	d12c      	bne.n	10004a38 <UART_SetConfig+0x1d4>
100049de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
100049e6:	f003 0307 	and.w	r3, r3, #7
100049ea:	2b04      	cmp	r3, #4
100049ec:	d820      	bhi.n	10004a30 <UART_SetConfig+0x1cc>
100049ee:	a201      	add	r2, pc, #4	@ (adr r2, 100049f4 <UART_SetConfig+0x190>)
100049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100049f4:	10004a09 	.word	0x10004a09
100049f8:	10004a11 	.word	0x10004a11
100049fc:	10004a19 	.word	0x10004a19
10004a00:	10004a21 	.word	0x10004a21
10004a04:	10004a29 	.word	0x10004a29
10004a08:	2300      	movs	r3, #0
10004a0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a0e:	e11c      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a10:	2308      	movs	r3, #8
10004a12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a16:	e118      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a18:	2310      	movs	r3, #16
10004a1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a1e:	e114      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a20:	2320      	movs	r3, #32
10004a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a26:	e110      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a28:	2340      	movs	r3, #64	@ 0x40
10004a2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a2e:	e10c      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a30:	2380      	movs	r3, #128	@ 0x80
10004a32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a36:	e108      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a38:	687b      	ldr	r3, [r7, #4]
10004a3a:	681b      	ldr	r3, [r3, #0]
10004a3c:	4a4c      	ldr	r2, [pc, #304]	@ (10004b70 <UART_SetConfig+0x30c>)
10004a3e:	4293      	cmp	r3, r2
10004a40:	d12c      	bne.n	10004a9c <UART_SetConfig+0x238>
10004a42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a46:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10004a4a:	f003 0307 	and.w	r3, r3, #7
10004a4e:	2b04      	cmp	r3, #4
10004a50:	d820      	bhi.n	10004a94 <UART_SetConfig+0x230>
10004a52:	a201      	add	r2, pc, #4	@ (adr r2, 10004a58 <UART_SetConfig+0x1f4>)
10004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004a58:	10004a6d 	.word	0x10004a6d
10004a5c:	10004a75 	.word	0x10004a75
10004a60:	10004a7d 	.word	0x10004a7d
10004a64:	10004a85 	.word	0x10004a85
10004a68:	10004a8d 	.word	0x10004a8d
10004a6c:	2300      	movs	r3, #0
10004a6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a72:	e0ea      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a74:	2308      	movs	r3, #8
10004a76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a7a:	e0e6      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a7c:	2310      	movs	r3, #16
10004a7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a82:	e0e2      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a84:	2320      	movs	r3, #32
10004a86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a8a:	e0de      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a8c:	2340      	movs	r3, #64	@ 0x40
10004a8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a92:	e0da      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a94:	2380      	movs	r3, #128	@ 0x80
10004a96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004a9a:	e0d6      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004a9c:	687b      	ldr	r3, [r7, #4]
10004a9e:	681b      	ldr	r3, [r3, #0]
10004aa0:	4a34      	ldr	r2, [pc, #208]	@ (10004b74 <UART_SetConfig+0x310>)
10004aa2:	4293      	cmp	r3, r2
10004aa4:	d12c      	bne.n	10004b00 <UART_SetConfig+0x29c>
10004aa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004aaa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10004aae:	f003 0307 	and.w	r3, r3, #7
10004ab2:	2b04      	cmp	r3, #4
10004ab4:	d820      	bhi.n	10004af8 <UART_SetConfig+0x294>
10004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 10004abc <UART_SetConfig+0x258>)
10004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004abc:	10004ad1 	.word	0x10004ad1
10004ac0:	10004ad9 	.word	0x10004ad9
10004ac4:	10004ae1 	.word	0x10004ae1
10004ac8:	10004ae9 	.word	0x10004ae9
10004acc:	10004af1 	.word	0x10004af1
10004ad0:	2300      	movs	r3, #0
10004ad2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004ad6:	e0b8      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004ad8:	2308      	movs	r3, #8
10004ada:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004ade:	e0b4      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004ae0:	2310      	movs	r3, #16
10004ae2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004ae6:	e0b0      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004ae8:	2320      	movs	r3, #32
10004aea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004aee:	e0ac      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004af0:	2340      	movs	r3, #64	@ 0x40
10004af2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004af6:	e0a8      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004af8:	2380      	movs	r3, #128	@ 0x80
10004afa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004afe:	e0a4      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b00:	687b      	ldr	r3, [r7, #4]
10004b02:	681b      	ldr	r3, [r3, #0]
10004b04:	4a1c      	ldr	r2, [pc, #112]	@ (10004b78 <UART_SetConfig+0x314>)
10004b06:	4293      	cmp	r3, r2
10004b08:	d138      	bne.n	10004b7c <UART_SetConfig+0x318>
10004b0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b0e:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10004b12:	f003 0307 	and.w	r3, r3, #7
10004b16:	2b04      	cmp	r3, #4
10004b18:	d820      	bhi.n	10004b5c <UART_SetConfig+0x2f8>
10004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 10004b20 <UART_SetConfig+0x2bc>)
10004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004b20:	10004b35 	.word	0x10004b35
10004b24:	10004b3d 	.word	0x10004b3d
10004b28:	10004b45 	.word	0x10004b45
10004b2c:	10004b4d 	.word	0x10004b4d
10004b30:	10004b55 	.word	0x10004b55
10004b34:	2301      	movs	r3, #1
10004b36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b3a:	e086      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b3c:	2308      	movs	r3, #8
10004b3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b42:	e082      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b44:	2310      	movs	r3, #16
10004b46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b4a:	e07e      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b4c:	2320      	movs	r3, #32
10004b4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b52:	e07a      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b54:	2340      	movs	r3, #64	@ 0x40
10004b56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b5a:	e076      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b5c:	2380      	movs	r3, #128	@ 0x80
10004b5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004b62:	e072      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004b64:	cfff69f3 	.word	0xcfff69f3
10004b68:	4000e000 	.word	0x4000e000
10004b6c:	4000f000 	.word	0x4000f000
10004b70:	40010000 	.word	0x40010000
10004b74:	40011000 	.word	0x40011000
10004b78:	44003000 	.word	0x44003000
10004b7c:	687b      	ldr	r3, [r7, #4]
10004b7e:	681b      	ldr	r3, [r3, #0]
10004b80:	4aab      	ldr	r2, [pc, #684]	@ (10004e30 <UART_SetConfig+0x5cc>)
10004b82:	4293      	cmp	r3, r2
10004b84:	d12c      	bne.n	10004be0 <UART_SetConfig+0x37c>
10004b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b8a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10004b8e:	f003 0307 	and.w	r3, r3, #7
10004b92:	2b04      	cmp	r3, #4
10004b94:	d820      	bhi.n	10004bd8 <UART_SetConfig+0x374>
10004b96:	a201      	add	r2, pc, #4	@ (adr r2, 10004b9c <UART_SetConfig+0x338>)
10004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004b9c:	10004bb1 	.word	0x10004bb1
10004ba0:	10004bb9 	.word	0x10004bb9
10004ba4:	10004bc1 	.word	0x10004bc1
10004ba8:	10004bc9 	.word	0x10004bc9
10004bac:	10004bd1 	.word	0x10004bd1
10004bb0:	2300      	movs	r3, #0
10004bb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bb6:	e048      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004bb8:	2308      	movs	r3, #8
10004bba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bbe:	e044      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004bc0:	2310      	movs	r3, #16
10004bc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bc6:	e040      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004bc8:	2320      	movs	r3, #32
10004bca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bce:	e03c      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004bd0:	2340      	movs	r3, #64	@ 0x40
10004bd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bd6:	e038      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004bd8:	2380      	movs	r3, #128	@ 0x80
10004bda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004bde:	e034      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004be0:	687b      	ldr	r3, [r7, #4]
10004be2:	681b      	ldr	r3, [r3, #0]
10004be4:	4a93      	ldr	r2, [pc, #588]	@ (10004e34 <UART_SetConfig+0x5d0>)
10004be6:	4293      	cmp	r3, r2
10004be8:	d12c      	bne.n	10004c44 <UART_SetConfig+0x3e0>
10004bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10004bf2:	f003 0307 	and.w	r3, r3, #7
10004bf6:	2b04      	cmp	r3, #4
10004bf8:	d820      	bhi.n	10004c3c <UART_SetConfig+0x3d8>
10004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 10004c00 <UART_SetConfig+0x39c>)
10004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004c00:	10004c15 	.word	0x10004c15
10004c04:	10004c1d 	.word	0x10004c1d
10004c08:	10004c25 	.word	0x10004c25
10004c0c:	10004c2d 	.word	0x10004c2d
10004c10:	10004c35 	.word	0x10004c35
10004c14:	2300      	movs	r3, #0
10004c16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c1a:	e016      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c1c:	2308      	movs	r3, #8
10004c1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c22:	e012      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c24:	2310      	movs	r3, #16
10004c26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c2a:	e00e      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c2c:	2320      	movs	r3, #32
10004c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c32:	e00a      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c34:	2340      	movs	r3, #64	@ 0x40
10004c36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c3a:	e006      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c3c:	2380      	movs	r3, #128	@ 0x80
10004c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10004c42:	e002      	b.n	10004c4a <UART_SetConfig+0x3e6>
10004c44:	2380      	movs	r3, #128	@ 0x80
10004c46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10004c4a:	687b      	ldr	r3, [r7, #4]
10004c4c:	69db      	ldr	r3, [r3, #28]
10004c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
10004c52:	f040 8354 	bne.w	100052fe <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
10004c56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10004c5a:	2b20      	cmp	r3, #32
10004c5c:	dc4a      	bgt.n	10004cf4 <UART_SetConfig+0x490>
10004c5e:	2b00      	cmp	r3, #0
10004c60:	f2c0 832b 	blt.w	100052ba <UART_SetConfig+0xa56>
10004c64:	2b20      	cmp	r3, #32
10004c66:	f200 8328 	bhi.w	100052ba <UART_SetConfig+0xa56>
10004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 10004c70 <UART_SetConfig+0x40c>)
10004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004c70:	10004cfd 	.word	0x10004cfd
10004c74:	10004db5 	.word	0x10004db5
10004c78:	10004e75 	.word	0x10004e75
10004c7c:	100052bb 	.word	0x100052bb
10004c80:	10004f2d 	.word	0x10004f2d
10004c84:	100052bb 	.word	0x100052bb
10004c88:	100052bb 	.word	0x100052bb
10004c8c:	100052bb 	.word	0x100052bb
10004c90:	10004fe9 	.word	0x10004fe9
10004c94:	100052bb 	.word	0x100052bb
10004c98:	100052bb 	.word	0x100052bb
10004c9c:	100052bb 	.word	0x100052bb
10004ca0:	100052bb 	.word	0x100052bb
10004ca4:	100052bb 	.word	0x100052bb
10004ca8:	100052bb 	.word	0x100052bb
10004cac:	100052bb 	.word	0x100052bb
10004cb0:	100050a5 	.word	0x100050a5
10004cb4:	100052bb 	.word	0x100052bb
10004cb8:	100052bb 	.word	0x100052bb
10004cbc:	100052bb 	.word	0x100052bb
10004cc0:	100052bb 	.word	0x100052bb
10004cc4:	100052bb 	.word	0x100052bb
10004cc8:	100052bb 	.word	0x100052bb
10004ccc:	100052bb 	.word	0x100052bb
10004cd0:	100052bb 	.word	0x100052bb
10004cd4:	100052bb 	.word	0x100052bb
10004cd8:	100052bb 	.word	0x100052bb
10004cdc:	100052bb 	.word	0x100052bb
10004ce0:	100052bb 	.word	0x100052bb
10004ce4:	100052bb 	.word	0x100052bb
10004ce8:	100052bb 	.word	0x100052bb
10004cec:	100052bb 	.word	0x100052bb
10004cf0:	10005157 	.word	0x10005157
10004cf4:	2b40      	cmp	r3, #64	@ 0x40
10004cf6:	f000 8287 	beq.w	10005208 <UART_SetConfig+0x9a4>
10004cfa:	e2de      	b.n	100052ba <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10004cfc:	f7fd fa44 	bl	10002188 <HAL_RCC_GetPCLK1Freq>
10004d00:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004d02:	687b      	ldr	r3, [r7, #4]
10004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d06:	2b00      	cmp	r3, #0
10004d08:	d044      	beq.n	10004d94 <UART_SetConfig+0x530>
10004d0a:	687b      	ldr	r3, [r7, #4]
10004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d0e:	2b01      	cmp	r3, #1
10004d10:	d03e      	beq.n	10004d90 <UART_SetConfig+0x52c>
10004d12:	687b      	ldr	r3, [r7, #4]
10004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d16:	2b02      	cmp	r3, #2
10004d18:	d038      	beq.n	10004d8c <UART_SetConfig+0x528>
10004d1a:	687b      	ldr	r3, [r7, #4]
10004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d1e:	2b03      	cmp	r3, #3
10004d20:	d032      	beq.n	10004d88 <UART_SetConfig+0x524>
10004d22:	687b      	ldr	r3, [r7, #4]
10004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d26:	2b04      	cmp	r3, #4
10004d28:	d02c      	beq.n	10004d84 <UART_SetConfig+0x520>
10004d2a:	687b      	ldr	r3, [r7, #4]
10004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d2e:	2b05      	cmp	r3, #5
10004d30:	d026      	beq.n	10004d80 <UART_SetConfig+0x51c>
10004d32:	687b      	ldr	r3, [r7, #4]
10004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d36:	2b06      	cmp	r3, #6
10004d38:	d020      	beq.n	10004d7c <UART_SetConfig+0x518>
10004d3a:	687b      	ldr	r3, [r7, #4]
10004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d3e:	2b07      	cmp	r3, #7
10004d40:	d01a      	beq.n	10004d78 <UART_SetConfig+0x514>
10004d42:	687b      	ldr	r3, [r7, #4]
10004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d46:	2b08      	cmp	r3, #8
10004d48:	d014      	beq.n	10004d74 <UART_SetConfig+0x510>
10004d4a:	687b      	ldr	r3, [r7, #4]
10004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d4e:	2b09      	cmp	r3, #9
10004d50:	d00e      	beq.n	10004d70 <UART_SetConfig+0x50c>
10004d52:	687b      	ldr	r3, [r7, #4]
10004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d56:	2b0a      	cmp	r3, #10
10004d58:	d008      	beq.n	10004d6c <UART_SetConfig+0x508>
10004d5a:	687b      	ldr	r3, [r7, #4]
10004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d5e:	2b0b      	cmp	r3, #11
10004d60:	d102      	bne.n	10004d68 <UART_SetConfig+0x504>
10004d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
10004d66:	e016      	b.n	10004d96 <UART_SetConfig+0x532>
10004d68:	2301      	movs	r3, #1
10004d6a:	e014      	b.n	10004d96 <UART_SetConfig+0x532>
10004d6c:	2380      	movs	r3, #128	@ 0x80
10004d6e:	e012      	b.n	10004d96 <UART_SetConfig+0x532>
10004d70:	2340      	movs	r3, #64	@ 0x40
10004d72:	e010      	b.n	10004d96 <UART_SetConfig+0x532>
10004d74:	2320      	movs	r3, #32
10004d76:	e00e      	b.n	10004d96 <UART_SetConfig+0x532>
10004d78:	2310      	movs	r3, #16
10004d7a:	e00c      	b.n	10004d96 <UART_SetConfig+0x532>
10004d7c:	230c      	movs	r3, #12
10004d7e:	e00a      	b.n	10004d96 <UART_SetConfig+0x532>
10004d80:	230a      	movs	r3, #10
10004d82:	e008      	b.n	10004d96 <UART_SetConfig+0x532>
10004d84:	2308      	movs	r3, #8
10004d86:	e006      	b.n	10004d96 <UART_SetConfig+0x532>
10004d88:	2306      	movs	r3, #6
10004d8a:	e004      	b.n	10004d96 <UART_SetConfig+0x532>
10004d8c:	2304      	movs	r3, #4
10004d8e:	e002      	b.n	10004d96 <UART_SetConfig+0x532>
10004d90:	2302      	movs	r3, #2
10004d92:	e000      	b.n	10004d96 <UART_SetConfig+0x532>
10004d94:	2301      	movs	r3, #1
10004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004d98:	fbb2 f3f3 	udiv	r3, r2, r3
10004d9c:	005a      	lsls	r2, r3, #1
10004d9e:	687b      	ldr	r3, [r7, #4]
10004da0:	685b      	ldr	r3, [r3, #4]
10004da2:	085b      	lsrs	r3, r3, #1
10004da4:	441a      	add	r2, r3
10004da6:	687b      	ldr	r3, [r7, #4]
10004da8:	685b      	ldr	r3, [r3, #4]
10004daa:	fbb2 f3f3 	udiv	r3, r2, r3
10004dae:	b29b      	uxth	r3, r3
10004db0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10004db2:	e286      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10004db4:	f7fd fa03 	bl	100021be <HAL_RCC_GetPCLK2Freq>
10004db8:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004dba:	687b      	ldr	r3, [r7, #4]
10004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dbe:	2b00      	cmp	r3, #0
10004dc0:	d048      	beq.n	10004e54 <UART_SetConfig+0x5f0>
10004dc2:	687b      	ldr	r3, [r7, #4]
10004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dc6:	2b01      	cmp	r3, #1
10004dc8:	d042      	beq.n	10004e50 <UART_SetConfig+0x5ec>
10004dca:	687b      	ldr	r3, [r7, #4]
10004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dce:	2b02      	cmp	r3, #2
10004dd0:	d03c      	beq.n	10004e4c <UART_SetConfig+0x5e8>
10004dd2:	687b      	ldr	r3, [r7, #4]
10004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dd6:	2b03      	cmp	r3, #3
10004dd8:	d036      	beq.n	10004e48 <UART_SetConfig+0x5e4>
10004dda:	687b      	ldr	r3, [r7, #4]
10004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dde:	2b04      	cmp	r3, #4
10004de0:	d030      	beq.n	10004e44 <UART_SetConfig+0x5e0>
10004de2:	687b      	ldr	r3, [r7, #4]
10004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004de6:	2b05      	cmp	r3, #5
10004de8:	d02a      	beq.n	10004e40 <UART_SetConfig+0x5dc>
10004dea:	687b      	ldr	r3, [r7, #4]
10004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dee:	2b06      	cmp	r3, #6
10004df0:	d024      	beq.n	10004e3c <UART_SetConfig+0x5d8>
10004df2:	687b      	ldr	r3, [r7, #4]
10004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004df6:	2b07      	cmp	r3, #7
10004df8:	d01e      	beq.n	10004e38 <UART_SetConfig+0x5d4>
10004dfa:	687b      	ldr	r3, [r7, #4]
10004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004dfe:	2b08      	cmp	r3, #8
10004e00:	d014      	beq.n	10004e2c <UART_SetConfig+0x5c8>
10004e02:	687b      	ldr	r3, [r7, #4]
10004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e06:	2b09      	cmp	r3, #9
10004e08:	d00e      	beq.n	10004e28 <UART_SetConfig+0x5c4>
10004e0a:	687b      	ldr	r3, [r7, #4]
10004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e0e:	2b0a      	cmp	r3, #10
10004e10:	d008      	beq.n	10004e24 <UART_SetConfig+0x5c0>
10004e12:	687b      	ldr	r3, [r7, #4]
10004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e16:	2b0b      	cmp	r3, #11
10004e18:	d102      	bne.n	10004e20 <UART_SetConfig+0x5bc>
10004e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
10004e1e:	e01a      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e20:	2301      	movs	r3, #1
10004e22:	e018      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e24:	2380      	movs	r3, #128	@ 0x80
10004e26:	e016      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e28:	2340      	movs	r3, #64	@ 0x40
10004e2a:	e014      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e2c:	2320      	movs	r3, #32
10004e2e:	e012      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e30:	40018000 	.word	0x40018000
10004e34:	40019000 	.word	0x40019000
10004e38:	2310      	movs	r3, #16
10004e3a:	e00c      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e3c:	230c      	movs	r3, #12
10004e3e:	e00a      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e40:	230a      	movs	r3, #10
10004e42:	e008      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e44:	2308      	movs	r3, #8
10004e46:	e006      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e48:	2306      	movs	r3, #6
10004e4a:	e004      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e4c:	2304      	movs	r3, #4
10004e4e:	e002      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e50:	2302      	movs	r3, #2
10004e52:	e000      	b.n	10004e56 <UART_SetConfig+0x5f2>
10004e54:	2301      	movs	r3, #1
10004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004e58:	fbb2 f3f3 	udiv	r3, r2, r3
10004e5c:	005a      	lsls	r2, r3, #1
10004e5e:	687b      	ldr	r3, [r7, #4]
10004e60:	685b      	ldr	r3, [r3, #4]
10004e62:	085b      	lsrs	r3, r3, #1
10004e64:	441a      	add	r2, r3
10004e66:	687b      	ldr	r3, [r7, #4]
10004e68:	685b      	ldr	r3, [r3, #4]
10004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
10004e6e:	b29b      	uxth	r3, r3
10004e70:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10004e72:	e226      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10004e74:	f7fd f9be 	bl	100021f4 <HAL_RCC_GetPCLK5Freq>
10004e78:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004e7a:	687b      	ldr	r3, [r7, #4]
10004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e7e:	2b00      	cmp	r3, #0
10004e80:	d044      	beq.n	10004f0c <UART_SetConfig+0x6a8>
10004e82:	687b      	ldr	r3, [r7, #4]
10004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e86:	2b01      	cmp	r3, #1
10004e88:	d03e      	beq.n	10004f08 <UART_SetConfig+0x6a4>
10004e8a:	687b      	ldr	r3, [r7, #4]
10004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e8e:	2b02      	cmp	r3, #2
10004e90:	d038      	beq.n	10004f04 <UART_SetConfig+0x6a0>
10004e92:	687b      	ldr	r3, [r7, #4]
10004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e96:	2b03      	cmp	r3, #3
10004e98:	d032      	beq.n	10004f00 <UART_SetConfig+0x69c>
10004e9a:	687b      	ldr	r3, [r7, #4]
10004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004e9e:	2b04      	cmp	r3, #4
10004ea0:	d02c      	beq.n	10004efc <UART_SetConfig+0x698>
10004ea2:	687b      	ldr	r3, [r7, #4]
10004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ea6:	2b05      	cmp	r3, #5
10004ea8:	d026      	beq.n	10004ef8 <UART_SetConfig+0x694>
10004eaa:	687b      	ldr	r3, [r7, #4]
10004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004eae:	2b06      	cmp	r3, #6
10004eb0:	d020      	beq.n	10004ef4 <UART_SetConfig+0x690>
10004eb2:	687b      	ldr	r3, [r7, #4]
10004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004eb6:	2b07      	cmp	r3, #7
10004eb8:	d01a      	beq.n	10004ef0 <UART_SetConfig+0x68c>
10004eba:	687b      	ldr	r3, [r7, #4]
10004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ebe:	2b08      	cmp	r3, #8
10004ec0:	d014      	beq.n	10004eec <UART_SetConfig+0x688>
10004ec2:	687b      	ldr	r3, [r7, #4]
10004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ec6:	2b09      	cmp	r3, #9
10004ec8:	d00e      	beq.n	10004ee8 <UART_SetConfig+0x684>
10004eca:	687b      	ldr	r3, [r7, #4]
10004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ece:	2b0a      	cmp	r3, #10
10004ed0:	d008      	beq.n	10004ee4 <UART_SetConfig+0x680>
10004ed2:	687b      	ldr	r3, [r7, #4]
10004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ed6:	2b0b      	cmp	r3, #11
10004ed8:	d102      	bne.n	10004ee0 <UART_SetConfig+0x67c>
10004eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
10004ede:	e016      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ee0:	2301      	movs	r3, #1
10004ee2:	e014      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ee4:	2380      	movs	r3, #128	@ 0x80
10004ee6:	e012      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ee8:	2340      	movs	r3, #64	@ 0x40
10004eea:	e010      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004eec:	2320      	movs	r3, #32
10004eee:	e00e      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ef0:	2310      	movs	r3, #16
10004ef2:	e00c      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ef4:	230c      	movs	r3, #12
10004ef6:	e00a      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004ef8:	230a      	movs	r3, #10
10004efa:	e008      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004efc:	2308      	movs	r3, #8
10004efe:	e006      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004f00:	2306      	movs	r3, #6
10004f02:	e004      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004f04:	2304      	movs	r3, #4
10004f06:	e002      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004f08:	2302      	movs	r3, #2
10004f0a:	e000      	b.n	10004f0e <UART_SetConfig+0x6aa>
10004f0c:	2301      	movs	r3, #1
10004f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004f10:	fbb2 f3f3 	udiv	r3, r2, r3
10004f14:	005a      	lsls	r2, r3, #1
10004f16:	687b      	ldr	r3, [r7, #4]
10004f18:	685b      	ldr	r3, [r3, #4]
10004f1a:	085b      	lsrs	r3, r3, #1
10004f1c:	441a      	add	r2, r3
10004f1e:	687b      	ldr	r3, [r7, #4]
10004f20:	685b      	ldr	r3, [r3, #4]
10004f22:	fbb2 f3f3 	udiv	r3, r2, r3
10004f26:	b29b      	uxth	r3, r3
10004f28:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10004f2a:	e1ca      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10004f2c:	f107 0314 	add.w	r3, r7, #20
10004f30:	4618      	mov	r0, r3
10004f32:	f7fc ff27 	bl	10001d84 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004f36:	69ba      	ldr	r2, [r7, #24]
10004f38:	687b      	ldr	r3, [r7, #4]
10004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f3c:	2b00      	cmp	r3, #0
10004f3e:	d044      	beq.n	10004fca <UART_SetConfig+0x766>
10004f40:	687b      	ldr	r3, [r7, #4]
10004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f44:	2b01      	cmp	r3, #1
10004f46:	d03e      	beq.n	10004fc6 <UART_SetConfig+0x762>
10004f48:	687b      	ldr	r3, [r7, #4]
10004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f4c:	2b02      	cmp	r3, #2
10004f4e:	d038      	beq.n	10004fc2 <UART_SetConfig+0x75e>
10004f50:	687b      	ldr	r3, [r7, #4]
10004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f54:	2b03      	cmp	r3, #3
10004f56:	d032      	beq.n	10004fbe <UART_SetConfig+0x75a>
10004f58:	687b      	ldr	r3, [r7, #4]
10004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f5c:	2b04      	cmp	r3, #4
10004f5e:	d02c      	beq.n	10004fba <UART_SetConfig+0x756>
10004f60:	687b      	ldr	r3, [r7, #4]
10004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f64:	2b05      	cmp	r3, #5
10004f66:	d026      	beq.n	10004fb6 <UART_SetConfig+0x752>
10004f68:	687b      	ldr	r3, [r7, #4]
10004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f6c:	2b06      	cmp	r3, #6
10004f6e:	d020      	beq.n	10004fb2 <UART_SetConfig+0x74e>
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f74:	2b07      	cmp	r3, #7
10004f76:	d01a      	beq.n	10004fae <UART_SetConfig+0x74a>
10004f78:	687b      	ldr	r3, [r7, #4]
10004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f7c:	2b08      	cmp	r3, #8
10004f7e:	d014      	beq.n	10004faa <UART_SetConfig+0x746>
10004f80:	687b      	ldr	r3, [r7, #4]
10004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f84:	2b09      	cmp	r3, #9
10004f86:	d00e      	beq.n	10004fa6 <UART_SetConfig+0x742>
10004f88:	687b      	ldr	r3, [r7, #4]
10004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f8c:	2b0a      	cmp	r3, #10
10004f8e:	d008      	beq.n	10004fa2 <UART_SetConfig+0x73e>
10004f90:	687b      	ldr	r3, [r7, #4]
10004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f94:	2b0b      	cmp	r3, #11
10004f96:	d102      	bne.n	10004f9e <UART_SetConfig+0x73a>
10004f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
10004f9c:	e016      	b.n	10004fcc <UART_SetConfig+0x768>
10004f9e:	2301      	movs	r3, #1
10004fa0:	e014      	b.n	10004fcc <UART_SetConfig+0x768>
10004fa2:	2380      	movs	r3, #128	@ 0x80
10004fa4:	e012      	b.n	10004fcc <UART_SetConfig+0x768>
10004fa6:	2340      	movs	r3, #64	@ 0x40
10004fa8:	e010      	b.n	10004fcc <UART_SetConfig+0x768>
10004faa:	2320      	movs	r3, #32
10004fac:	e00e      	b.n	10004fcc <UART_SetConfig+0x768>
10004fae:	2310      	movs	r3, #16
10004fb0:	e00c      	b.n	10004fcc <UART_SetConfig+0x768>
10004fb2:	230c      	movs	r3, #12
10004fb4:	e00a      	b.n	10004fcc <UART_SetConfig+0x768>
10004fb6:	230a      	movs	r3, #10
10004fb8:	e008      	b.n	10004fcc <UART_SetConfig+0x768>
10004fba:	2308      	movs	r3, #8
10004fbc:	e006      	b.n	10004fcc <UART_SetConfig+0x768>
10004fbe:	2306      	movs	r3, #6
10004fc0:	e004      	b.n	10004fcc <UART_SetConfig+0x768>
10004fc2:	2304      	movs	r3, #4
10004fc4:	e002      	b.n	10004fcc <UART_SetConfig+0x768>
10004fc6:	2302      	movs	r3, #2
10004fc8:	e000      	b.n	10004fcc <UART_SetConfig+0x768>
10004fca:	2301      	movs	r3, #1
10004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
10004fd0:	005a      	lsls	r2, r3, #1
10004fd2:	687b      	ldr	r3, [r7, #4]
10004fd4:	685b      	ldr	r3, [r3, #4]
10004fd6:	085b      	lsrs	r3, r3, #1
10004fd8:	441a      	add	r2, r3
10004fda:	687b      	ldr	r3, [r7, #4]
10004fdc:	685b      	ldr	r3, [r3, #4]
10004fde:	fbb2 f3f3 	udiv	r3, r2, r3
10004fe2:	b29b      	uxth	r3, r3
10004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10004fe6:	e16c      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10004fe8:	f107 0308 	add.w	r3, r7, #8
10004fec:	4618      	mov	r0, r3
10004fee:	f7fc ffc3 	bl	10001f78 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004ff2:	68fa      	ldr	r2, [r7, #12]
10004ff4:	687b      	ldr	r3, [r7, #4]
10004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ff8:	2b00      	cmp	r3, #0
10004ffa:	d044      	beq.n	10005086 <UART_SetConfig+0x822>
10004ffc:	687b      	ldr	r3, [r7, #4]
10004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005000:	2b01      	cmp	r3, #1
10005002:	d03e      	beq.n	10005082 <UART_SetConfig+0x81e>
10005004:	687b      	ldr	r3, [r7, #4]
10005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005008:	2b02      	cmp	r3, #2
1000500a:	d038      	beq.n	1000507e <UART_SetConfig+0x81a>
1000500c:	687b      	ldr	r3, [r7, #4]
1000500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005010:	2b03      	cmp	r3, #3
10005012:	d032      	beq.n	1000507a <UART_SetConfig+0x816>
10005014:	687b      	ldr	r3, [r7, #4]
10005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005018:	2b04      	cmp	r3, #4
1000501a:	d02c      	beq.n	10005076 <UART_SetConfig+0x812>
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005020:	2b05      	cmp	r3, #5
10005022:	d026      	beq.n	10005072 <UART_SetConfig+0x80e>
10005024:	687b      	ldr	r3, [r7, #4]
10005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005028:	2b06      	cmp	r3, #6
1000502a:	d020      	beq.n	1000506e <UART_SetConfig+0x80a>
1000502c:	687b      	ldr	r3, [r7, #4]
1000502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005030:	2b07      	cmp	r3, #7
10005032:	d01a      	beq.n	1000506a <UART_SetConfig+0x806>
10005034:	687b      	ldr	r3, [r7, #4]
10005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005038:	2b08      	cmp	r3, #8
1000503a:	d014      	beq.n	10005066 <UART_SetConfig+0x802>
1000503c:	687b      	ldr	r3, [r7, #4]
1000503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005040:	2b09      	cmp	r3, #9
10005042:	d00e      	beq.n	10005062 <UART_SetConfig+0x7fe>
10005044:	687b      	ldr	r3, [r7, #4]
10005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005048:	2b0a      	cmp	r3, #10
1000504a:	d008      	beq.n	1000505e <UART_SetConfig+0x7fa>
1000504c:	687b      	ldr	r3, [r7, #4]
1000504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005050:	2b0b      	cmp	r3, #11
10005052:	d102      	bne.n	1000505a <UART_SetConfig+0x7f6>
10005054:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005058:	e016      	b.n	10005088 <UART_SetConfig+0x824>
1000505a:	2301      	movs	r3, #1
1000505c:	e014      	b.n	10005088 <UART_SetConfig+0x824>
1000505e:	2380      	movs	r3, #128	@ 0x80
10005060:	e012      	b.n	10005088 <UART_SetConfig+0x824>
10005062:	2340      	movs	r3, #64	@ 0x40
10005064:	e010      	b.n	10005088 <UART_SetConfig+0x824>
10005066:	2320      	movs	r3, #32
10005068:	e00e      	b.n	10005088 <UART_SetConfig+0x824>
1000506a:	2310      	movs	r3, #16
1000506c:	e00c      	b.n	10005088 <UART_SetConfig+0x824>
1000506e:	230c      	movs	r3, #12
10005070:	e00a      	b.n	10005088 <UART_SetConfig+0x824>
10005072:	230a      	movs	r3, #10
10005074:	e008      	b.n	10005088 <UART_SetConfig+0x824>
10005076:	2308      	movs	r3, #8
10005078:	e006      	b.n	10005088 <UART_SetConfig+0x824>
1000507a:	2306      	movs	r3, #6
1000507c:	e004      	b.n	10005088 <UART_SetConfig+0x824>
1000507e:	2304      	movs	r3, #4
10005080:	e002      	b.n	10005088 <UART_SetConfig+0x824>
10005082:	2302      	movs	r3, #2
10005084:	e000      	b.n	10005088 <UART_SetConfig+0x824>
10005086:	2301      	movs	r3, #1
10005088:	fbb2 f3f3 	udiv	r3, r2, r3
1000508c:	005a      	lsls	r2, r3, #1
1000508e:	687b      	ldr	r3, [r7, #4]
10005090:	685b      	ldr	r3, [r3, #4]
10005092:	085b      	lsrs	r3, r3, #1
10005094:	441a      	add	r2, r3
10005096:	687b      	ldr	r3, [r7, #4]
10005098:	685b      	ldr	r3, [r3, #4]
1000509a:	fbb2 f3f3 	udiv	r3, r2, r3
1000509e:	b29b      	uxth	r3, r3
100050a0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100050a2:	e10e      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100050a4:	687b      	ldr	r3, [r7, #4]
100050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050a8:	2b00      	cmp	r3, #0
100050aa:	d044      	beq.n	10005136 <UART_SetConfig+0x8d2>
100050ac:	687b      	ldr	r3, [r7, #4]
100050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050b0:	2b01      	cmp	r3, #1
100050b2:	d03e      	beq.n	10005132 <UART_SetConfig+0x8ce>
100050b4:	687b      	ldr	r3, [r7, #4]
100050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050b8:	2b02      	cmp	r3, #2
100050ba:	d038      	beq.n	1000512e <UART_SetConfig+0x8ca>
100050bc:	687b      	ldr	r3, [r7, #4]
100050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050c0:	2b03      	cmp	r3, #3
100050c2:	d032      	beq.n	1000512a <UART_SetConfig+0x8c6>
100050c4:	687b      	ldr	r3, [r7, #4]
100050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050c8:	2b04      	cmp	r3, #4
100050ca:	d02c      	beq.n	10005126 <UART_SetConfig+0x8c2>
100050cc:	687b      	ldr	r3, [r7, #4]
100050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050d0:	2b05      	cmp	r3, #5
100050d2:	d026      	beq.n	10005122 <UART_SetConfig+0x8be>
100050d4:	687b      	ldr	r3, [r7, #4]
100050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050d8:	2b06      	cmp	r3, #6
100050da:	d020      	beq.n	1000511e <UART_SetConfig+0x8ba>
100050dc:	687b      	ldr	r3, [r7, #4]
100050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050e0:	2b07      	cmp	r3, #7
100050e2:	d01a      	beq.n	1000511a <UART_SetConfig+0x8b6>
100050e4:	687b      	ldr	r3, [r7, #4]
100050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050e8:	2b08      	cmp	r3, #8
100050ea:	d014      	beq.n	10005116 <UART_SetConfig+0x8b2>
100050ec:	687b      	ldr	r3, [r7, #4]
100050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050f0:	2b09      	cmp	r3, #9
100050f2:	d00e      	beq.n	10005112 <UART_SetConfig+0x8ae>
100050f4:	687b      	ldr	r3, [r7, #4]
100050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100050f8:	2b0a      	cmp	r3, #10
100050fa:	d008      	beq.n	1000510e <UART_SetConfig+0x8aa>
100050fc:	687b      	ldr	r3, [r7, #4]
100050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005100:	2b0b      	cmp	r3, #11
10005102:	d102      	bne.n	1000510a <UART_SetConfig+0x8a6>
10005104:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005108:	e016      	b.n	10005138 <UART_SetConfig+0x8d4>
1000510a:	2301      	movs	r3, #1
1000510c:	e014      	b.n	10005138 <UART_SetConfig+0x8d4>
1000510e:	2380      	movs	r3, #128	@ 0x80
10005110:	e012      	b.n	10005138 <UART_SetConfig+0x8d4>
10005112:	2340      	movs	r3, #64	@ 0x40
10005114:	e010      	b.n	10005138 <UART_SetConfig+0x8d4>
10005116:	2320      	movs	r3, #32
10005118:	e00e      	b.n	10005138 <UART_SetConfig+0x8d4>
1000511a:	2310      	movs	r3, #16
1000511c:	e00c      	b.n	10005138 <UART_SetConfig+0x8d4>
1000511e:	230c      	movs	r3, #12
10005120:	e00a      	b.n	10005138 <UART_SetConfig+0x8d4>
10005122:	230a      	movs	r3, #10
10005124:	e008      	b.n	10005138 <UART_SetConfig+0x8d4>
10005126:	2308      	movs	r3, #8
10005128:	e006      	b.n	10005138 <UART_SetConfig+0x8d4>
1000512a:	2306      	movs	r3, #6
1000512c:	e004      	b.n	10005138 <UART_SetConfig+0x8d4>
1000512e:	2304      	movs	r3, #4
10005130:	e002      	b.n	10005138 <UART_SetConfig+0x8d4>
10005132:	2302      	movs	r3, #2
10005134:	e000      	b.n	10005138 <UART_SetConfig+0x8d4>
10005136:	2301      	movs	r3, #1
10005138:	4a9a      	ldr	r2, [pc, #616]	@ (100053a4 <UART_SetConfig+0xb40>)
1000513a:	fbb2 f3f3 	udiv	r3, r2, r3
1000513e:	005a      	lsls	r2, r3, #1
10005140:	687b      	ldr	r3, [r7, #4]
10005142:	685b      	ldr	r3, [r3, #4]
10005144:	085b      	lsrs	r3, r3, #1
10005146:	441a      	add	r2, r3
10005148:	687b      	ldr	r3, [r7, #4]
1000514a:	685b      	ldr	r3, [r3, #4]
1000514c:	fbb2 f3f3 	udiv	r3, r2, r3
10005150:	b29b      	uxth	r3, r3
10005152:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005154:	e0b5      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005156:	687b      	ldr	r3, [r7, #4]
10005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000515a:	2b00      	cmp	r3, #0
1000515c:	d044      	beq.n	100051e8 <UART_SetConfig+0x984>
1000515e:	687b      	ldr	r3, [r7, #4]
10005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005162:	2b01      	cmp	r3, #1
10005164:	d03e      	beq.n	100051e4 <UART_SetConfig+0x980>
10005166:	687b      	ldr	r3, [r7, #4]
10005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000516a:	2b02      	cmp	r3, #2
1000516c:	d038      	beq.n	100051e0 <UART_SetConfig+0x97c>
1000516e:	687b      	ldr	r3, [r7, #4]
10005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005172:	2b03      	cmp	r3, #3
10005174:	d032      	beq.n	100051dc <UART_SetConfig+0x978>
10005176:	687b      	ldr	r3, [r7, #4]
10005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000517a:	2b04      	cmp	r3, #4
1000517c:	d02c      	beq.n	100051d8 <UART_SetConfig+0x974>
1000517e:	687b      	ldr	r3, [r7, #4]
10005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005182:	2b05      	cmp	r3, #5
10005184:	d026      	beq.n	100051d4 <UART_SetConfig+0x970>
10005186:	687b      	ldr	r3, [r7, #4]
10005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000518a:	2b06      	cmp	r3, #6
1000518c:	d020      	beq.n	100051d0 <UART_SetConfig+0x96c>
1000518e:	687b      	ldr	r3, [r7, #4]
10005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005192:	2b07      	cmp	r3, #7
10005194:	d01a      	beq.n	100051cc <UART_SetConfig+0x968>
10005196:	687b      	ldr	r3, [r7, #4]
10005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000519a:	2b08      	cmp	r3, #8
1000519c:	d014      	beq.n	100051c8 <UART_SetConfig+0x964>
1000519e:	687b      	ldr	r3, [r7, #4]
100051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100051a2:	2b09      	cmp	r3, #9
100051a4:	d00e      	beq.n	100051c4 <UART_SetConfig+0x960>
100051a6:	687b      	ldr	r3, [r7, #4]
100051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100051aa:	2b0a      	cmp	r3, #10
100051ac:	d008      	beq.n	100051c0 <UART_SetConfig+0x95c>
100051ae:	687b      	ldr	r3, [r7, #4]
100051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100051b2:	2b0b      	cmp	r3, #11
100051b4:	d102      	bne.n	100051bc <UART_SetConfig+0x958>
100051b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
100051ba:	e016      	b.n	100051ea <UART_SetConfig+0x986>
100051bc:	2301      	movs	r3, #1
100051be:	e014      	b.n	100051ea <UART_SetConfig+0x986>
100051c0:	2380      	movs	r3, #128	@ 0x80
100051c2:	e012      	b.n	100051ea <UART_SetConfig+0x986>
100051c4:	2340      	movs	r3, #64	@ 0x40
100051c6:	e010      	b.n	100051ea <UART_SetConfig+0x986>
100051c8:	2320      	movs	r3, #32
100051ca:	e00e      	b.n	100051ea <UART_SetConfig+0x986>
100051cc:	2310      	movs	r3, #16
100051ce:	e00c      	b.n	100051ea <UART_SetConfig+0x986>
100051d0:	230c      	movs	r3, #12
100051d2:	e00a      	b.n	100051ea <UART_SetConfig+0x986>
100051d4:	230a      	movs	r3, #10
100051d6:	e008      	b.n	100051ea <UART_SetConfig+0x986>
100051d8:	2308      	movs	r3, #8
100051da:	e006      	b.n	100051ea <UART_SetConfig+0x986>
100051dc:	2306      	movs	r3, #6
100051de:	e004      	b.n	100051ea <UART_SetConfig+0x986>
100051e0:	2304      	movs	r3, #4
100051e2:	e002      	b.n	100051ea <UART_SetConfig+0x986>
100051e4:	2302      	movs	r3, #2
100051e6:	e000      	b.n	100051ea <UART_SetConfig+0x986>
100051e8:	2301      	movs	r3, #1
100051ea:	4a6f      	ldr	r2, [pc, #444]	@ (100053a8 <UART_SetConfig+0xb44>)
100051ec:	fbb2 f3f3 	udiv	r3, r2, r3
100051f0:	005a      	lsls	r2, r3, #1
100051f2:	687b      	ldr	r3, [r7, #4]
100051f4:	685b      	ldr	r3, [r3, #4]
100051f6:	085b      	lsrs	r3, r3, #1
100051f8:	441a      	add	r2, r3
100051fa:	687b      	ldr	r3, [r7, #4]
100051fc:	685b      	ldr	r3, [r3, #4]
100051fe:	fbb2 f3f3 	udiv	r3, r2, r3
10005202:	b29b      	uxth	r3, r3
10005204:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005206:	e05c      	b.n	100052c2 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005208:	687b      	ldr	r3, [r7, #4]
1000520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000520c:	2b00      	cmp	r3, #0
1000520e:	d044      	beq.n	1000529a <UART_SetConfig+0xa36>
10005210:	687b      	ldr	r3, [r7, #4]
10005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005214:	2b01      	cmp	r3, #1
10005216:	d03e      	beq.n	10005296 <UART_SetConfig+0xa32>
10005218:	687b      	ldr	r3, [r7, #4]
1000521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000521c:	2b02      	cmp	r3, #2
1000521e:	d038      	beq.n	10005292 <UART_SetConfig+0xa2e>
10005220:	687b      	ldr	r3, [r7, #4]
10005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005224:	2b03      	cmp	r3, #3
10005226:	d032      	beq.n	1000528e <UART_SetConfig+0xa2a>
10005228:	687b      	ldr	r3, [r7, #4]
1000522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000522c:	2b04      	cmp	r3, #4
1000522e:	d02c      	beq.n	1000528a <UART_SetConfig+0xa26>
10005230:	687b      	ldr	r3, [r7, #4]
10005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005234:	2b05      	cmp	r3, #5
10005236:	d026      	beq.n	10005286 <UART_SetConfig+0xa22>
10005238:	687b      	ldr	r3, [r7, #4]
1000523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000523c:	2b06      	cmp	r3, #6
1000523e:	d020      	beq.n	10005282 <UART_SetConfig+0xa1e>
10005240:	687b      	ldr	r3, [r7, #4]
10005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005244:	2b07      	cmp	r3, #7
10005246:	d01a      	beq.n	1000527e <UART_SetConfig+0xa1a>
10005248:	687b      	ldr	r3, [r7, #4]
1000524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000524c:	2b08      	cmp	r3, #8
1000524e:	d014      	beq.n	1000527a <UART_SetConfig+0xa16>
10005250:	687b      	ldr	r3, [r7, #4]
10005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005254:	2b09      	cmp	r3, #9
10005256:	d00e      	beq.n	10005276 <UART_SetConfig+0xa12>
10005258:	687b      	ldr	r3, [r7, #4]
1000525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000525c:	2b0a      	cmp	r3, #10
1000525e:	d008      	beq.n	10005272 <UART_SetConfig+0xa0e>
10005260:	687b      	ldr	r3, [r7, #4]
10005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005264:	2b0b      	cmp	r3, #11
10005266:	d102      	bne.n	1000526e <UART_SetConfig+0xa0a>
10005268:	f44f 7380 	mov.w	r3, #256	@ 0x100
1000526c:	e016      	b.n	1000529c <UART_SetConfig+0xa38>
1000526e:	2301      	movs	r3, #1
10005270:	e014      	b.n	1000529c <UART_SetConfig+0xa38>
10005272:	2380      	movs	r3, #128	@ 0x80
10005274:	e012      	b.n	1000529c <UART_SetConfig+0xa38>
10005276:	2340      	movs	r3, #64	@ 0x40
10005278:	e010      	b.n	1000529c <UART_SetConfig+0xa38>
1000527a:	2320      	movs	r3, #32
1000527c:	e00e      	b.n	1000529c <UART_SetConfig+0xa38>
1000527e:	2310      	movs	r3, #16
10005280:	e00c      	b.n	1000529c <UART_SetConfig+0xa38>
10005282:	230c      	movs	r3, #12
10005284:	e00a      	b.n	1000529c <UART_SetConfig+0xa38>
10005286:	230a      	movs	r3, #10
10005288:	e008      	b.n	1000529c <UART_SetConfig+0xa38>
1000528a:	2308      	movs	r3, #8
1000528c:	e006      	b.n	1000529c <UART_SetConfig+0xa38>
1000528e:	2306      	movs	r3, #6
10005290:	e004      	b.n	1000529c <UART_SetConfig+0xa38>
10005292:	2304      	movs	r3, #4
10005294:	e002      	b.n	1000529c <UART_SetConfig+0xa38>
10005296:	2302      	movs	r3, #2
10005298:	e000      	b.n	1000529c <UART_SetConfig+0xa38>
1000529a:	2301      	movs	r3, #1
1000529c:	4a43      	ldr	r2, [pc, #268]	@ (100053ac <UART_SetConfig+0xb48>)
1000529e:	fbb2 f3f3 	udiv	r3, r2, r3
100052a2:	005a      	lsls	r2, r3, #1
100052a4:	687b      	ldr	r3, [r7, #4]
100052a6:	685b      	ldr	r3, [r3, #4]
100052a8:	085b      	lsrs	r3, r3, #1
100052aa:	441a      	add	r2, r3
100052ac:	687b      	ldr	r3, [r7, #4]
100052ae:	685b      	ldr	r3, [r3, #4]
100052b0:	fbb2 f3f3 	udiv	r3, r2, r3
100052b4:	b29b      	uxth	r3, r3
100052b6:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100052b8:	e003      	b.n	100052c2 <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
100052ba:	2301      	movs	r3, #1
100052bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
100052c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100052c4:	2b0f      	cmp	r3, #15
100052c6:	d916      	bls.n	100052f6 <UART_SetConfig+0xa92>
100052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100052ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
100052ce:	d212      	bcs.n	100052f6 <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
100052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100052d2:	b29b      	uxth	r3, r3
100052d4:	f023 030f 	bic.w	r3, r3, #15
100052d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
100052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100052dc:	085b      	lsrs	r3, r3, #1
100052de:	b29b      	uxth	r3, r3
100052e0:	f003 0307 	and.w	r3, r3, #7
100052e4:	b29a      	uxth	r2, r3
100052e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
100052e8:	4313      	orrs	r3, r2
100052ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      huart->Instance->BRR = brrtemp;
100052ec:	687b      	ldr	r3, [r7, #4]
100052ee:	681b      	ldr	r3, [r3, #0]
100052f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
100052f2:	60da      	str	r2, [r3, #12]
100052f4:	e342      	b.n	1000597c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
100052f6:	2301      	movs	r3, #1
100052f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
100052fc:	e33e      	b.n	1000597c <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
100052fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10005302:	2b20      	cmp	r3, #32
10005304:	dc4a      	bgt.n	1000539c <UART_SetConfig+0xb38>
10005306:	2b00      	cmp	r3, #0
10005308:	f2c0 8325 	blt.w	10005956 <UART_SetConfig+0x10f2>
1000530c:	2b20      	cmp	r3, #32
1000530e:	f200 8322 	bhi.w	10005956 <UART_SetConfig+0x10f2>
10005312:	a201      	add	r2, pc, #4	@ (adr r2, 10005318 <UART_SetConfig+0xab4>)
10005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005318:	100053b1 	.word	0x100053b1
1000531c:	10005467 	.word	0x10005467
10005320:	1000551d 	.word	0x1000551d
10005324:	10005957 	.word	0x10005957
10005328:	100055d3 	.word	0x100055d3
1000532c:	10005957 	.word	0x10005957
10005330:	10005957 	.word	0x10005957
10005334:	10005957 	.word	0x10005957
10005338:	1000568d 	.word	0x1000568d
1000533c:	10005957 	.word	0x10005957
10005340:	10005957 	.word	0x10005957
10005344:	10005957 	.word	0x10005957
10005348:	10005957 	.word	0x10005957
1000534c:	10005957 	.word	0x10005957
10005350:	10005957 	.word	0x10005957
10005354:	10005957 	.word	0x10005957
10005358:	10005747 	.word	0x10005747
1000535c:	10005957 	.word	0x10005957
10005360:	10005957 	.word	0x10005957
10005364:	10005957 	.word	0x10005957
10005368:	10005957 	.word	0x10005957
1000536c:	10005957 	.word	0x10005957
10005370:	10005957 	.word	0x10005957
10005374:	10005957 	.word	0x10005957
10005378:	10005957 	.word	0x10005957
1000537c:	10005957 	.word	0x10005957
10005380:	10005957 	.word	0x10005957
10005384:	10005957 	.word	0x10005957
10005388:	10005957 	.word	0x10005957
1000538c:	10005957 	.word	0x10005957
10005390:	10005957 	.word	0x10005957
10005394:	10005957 	.word	0x10005957
10005398:	100057f7 	.word	0x100057f7
1000539c:	2b40      	cmp	r3, #64	@ 0x40
1000539e:	f000 8282 	beq.w	100058a6 <UART_SetConfig+0x1042>
100053a2:	e2d8      	b.n	10005956 <UART_SetConfig+0x10f2>
100053a4:	03d09000 	.word	0x03d09000
100053a8:	003d0900 	.word	0x003d0900
100053ac:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100053b0:	f7fc feea 	bl	10002188 <HAL_RCC_GetPCLK1Freq>
100053b4:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100053b6:	687b      	ldr	r3, [r7, #4]
100053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053ba:	2b00      	cmp	r3, #0
100053bc:	d044      	beq.n	10005448 <UART_SetConfig+0xbe4>
100053be:	687b      	ldr	r3, [r7, #4]
100053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053c2:	2b01      	cmp	r3, #1
100053c4:	d03e      	beq.n	10005444 <UART_SetConfig+0xbe0>
100053c6:	687b      	ldr	r3, [r7, #4]
100053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053ca:	2b02      	cmp	r3, #2
100053cc:	d038      	beq.n	10005440 <UART_SetConfig+0xbdc>
100053ce:	687b      	ldr	r3, [r7, #4]
100053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053d2:	2b03      	cmp	r3, #3
100053d4:	d032      	beq.n	1000543c <UART_SetConfig+0xbd8>
100053d6:	687b      	ldr	r3, [r7, #4]
100053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053da:	2b04      	cmp	r3, #4
100053dc:	d02c      	beq.n	10005438 <UART_SetConfig+0xbd4>
100053de:	687b      	ldr	r3, [r7, #4]
100053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053e2:	2b05      	cmp	r3, #5
100053e4:	d026      	beq.n	10005434 <UART_SetConfig+0xbd0>
100053e6:	687b      	ldr	r3, [r7, #4]
100053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053ea:	2b06      	cmp	r3, #6
100053ec:	d020      	beq.n	10005430 <UART_SetConfig+0xbcc>
100053ee:	687b      	ldr	r3, [r7, #4]
100053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053f2:	2b07      	cmp	r3, #7
100053f4:	d01a      	beq.n	1000542c <UART_SetConfig+0xbc8>
100053f6:	687b      	ldr	r3, [r7, #4]
100053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100053fa:	2b08      	cmp	r3, #8
100053fc:	d014      	beq.n	10005428 <UART_SetConfig+0xbc4>
100053fe:	687b      	ldr	r3, [r7, #4]
10005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005402:	2b09      	cmp	r3, #9
10005404:	d00e      	beq.n	10005424 <UART_SetConfig+0xbc0>
10005406:	687b      	ldr	r3, [r7, #4]
10005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000540a:	2b0a      	cmp	r3, #10
1000540c:	d008      	beq.n	10005420 <UART_SetConfig+0xbbc>
1000540e:	687b      	ldr	r3, [r7, #4]
10005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005412:	2b0b      	cmp	r3, #11
10005414:	d102      	bne.n	1000541c <UART_SetConfig+0xbb8>
10005416:	f44f 7380 	mov.w	r3, #256	@ 0x100
1000541a:	e016      	b.n	1000544a <UART_SetConfig+0xbe6>
1000541c:	2301      	movs	r3, #1
1000541e:	e014      	b.n	1000544a <UART_SetConfig+0xbe6>
10005420:	2380      	movs	r3, #128	@ 0x80
10005422:	e012      	b.n	1000544a <UART_SetConfig+0xbe6>
10005424:	2340      	movs	r3, #64	@ 0x40
10005426:	e010      	b.n	1000544a <UART_SetConfig+0xbe6>
10005428:	2320      	movs	r3, #32
1000542a:	e00e      	b.n	1000544a <UART_SetConfig+0xbe6>
1000542c:	2310      	movs	r3, #16
1000542e:	e00c      	b.n	1000544a <UART_SetConfig+0xbe6>
10005430:	230c      	movs	r3, #12
10005432:	e00a      	b.n	1000544a <UART_SetConfig+0xbe6>
10005434:	230a      	movs	r3, #10
10005436:	e008      	b.n	1000544a <UART_SetConfig+0xbe6>
10005438:	2308      	movs	r3, #8
1000543a:	e006      	b.n	1000544a <UART_SetConfig+0xbe6>
1000543c:	2306      	movs	r3, #6
1000543e:	e004      	b.n	1000544a <UART_SetConfig+0xbe6>
10005440:	2304      	movs	r3, #4
10005442:	e002      	b.n	1000544a <UART_SetConfig+0xbe6>
10005444:	2302      	movs	r3, #2
10005446:	e000      	b.n	1000544a <UART_SetConfig+0xbe6>
10005448:	2301      	movs	r3, #1
1000544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000544c:	fbb2 f2f3 	udiv	r2, r2, r3
10005450:	687b      	ldr	r3, [r7, #4]
10005452:	685b      	ldr	r3, [r3, #4]
10005454:	085b      	lsrs	r3, r3, #1
10005456:	441a      	add	r2, r3
10005458:	687b      	ldr	r3, [r7, #4]
1000545a:	685b      	ldr	r3, [r3, #4]
1000545c:	fbb2 f3f3 	udiv	r3, r2, r3
10005460:	b29b      	uxth	r3, r3
10005462:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005464:	e27b      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10005466:	f7fc feaa 	bl	100021be <HAL_RCC_GetPCLK2Freq>
1000546a:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000546c:	687b      	ldr	r3, [r7, #4]
1000546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005470:	2b00      	cmp	r3, #0
10005472:	d044      	beq.n	100054fe <UART_SetConfig+0xc9a>
10005474:	687b      	ldr	r3, [r7, #4]
10005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005478:	2b01      	cmp	r3, #1
1000547a:	d03e      	beq.n	100054fa <UART_SetConfig+0xc96>
1000547c:	687b      	ldr	r3, [r7, #4]
1000547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005480:	2b02      	cmp	r3, #2
10005482:	d038      	beq.n	100054f6 <UART_SetConfig+0xc92>
10005484:	687b      	ldr	r3, [r7, #4]
10005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005488:	2b03      	cmp	r3, #3
1000548a:	d032      	beq.n	100054f2 <UART_SetConfig+0xc8e>
1000548c:	687b      	ldr	r3, [r7, #4]
1000548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005490:	2b04      	cmp	r3, #4
10005492:	d02c      	beq.n	100054ee <UART_SetConfig+0xc8a>
10005494:	687b      	ldr	r3, [r7, #4]
10005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005498:	2b05      	cmp	r3, #5
1000549a:	d026      	beq.n	100054ea <UART_SetConfig+0xc86>
1000549c:	687b      	ldr	r3, [r7, #4]
1000549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054a0:	2b06      	cmp	r3, #6
100054a2:	d020      	beq.n	100054e6 <UART_SetConfig+0xc82>
100054a4:	687b      	ldr	r3, [r7, #4]
100054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054a8:	2b07      	cmp	r3, #7
100054aa:	d01a      	beq.n	100054e2 <UART_SetConfig+0xc7e>
100054ac:	687b      	ldr	r3, [r7, #4]
100054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054b0:	2b08      	cmp	r3, #8
100054b2:	d014      	beq.n	100054de <UART_SetConfig+0xc7a>
100054b4:	687b      	ldr	r3, [r7, #4]
100054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054b8:	2b09      	cmp	r3, #9
100054ba:	d00e      	beq.n	100054da <UART_SetConfig+0xc76>
100054bc:	687b      	ldr	r3, [r7, #4]
100054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054c0:	2b0a      	cmp	r3, #10
100054c2:	d008      	beq.n	100054d6 <UART_SetConfig+0xc72>
100054c4:	687b      	ldr	r3, [r7, #4]
100054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100054c8:	2b0b      	cmp	r3, #11
100054ca:	d102      	bne.n	100054d2 <UART_SetConfig+0xc6e>
100054cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
100054d0:	e016      	b.n	10005500 <UART_SetConfig+0xc9c>
100054d2:	2301      	movs	r3, #1
100054d4:	e014      	b.n	10005500 <UART_SetConfig+0xc9c>
100054d6:	2380      	movs	r3, #128	@ 0x80
100054d8:	e012      	b.n	10005500 <UART_SetConfig+0xc9c>
100054da:	2340      	movs	r3, #64	@ 0x40
100054dc:	e010      	b.n	10005500 <UART_SetConfig+0xc9c>
100054de:	2320      	movs	r3, #32
100054e0:	e00e      	b.n	10005500 <UART_SetConfig+0xc9c>
100054e2:	2310      	movs	r3, #16
100054e4:	e00c      	b.n	10005500 <UART_SetConfig+0xc9c>
100054e6:	230c      	movs	r3, #12
100054e8:	e00a      	b.n	10005500 <UART_SetConfig+0xc9c>
100054ea:	230a      	movs	r3, #10
100054ec:	e008      	b.n	10005500 <UART_SetConfig+0xc9c>
100054ee:	2308      	movs	r3, #8
100054f0:	e006      	b.n	10005500 <UART_SetConfig+0xc9c>
100054f2:	2306      	movs	r3, #6
100054f4:	e004      	b.n	10005500 <UART_SetConfig+0xc9c>
100054f6:	2304      	movs	r3, #4
100054f8:	e002      	b.n	10005500 <UART_SetConfig+0xc9c>
100054fa:	2302      	movs	r3, #2
100054fc:	e000      	b.n	10005500 <UART_SetConfig+0xc9c>
100054fe:	2301      	movs	r3, #1
10005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10005502:	fbb2 f2f3 	udiv	r2, r2, r3
10005506:	687b      	ldr	r3, [r7, #4]
10005508:	685b      	ldr	r3, [r3, #4]
1000550a:	085b      	lsrs	r3, r3, #1
1000550c:	441a      	add	r2, r3
1000550e:	687b      	ldr	r3, [r7, #4]
10005510:	685b      	ldr	r3, [r3, #4]
10005512:	fbb2 f3f3 	udiv	r3, r2, r3
10005516:	b29b      	uxth	r3, r3
10005518:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
1000551a:	e220      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000551c:	f7fc fe6a 	bl	100021f4 <HAL_RCC_GetPCLK5Freq>
10005520:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005522:	687b      	ldr	r3, [r7, #4]
10005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005526:	2b00      	cmp	r3, #0
10005528:	d044      	beq.n	100055b4 <UART_SetConfig+0xd50>
1000552a:	687b      	ldr	r3, [r7, #4]
1000552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000552e:	2b01      	cmp	r3, #1
10005530:	d03e      	beq.n	100055b0 <UART_SetConfig+0xd4c>
10005532:	687b      	ldr	r3, [r7, #4]
10005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005536:	2b02      	cmp	r3, #2
10005538:	d038      	beq.n	100055ac <UART_SetConfig+0xd48>
1000553a:	687b      	ldr	r3, [r7, #4]
1000553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000553e:	2b03      	cmp	r3, #3
10005540:	d032      	beq.n	100055a8 <UART_SetConfig+0xd44>
10005542:	687b      	ldr	r3, [r7, #4]
10005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005546:	2b04      	cmp	r3, #4
10005548:	d02c      	beq.n	100055a4 <UART_SetConfig+0xd40>
1000554a:	687b      	ldr	r3, [r7, #4]
1000554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000554e:	2b05      	cmp	r3, #5
10005550:	d026      	beq.n	100055a0 <UART_SetConfig+0xd3c>
10005552:	687b      	ldr	r3, [r7, #4]
10005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005556:	2b06      	cmp	r3, #6
10005558:	d020      	beq.n	1000559c <UART_SetConfig+0xd38>
1000555a:	687b      	ldr	r3, [r7, #4]
1000555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000555e:	2b07      	cmp	r3, #7
10005560:	d01a      	beq.n	10005598 <UART_SetConfig+0xd34>
10005562:	687b      	ldr	r3, [r7, #4]
10005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005566:	2b08      	cmp	r3, #8
10005568:	d014      	beq.n	10005594 <UART_SetConfig+0xd30>
1000556a:	687b      	ldr	r3, [r7, #4]
1000556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000556e:	2b09      	cmp	r3, #9
10005570:	d00e      	beq.n	10005590 <UART_SetConfig+0xd2c>
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005576:	2b0a      	cmp	r3, #10
10005578:	d008      	beq.n	1000558c <UART_SetConfig+0xd28>
1000557a:	687b      	ldr	r3, [r7, #4]
1000557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000557e:	2b0b      	cmp	r3, #11
10005580:	d102      	bne.n	10005588 <UART_SetConfig+0xd24>
10005582:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005586:	e016      	b.n	100055b6 <UART_SetConfig+0xd52>
10005588:	2301      	movs	r3, #1
1000558a:	e014      	b.n	100055b6 <UART_SetConfig+0xd52>
1000558c:	2380      	movs	r3, #128	@ 0x80
1000558e:	e012      	b.n	100055b6 <UART_SetConfig+0xd52>
10005590:	2340      	movs	r3, #64	@ 0x40
10005592:	e010      	b.n	100055b6 <UART_SetConfig+0xd52>
10005594:	2320      	movs	r3, #32
10005596:	e00e      	b.n	100055b6 <UART_SetConfig+0xd52>
10005598:	2310      	movs	r3, #16
1000559a:	e00c      	b.n	100055b6 <UART_SetConfig+0xd52>
1000559c:	230c      	movs	r3, #12
1000559e:	e00a      	b.n	100055b6 <UART_SetConfig+0xd52>
100055a0:	230a      	movs	r3, #10
100055a2:	e008      	b.n	100055b6 <UART_SetConfig+0xd52>
100055a4:	2308      	movs	r3, #8
100055a6:	e006      	b.n	100055b6 <UART_SetConfig+0xd52>
100055a8:	2306      	movs	r3, #6
100055aa:	e004      	b.n	100055b6 <UART_SetConfig+0xd52>
100055ac:	2304      	movs	r3, #4
100055ae:	e002      	b.n	100055b6 <UART_SetConfig+0xd52>
100055b0:	2302      	movs	r3, #2
100055b2:	e000      	b.n	100055b6 <UART_SetConfig+0xd52>
100055b4:	2301      	movs	r3, #1
100055b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100055b8:	fbb2 f2f3 	udiv	r2, r2, r3
100055bc:	687b      	ldr	r3, [r7, #4]
100055be:	685b      	ldr	r3, [r3, #4]
100055c0:	085b      	lsrs	r3, r3, #1
100055c2:	441a      	add	r2, r3
100055c4:	687b      	ldr	r3, [r7, #4]
100055c6:	685b      	ldr	r3, [r3, #4]
100055c8:	fbb2 f3f3 	udiv	r3, r2, r3
100055cc:	b29b      	uxth	r3, r3
100055ce:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100055d0:	e1c5      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100055d2:	f107 0314 	add.w	r3, r7, #20
100055d6:	4618      	mov	r0, r3
100055d8:	f7fc fbd4 	bl	10001d84 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100055dc:	69ba      	ldr	r2, [r7, #24]
100055de:	687b      	ldr	r3, [r7, #4]
100055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055e2:	2b00      	cmp	r3, #0
100055e4:	d044      	beq.n	10005670 <UART_SetConfig+0xe0c>
100055e6:	687b      	ldr	r3, [r7, #4]
100055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055ea:	2b01      	cmp	r3, #1
100055ec:	d03e      	beq.n	1000566c <UART_SetConfig+0xe08>
100055ee:	687b      	ldr	r3, [r7, #4]
100055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055f2:	2b02      	cmp	r3, #2
100055f4:	d038      	beq.n	10005668 <UART_SetConfig+0xe04>
100055f6:	687b      	ldr	r3, [r7, #4]
100055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055fa:	2b03      	cmp	r3, #3
100055fc:	d032      	beq.n	10005664 <UART_SetConfig+0xe00>
100055fe:	687b      	ldr	r3, [r7, #4]
10005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005602:	2b04      	cmp	r3, #4
10005604:	d02c      	beq.n	10005660 <UART_SetConfig+0xdfc>
10005606:	687b      	ldr	r3, [r7, #4]
10005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000560a:	2b05      	cmp	r3, #5
1000560c:	d026      	beq.n	1000565c <UART_SetConfig+0xdf8>
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005612:	2b06      	cmp	r3, #6
10005614:	d020      	beq.n	10005658 <UART_SetConfig+0xdf4>
10005616:	687b      	ldr	r3, [r7, #4]
10005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000561a:	2b07      	cmp	r3, #7
1000561c:	d01a      	beq.n	10005654 <UART_SetConfig+0xdf0>
1000561e:	687b      	ldr	r3, [r7, #4]
10005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005622:	2b08      	cmp	r3, #8
10005624:	d014      	beq.n	10005650 <UART_SetConfig+0xdec>
10005626:	687b      	ldr	r3, [r7, #4]
10005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000562a:	2b09      	cmp	r3, #9
1000562c:	d00e      	beq.n	1000564c <UART_SetConfig+0xde8>
1000562e:	687b      	ldr	r3, [r7, #4]
10005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005632:	2b0a      	cmp	r3, #10
10005634:	d008      	beq.n	10005648 <UART_SetConfig+0xde4>
10005636:	687b      	ldr	r3, [r7, #4]
10005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000563a:	2b0b      	cmp	r3, #11
1000563c:	d102      	bne.n	10005644 <UART_SetConfig+0xde0>
1000563e:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005642:	e016      	b.n	10005672 <UART_SetConfig+0xe0e>
10005644:	2301      	movs	r3, #1
10005646:	e014      	b.n	10005672 <UART_SetConfig+0xe0e>
10005648:	2380      	movs	r3, #128	@ 0x80
1000564a:	e012      	b.n	10005672 <UART_SetConfig+0xe0e>
1000564c:	2340      	movs	r3, #64	@ 0x40
1000564e:	e010      	b.n	10005672 <UART_SetConfig+0xe0e>
10005650:	2320      	movs	r3, #32
10005652:	e00e      	b.n	10005672 <UART_SetConfig+0xe0e>
10005654:	2310      	movs	r3, #16
10005656:	e00c      	b.n	10005672 <UART_SetConfig+0xe0e>
10005658:	230c      	movs	r3, #12
1000565a:	e00a      	b.n	10005672 <UART_SetConfig+0xe0e>
1000565c:	230a      	movs	r3, #10
1000565e:	e008      	b.n	10005672 <UART_SetConfig+0xe0e>
10005660:	2308      	movs	r3, #8
10005662:	e006      	b.n	10005672 <UART_SetConfig+0xe0e>
10005664:	2306      	movs	r3, #6
10005666:	e004      	b.n	10005672 <UART_SetConfig+0xe0e>
10005668:	2304      	movs	r3, #4
1000566a:	e002      	b.n	10005672 <UART_SetConfig+0xe0e>
1000566c:	2302      	movs	r3, #2
1000566e:	e000      	b.n	10005672 <UART_SetConfig+0xe0e>
10005670:	2301      	movs	r3, #1
10005672:	fbb2 f2f3 	udiv	r2, r2, r3
10005676:	687b      	ldr	r3, [r7, #4]
10005678:	685b      	ldr	r3, [r3, #4]
1000567a:	085b      	lsrs	r3, r3, #1
1000567c:	441a      	add	r2, r3
1000567e:	687b      	ldr	r3, [r7, #4]
10005680:	685b      	ldr	r3, [r3, #4]
10005682:	fbb2 f3f3 	udiv	r3, r2, r3
10005686:	b29b      	uxth	r3, r3
10005688:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
1000568a:	e168      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000568c:	f107 0308 	add.w	r3, r7, #8
10005690:	4618      	mov	r0, r3
10005692:	f7fc fc71 	bl	10001f78 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005696:	68fa      	ldr	r2, [r7, #12]
10005698:	687b      	ldr	r3, [r7, #4]
1000569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000569c:	2b00      	cmp	r3, #0
1000569e:	d044      	beq.n	1000572a <UART_SetConfig+0xec6>
100056a0:	687b      	ldr	r3, [r7, #4]
100056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056a4:	2b01      	cmp	r3, #1
100056a6:	d03e      	beq.n	10005726 <UART_SetConfig+0xec2>
100056a8:	687b      	ldr	r3, [r7, #4]
100056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056ac:	2b02      	cmp	r3, #2
100056ae:	d038      	beq.n	10005722 <UART_SetConfig+0xebe>
100056b0:	687b      	ldr	r3, [r7, #4]
100056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056b4:	2b03      	cmp	r3, #3
100056b6:	d032      	beq.n	1000571e <UART_SetConfig+0xeba>
100056b8:	687b      	ldr	r3, [r7, #4]
100056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056bc:	2b04      	cmp	r3, #4
100056be:	d02c      	beq.n	1000571a <UART_SetConfig+0xeb6>
100056c0:	687b      	ldr	r3, [r7, #4]
100056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056c4:	2b05      	cmp	r3, #5
100056c6:	d026      	beq.n	10005716 <UART_SetConfig+0xeb2>
100056c8:	687b      	ldr	r3, [r7, #4]
100056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056cc:	2b06      	cmp	r3, #6
100056ce:	d020      	beq.n	10005712 <UART_SetConfig+0xeae>
100056d0:	687b      	ldr	r3, [r7, #4]
100056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056d4:	2b07      	cmp	r3, #7
100056d6:	d01a      	beq.n	1000570e <UART_SetConfig+0xeaa>
100056d8:	687b      	ldr	r3, [r7, #4]
100056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056dc:	2b08      	cmp	r3, #8
100056de:	d014      	beq.n	1000570a <UART_SetConfig+0xea6>
100056e0:	687b      	ldr	r3, [r7, #4]
100056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056e4:	2b09      	cmp	r3, #9
100056e6:	d00e      	beq.n	10005706 <UART_SetConfig+0xea2>
100056e8:	687b      	ldr	r3, [r7, #4]
100056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056ec:	2b0a      	cmp	r3, #10
100056ee:	d008      	beq.n	10005702 <UART_SetConfig+0xe9e>
100056f0:	687b      	ldr	r3, [r7, #4]
100056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056f4:	2b0b      	cmp	r3, #11
100056f6:	d102      	bne.n	100056fe <UART_SetConfig+0xe9a>
100056f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
100056fc:	e016      	b.n	1000572c <UART_SetConfig+0xec8>
100056fe:	2301      	movs	r3, #1
10005700:	e014      	b.n	1000572c <UART_SetConfig+0xec8>
10005702:	2380      	movs	r3, #128	@ 0x80
10005704:	e012      	b.n	1000572c <UART_SetConfig+0xec8>
10005706:	2340      	movs	r3, #64	@ 0x40
10005708:	e010      	b.n	1000572c <UART_SetConfig+0xec8>
1000570a:	2320      	movs	r3, #32
1000570c:	e00e      	b.n	1000572c <UART_SetConfig+0xec8>
1000570e:	2310      	movs	r3, #16
10005710:	e00c      	b.n	1000572c <UART_SetConfig+0xec8>
10005712:	230c      	movs	r3, #12
10005714:	e00a      	b.n	1000572c <UART_SetConfig+0xec8>
10005716:	230a      	movs	r3, #10
10005718:	e008      	b.n	1000572c <UART_SetConfig+0xec8>
1000571a:	2308      	movs	r3, #8
1000571c:	e006      	b.n	1000572c <UART_SetConfig+0xec8>
1000571e:	2306      	movs	r3, #6
10005720:	e004      	b.n	1000572c <UART_SetConfig+0xec8>
10005722:	2304      	movs	r3, #4
10005724:	e002      	b.n	1000572c <UART_SetConfig+0xec8>
10005726:	2302      	movs	r3, #2
10005728:	e000      	b.n	1000572c <UART_SetConfig+0xec8>
1000572a:	2301      	movs	r3, #1
1000572c:	fbb2 f2f3 	udiv	r2, r2, r3
10005730:	687b      	ldr	r3, [r7, #4]
10005732:	685b      	ldr	r3, [r3, #4]
10005734:	085b      	lsrs	r3, r3, #1
10005736:	441a      	add	r2, r3
10005738:	687b      	ldr	r3, [r7, #4]
1000573a:	685b      	ldr	r3, [r3, #4]
1000573c:	fbb2 f3f3 	udiv	r3, r2, r3
10005740:	b29b      	uxth	r3, r3
10005742:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005744:	e10b      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005746:	687b      	ldr	r3, [r7, #4]
10005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000574a:	2b00      	cmp	r3, #0
1000574c:	d044      	beq.n	100057d8 <UART_SetConfig+0xf74>
1000574e:	687b      	ldr	r3, [r7, #4]
10005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005752:	2b01      	cmp	r3, #1
10005754:	d03e      	beq.n	100057d4 <UART_SetConfig+0xf70>
10005756:	687b      	ldr	r3, [r7, #4]
10005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000575a:	2b02      	cmp	r3, #2
1000575c:	d038      	beq.n	100057d0 <UART_SetConfig+0xf6c>
1000575e:	687b      	ldr	r3, [r7, #4]
10005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005762:	2b03      	cmp	r3, #3
10005764:	d032      	beq.n	100057cc <UART_SetConfig+0xf68>
10005766:	687b      	ldr	r3, [r7, #4]
10005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000576a:	2b04      	cmp	r3, #4
1000576c:	d02c      	beq.n	100057c8 <UART_SetConfig+0xf64>
1000576e:	687b      	ldr	r3, [r7, #4]
10005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005772:	2b05      	cmp	r3, #5
10005774:	d026      	beq.n	100057c4 <UART_SetConfig+0xf60>
10005776:	687b      	ldr	r3, [r7, #4]
10005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000577a:	2b06      	cmp	r3, #6
1000577c:	d020      	beq.n	100057c0 <UART_SetConfig+0xf5c>
1000577e:	687b      	ldr	r3, [r7, #4]
10005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005782:	2b07      	cmp	r3, #7
10005784:	d01a      	beq.n	100057bc <UART_SetConfig+0xf58>
10005786:	687b      	ldr	r3, [r7, #4]
10005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000578a:	2b08      	cmp	r3, #8
1000578c:	d014      	beq.n	100057b8 <UART_SetConfig+0xf54>
1000578e:	687b      	ldr	r3, [r7, #4]
10005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005792:	2b09      	cmp	r3, #9
10005794:	d00e      	beq.n	100057b4 <UART_SetConfig+0xf50>
10005796:	687b      	ldr	r3, [r7, #4]
10005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000579a:	2b0a      	cmp	r3, #10
1000579c:	d008      	beq.n	100057b0 <UART_SetConfig+0xf4c>
1000579e:	687b      	ldr	r3, [r7, #4]
100057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100057a2:	2b0b      	cmp	r3, #11
100057a4:	d102      	bne.n	100057ac <UART_SetConfig+0xf48>
100057a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
100057aa:	e016      	b.n	100057da <UART_SetConfig+0xf76>
100057ac:	2301      	movs	r3, #1
100057ae:	e014      	b.n	100057da <UART_SetConfig+0xf76>
100057b0:	2380      	movs	r3, #128	@ 0x80
100057b2:	e012      	b.n	100057da <UART_SetConfig+0xf76>
100057b4:	2340      	movs	r3, #64	@ 0x40
100057b6:	e010      	b.n	100057da <UART_SetConfig+0xf76>
100057b8:	2320      	movs	r3, #32
100057ba:	e00e      	b.n	100057da <UART_SetConfig+0xf76>
100057bc:	2310      	movs	r3, #16
100057be:	e00c      	b.n	100057da <UART_SetConfig+0xf76>
100057c0:	230c      	movs	r3, #12
100057c2:	e00a      	b.n	100057da <UART_SetConfig+0xf76>
100057c4:	230a      	movs	r3, #10
100057c6:	e008      	b.n	100057da <UART_SetConfig+0xf76>
100057c8:	2308      	movs	r3, #8
100057ca:	e006      	b.n	100057da <UART_SetConfig+0xf76>
100057cc:	2306      	movs	r3, #6
100057ce:	e004      	b.n	100057da <UART_SetConfig+0xf76>
100057d0:	2304      	movs	r3, #4
100057d2:	e002      	b.n	100057da <UART_SetConfig+0xf76>
100057d4:	2302      	movs	r3, #2
100057d6:	e000      	b.n	100057da <UART_SetConfig+0xf76>
100057d8:	2301      	movs	r3, #1
100057da:	4a72      	ldr	r2, [pc, #456]	@ (100059a4 <UART_SetConfig+0x1140>)
100057dc:	fbb2 f2f3 	udiv	r2, r2, r3
100057e0:	687b      	ldr	r3, [r7, #4]
100057e2:	685b      	ldr	r3, [r3, #4]
100057e4:	085b      	lsrs	r3, r3, #1
100057e6:	441a      	add	r2, r3
100057e8:	687b      	ldr	r3, [r7, #4]
100057ea:	685b      	ldr	r3, [r3, #4]
100057ec:	fbb2 f3f3 	udiv	r3, r2, r3
100057f0:	b29b      	uxth	r3, r3
100057f2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100057f4:	e0b3      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100057f6:	687b      	ldr	r3, [r7, #4]
100057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100057fa:	2b00      	cmp	r3, #0
100057fc:	d044      	beq.n	10005888 <UART_SetConfig+0x1024>
100057fe:	687b      	ldr	r3, [r7, #4]
10005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005802:	2b01      	cmp	r3, #1
10005804:	d03e      	beq.n	10005884 <UART_SetConfig+0x1020>
10005806:	687b      	ldr	r3, [r7, #4]
10005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000580a:	2b02      	cmp	r3, #2
1000580c:	d038      	beq.n	10005880 <UART_SetConfig+0x101c>
1000580e:	687b      	ldr	r3, [r7, #4]
10005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005812:	2b03      	cmp	r3, #3
10005814:	d032      	beq.n	1000587c <UART_SetConfig+0x1018>
10005816:	687b      	ldr	r3, [r7, #4]
10005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000581a:	2b04      	cmp	r3, #4
1000581c:	d02c      	beq.n	10005878 <UART_SetConfig+0x1014>
1000581e:	687b      	ldr	r3, [r7, #4]
10005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005822:	2b05      	cmp	r3, #5
10005824:	d026      	beq.n	10005874 <UART_SetConfig+0x1010>
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000582a:	2b06      	cmp	r3, #6
1000582c:	d020      	beq.n	10005870 <UART_SetConfig+0x100c>
1000582e:	687b      	ldr	r3, [r7, #4]
10005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005832:	2b07      	cmp	r3, #7
10005834:	d01a      	beq.n	1000586c <UART_SetConfig+0x1008>
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000583a:	2b08      	cmp	r3, #8
1000583c:	d014      	beq.n	10005868 <UART_SetConfig+0x1004>
1000583e:	687b      	ldr	r3, [r7, #4]
10005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005842:	2b09      	cmp	r3, #9
10005844:	d00e      	beq.n	10005864 <UART_SetConfig+0x1000>
10005846:	687b      	ldr	r3, [r7, #4]
10005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000584a:	2b0a      	cmp	r3, #10
1000584c:	d008      	beq.n	10005860 <UART_SetConfig+0xffc>
1000584e:	687b      	ldr	r3, [r7, #4]
10005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005852:	2b0b      	cmp	r3, #11
10005854:	d102      	bne.n	1000585c <UART_SetConfig+0xff8>
10005856:	f44f 7380 	mov.w	r3, #256	@ 0x100
1000585a:	e016      	b.n	1000588a <UART_SetConfig+0x1026>
1000585c:	2301      	movs	r3, #1
1000585e:	e014      	b.n	1000588a <UART_SetConfig+0x1026>
10005860:	2380      	movs	r3, #128	@ 0x80
10005862:	e012      	b.n	1000588a <UART_SetConfig+0x1026>
10005864:	2340      	movs	r3, #64	@ 0x40
10005866:	e010      	b.n	1000588a <UART_SetConfig+0x1026>
10005868:	2320      	movs	r3, #32
1000586a:	e00e      	b.n	1000588a <UART_SetConfig+0x1026>
1000586c:	2310      	movs	r3, #16
1000586e:	e00c      	b.n	1000588a <UART_SetConfig+0x1026>
10005870:	230c      	movs	r3, #12
10005872:	e00a      	b.n	1000588a <UART_SetConfig+0x1026>
10005874:	230a      	movs	r3, #10
10005876:	e008      	b.n	1000588a <UART_SetConfig+0x1026>
10005878:	2308      	movs	r3, #8
1000587a:	e006      	b.n	1000588a <UART_SetConfig+0x1026>
1000587c:	2306      	movs	r3, #6
1000587e:	e004      	b.n	1000588a <UART_SetConfig+0x1026>
10005880:	2304      	movs	r3, #4
10005882:	e002      	b.n	1000588a <UART_SetConfig+0x1026>
10005884:	2302      	movs	r3, #2
10005886:	e000      	b.n	1000588a <UART_SetConfig+0x1026>
10005888:	2301      	movs	r3, #1
1000588a:	4a47      	ldr	r2, [pc, #284]	@ (100059a8 <UART_SetConfig+0x1144>)
1000588c:	fbb2 f2f3 	udiv	r2, r2, r3
10005890:	687b      	ldr	r3, [r7, #4]
10005892:	685b      	ldr	r3, [r3, #4]
10005894:	085b      	lsrs	r3, r3, #1
10005896:	441a      	add	r2, r3
10005898:	687b      	ldr	r3, [r7, #4]
1000589a:	685b      	ldr	r3, [r3, #4]
1000589c:	fbb2 f3f3 	udiv	r3, r2, r3
100058a0:	b29b      	uxth	r3, r3
100058a2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100058a4:	e05b      	b.n	1000595e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100058a6:	687b      	ldr	r3, [r7, #4]
100058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058aa:	2b00      	cmp	r3, #0
100058ac:	d044      	beq.n	10005938 <UART_SetConfig+0x10d4>
100058ae:	687b      	ldr	r3, [r7, #4]
100058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058b2:	2b01      	cmp	r3, #1
100058b4:	d03e      	beq.n	10005934 <UART_SetConfig+0x10d0>
100058b6:	687b      	ldr	r3, [r7, #4]
100058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058ba:	2b02      	cmp	r3, #2
100058bc:	d038      	beq.n	10005930 <UART_SetConfig+0x10cc>
100058be:	687b      	ldr	r3, [r7, #4]
100058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058c2:	2b03      	cmp	r3, #3
100058c4:	d032      	beq.n	1000592c <UART_SetConfig+0x10c8>
100058c6:	687b      	ldr	r3, [r7, #4]
100058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058ca:	2b04      	cmp	r3, #4
100058cc:	d02c      	beq.n	10005928 <UART_SetConfig+0x10c4>
100058ce:	687b      	ldr	r3, [r7, #4]
100058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058d2:	2b05      	cmp	r3, #5
100058d4:	d026      	beq.n	10005924 <UART_SetConfig+0x10c0>
100058d6:	687b      	ldr	r3, [r7, #4]
100058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058da:	2b06      	cmp	r3, #6
100058dc:	d020      	beq.n	10005920 <UART_SetConfig+0x10bc>
100058de:	687b      	ldr	r3, [r7, #4]
100058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058e2:	2b07      	cmp	r3, #7
100058e4:	d01a      	beq.n	1000591c <UART_SetConfig+0x10b8>
100058e6:	687b      	ldr	r3, [r7, #4]
100058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058ea:	2b08      	cmp	r3, #8
100058ec:	d014      	beq.n	10005918 <UART_SetConfig+0x10b4>
100058ee:	687b      	ldr	r3, [r7, #4]
100058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058f2:	2b09      	cmp	r3, #9
100058f4:	d00e      	beq.n	10005914 <UART_SetConfig+0x10b0>
100058f6:	687b      	ldr	r3, [r7, #4]
100058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058fa:	2b0a      	cmp	r3, #10
100058fc:	d008      	beq.n	10005910 <UART_SetConfig+0x10ac>
100058fe:	687b      	ldr	r3, [r7, #4]
10005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005902:	2b0b      	cmp	r3, #11
10005904:	d102      	bne.n	1000590c <UART_SetConfig+0x10a8>
10005906:	f44f 7380 	mov.w	r3, #256	@ 0x100
1000590a:	e016      	b.n	1000593a <UART_SetConfig+0x10d6>
1000590c:	2301      	movs	r3, #1
1000590e:	e014      	b.n	1000593a <UART_SetConfig+0x10d6>
10005910:	2380      	movs	r3, #128	@ 0x80
10005912:	e012      	b.n	1000593a <UART_SetConfig+0x10d6>
10005914:	2340      	movs	r3, #64	@ 0x40
10005916:	e010      	b.n	1000593a <UART_SetConfig+0x10d6>
10005918:	2320      	movs	r3, #32
1000591a:	e00e      	b.n	1000593a <UART_SetConfig+0x10d6>
1000591c:	2310      	movs	r3, #16
1000591e:	e00c      	b.n	1000593a <UART_SetConfig+0x10d6>
10005920:	230c      	movs	r3, #12
10005922:	e00a      	b.n	1000593a <UART_SetConfig+0x10d6>
10005924:	230a      	movs	r3, #10
10005926:	e008      	b.n	1000593a <UART_SetConfig+0x10d6>
10005928:	2308      	movs	r3, #8
1000592a:	e006      	b.n	1000593a <UART_SetConfig+0x10d6>
1000592c:	2306      	movs	r3, #6
1000592e:	e004      	b.n	1000593a <UART_SetConfig+0x10d6>
10005930:	2304      	movs	r3, #4
10005932:	e002      	b.n	1000593a <UART_SetConfig+0x10d6>
10005934:	2302      	movs	r3, #2
10005936:	e000      	b.n	1000593a <UART_SetConfig+0x10d6>
10005938:	2301      	movs	r3, #1
1000593a:	4a1c      	ldr	r2, [pc, #112]	@ (100059ac <UART_SetConfig+0x1148>)
1000593c:	fbb2 f2f3 	udiv	r2, r2, r3
10005940:	687b      	ldr	r3, [r7, #4]
10005942:	685b      	ldr	r3, [r3, #4]
10005944:	085b      	lsrs	r3, r3, #1
10005946:	441a      	add	r2, r3
10005948:	687b      	ldr	r3, [r7, #4]
1000594a:	685b      	ldr	r3, [r3, #4]
1000594c:	fbb2 f3f3 	udiv	r3, r2, r3
10005950:	b29b      	uxth	r3, r3
10005952:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005954:	e003      	b.n	1000595e <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
10005956:	2301      	movs	r3, #1
10005958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
1000595c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005960:	2b0f      	cmp	r3, #15
10005962:	d908      	bls.n	10005976 <UART_SetConfig+0x1112>
10005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
1000596a:	d204      	bcs.n	10005976 <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
1000596c:	687b      	ldr	r3, [r7, #4]
1000596e:	681b      	ldr	r3, [r3, #0]
10005970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10005972:	60da      	str	r2, [r3, #12]
10005974:	e002      	b.n	1000597c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10005976:	2301      	movs	r3, #1
10005978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000597c:	687b      	ldr	r3, [r7, #4]
1000597e:	2201      	movs	r2, #1
10005980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
10005984:	687b      	ldr	r3, [r7, #4]
10005986:	2201      	movs	r2, #1
10005988:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	2200      	movs	r2, #0
10005990:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->TxISR = NULL;
10005992:	687b      	ldr	r3, [r7, #4]
10005994:	2200      	movs	r2, #0
10005996:	671a      	str	r2, [r3, #112]	@ 0x70

  return ret;
10005998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
1000599c:	4618      	mov	r0, r3
1000599e:	3738      	adds	r7, #56	@ 0x38
100059a0:	46bd      	mov	sp, r7
100059a2:	bd80      	pop	{r7, pc}
100059a4:	03d09000 	.word	0x03d09000
100059a8:	003d0900 	.word	0x003d0900
100059ac:	016e3600 	.word	0x016e3600

100059b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
100059b0:	b480      	push	{r7}
100059b2:	b083      	sub	sp, #12
100059b4:	af00      	add	r7, sp, #0
100059b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
100059b8:	687b      	ldr	r3, [r7, #4]
100059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100059bc:	f003 0301 	and.w	r3, r3, #1
100059c0:	2b00      	cmp	r3, #0
100059c2:	d00a      	beq.n	100059da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
100059c4:	687b      	ldr	r3, [r7, #4]
100059c6:	681b      	ldr	r3, [r3, #0]
100059c8:	685b      	ldr	r3, [r3, #4]
100059ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
100059ce:	687b      	ldr	r3, [r7, #4]
100059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	681b      	ldr	r3, [r3, #0]
100059d6:	430a      	orrs	r2, r1
100059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
100059da:	687b      	ldr	r3, [r7, #4]
100059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100059de:	f003 0302 	and.w	r3, r3, #2
100059e2:	2b00      	cmp	r3, #0
100059e4:	d00a      	beq.n	100059fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
100059e6:	687b      	ldr	r3, [r7, #4]
100059e8:	681b      	ldr	r3, [r3, #0]
100059ea:	685b      	ldr	r3, [r3, #4]
100059ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
100059f0:	687b      	ldr	r3, [r7, #4]
100059f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100059f4:	687b      	ldr	r3, [r7, #4]
100059f6:	681b      	ldr	r3, [r3, #0]
100059f8:	430a      	orrs	r2, r1
100059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
100059fc:	687b      	ldr	r3, [r7, #4]
100059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005a00:	f003 0304 	and.w	r3, r3, #4
10005a04:	2b00      	cmp	r3, #0
10005a06:	d00a      	beq.n	10005a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10005a08:	687b      	ldr	r3, [r7, #4]
10005a0a:	681b      	ldr	r3, [r3, #0]
10005a0c:	685b      	ldr	r3, [r3, #4]
10005a0e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
10005a12:	687b      	ldr	r3, [r7, #4]
10005a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10005a16:	687b      	ldr	r3, [r7, #4]
10005a18:	681b      	ldr	r3, [r3, #0]
10005a1a:	430a      	orrs	r2, r1
10005a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10005a1e:	687b      	ldr	r3, [r7, #4]
10005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005a22:	f003 0308 	and.w	r3, r3, #8
10005a26:	2b00      	cmp	r3, #0
10005a28:	d00a      	beq.n	10005a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10005a2a:	687b      	ldr	r3, [r7, #4]
10005a2c:	681b      	ldr	r3, [r3, #0]
10005a2e:	685b      	ldr	r3, [r3, #4]
10005a30:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
10005a34:	687b      	ldr	r3, [r7, #4]
10005a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10005a38:	687b      	ldr	r3, [r7, #4]
10005a3a:	681b      	ldr	r3, [r3, #0]
10005a3c:	430a      	orrs	r2, r1
10005a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10005a40:	687b      	ldr	r3, [r7, #4]
10005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005a44:	f003 0310 	and.w	r3, r3, #16
10005a48:	2b00      	cmp	r3, #0
10005a4a:	d00a      	beq.n	10005a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10005a4c:	687b      	ldr	r3, [r7, #4]
10005a4e:	681b      	ldr	r3, [r3, #0]
10005a50:	689b      	ldr	r3, [r3, #8]
10005a52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
10005a56:	687b      	ldr	r3, [r7, #4]
10005a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10005a5a:	687b      	ldr	r3, [r7, #4]
10005a5c:	681b      	ldr	r3, [r3, #0]
10005a5e:	430a      	orrs	r2, r1
10005a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10005a62:	687b      	ldr	r3, [r7, #4]
10005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005a66:	f003 0320 	and.w	r3, r3, #32
10005a6a:	2b00      	cmp	r3, #0
10005a6c:	d00a      	beq.n	10005a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10005a6e:	687b      	ldr	r3, [r7, #4]
10005a70:	681b      	ldr	r3, [r3, #0]
10005a72:	689b      	ldr	r3, [r3, #8]
10005a74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
10005a78:	687b      	ldr	r3, [r7, #4]
10005a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10005a7c:	687b      	ldr	r3, [r7, #4]
10005a7e:	681b      	ldr	r3, [r3, #0]
10005a80:	430a      	orrs	r2, r1
10005a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10005a84:	687b      	ldr	r3, [r7, #4]
10005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10005a8c:	2b00      	cmp	r3, #0
10005a8e:	d01a      	beq.n	10005ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10005a90:	687b      	ldr	r3, [r7, #4]
10005a92:	681b      	ldr	r3, [r3, #0]
10005a94:	685b      	ldr	r3, [r3, #4]
10005a96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
10005a9a:	687b      	ldr	r3, [r7, #4]
10005a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10005a9e:	687b      	ldr	r3, [r7, #4]
10005aa0:	681b      	ldr	r3, [r3, #0]
10005aa2:	430a      	orrs	r2, r1
10005aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10005aa6:	687b      	ldr	r3, [r7, #4]
10005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
10005aae:	d10a      	bne.n	10005ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10005ab0:	687b      	ldr	r3, [r7, #4]
10005ab2:	681b      	ldr	r3, [r3, #0]
10005ab4:	685b      	ldr	r3, [r3, #4]
10005ab6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
10005aba:	687b      	ldr	r3, [r7, #4]
10005abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10005abe:	687b      	ldr	r3, [r7, #4]
10005ac0:	681b      	ldr	r3, [r3, #0]
10005ac2:	430a      	orrs	r2, r1
10005ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10005ac6:	687b      	ldr	r3, [r7, #4]
10005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10005ace:	2b00      	cmp	r3, #0
10005ad0:	d00a      	beq.n	10005ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10005ad2:	687b      	ldr	r3, [r7, #4]
10005ad4:	681b      	ldr	r3, [r3, #0]
10005ad6:	685b      	ldr	r3, [r3, #4]
10005ad8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
10005adc:	687b      	ldr	r3, [r7, #4]
10005ade:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10005ae0:	687b      	ldr	r3, [r7, #4]
10005ae2:	681b      	ldr	r3, [r3, #0]
10005ae4:	430a      	orrs	r2, r1
10005ae6:	605a      	str	r2, [r3, #4]
  }
}
10005ae8:	bf00      	nop
10005aea:	370c      	adds	r7, #12
10005aec:	46bd      	mov	sp, r7
10005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
10005af2:	4770      	bx	lr

10005af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10005af4:	b580      	push	{r7, lr}
10005af6:	b086      	sub	sp, #24
10005af8:	af02      	add	r7, sp, #8
10005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10005afc:	687b      	ldr	r3, [r7, #4]
10005afe:	2200      	movs	r2, #0
10005b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
10005b04:	f7fa fd24 	bl	10000550 <HAL_GetTick>
10005b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10005b0a:	687b      	ldr	r3, [r7, #4]
10005b0c:	681b      	ldr	r3, [r3, #0]
10005b0e:	681b      	ldr	r3, [r3, #0]
10005b10:	f003 0308 	and.w	r3, r3, #8
10005b14:	2b08      	cmp	r3, #8
10005b16:	d10e      	bne.n	10005b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005b18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
10005b1c:	9300      	str	r3, [sp, #0]
10005b1e:	68fb      	ldr	r3, [r7, #12]
10005b20:	2200      	movs	r2, #0
10005b22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
10005b26:	6878      	ldr	r0, [r7, #4]
10005b28:	f000 f82c 	bl	10005b84 <UART_WaitOnFlagUntilTimeout>
10005b2c:	4603      	mov	r3, r0
10005b2e:	2b00      	cmp	r3, #0
10005b30:	d001      	beq.n	10005b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005b32:	2303      	movs	r3, #3
10005b34:	e022      	b.n	10005b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10005b36:	687b      	ldr	r3, [r7, #4]
10005b38:	681b      	ldr	r3, [r3, #0]
10005b3a:	681b      	ldr	r3, [r3, #0]
10005b3c:	f003 0304 	and.w	r3, r3, #4
10005b40:	2b04      	cmp	r3, #4
10005b42:	d10e      	bne.n	10005b62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005b44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
10005b48:	9300      	str	r3, [sp, #0]
10005b4a:	68fb      	ldr	r3, [r7, #12]
10005b4c:	2200      	movs	r2, #0
10005b4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
10005b52:	6878      	ldr	r0, [r7, #4]
10005b54:	f000 f816 	bl	10005b84 <UART_WaitOnFlagUntilTimeout>
10005b58:	4603      	mov	r3, r0
10005b5a:	2b00      	cmp	r3, #0
10005b5c:	d001      	beq.n	10005b62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005b5e:	2303      	movs	r3, #3
10005b60:	e00c      	b.n	10005b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10005b62:	687b      	ldr	r3, [r7, #4]
10005b64:	2220      	movs	r2, #32
10005b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
10005b6a:	687b      	ldr	r3, [r7, #4]
10005b6c:	2220      	movs	r2, #32
10005b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_UNLOCK(huart);
10005b72:	687b      	ldr	r3, [r7, #4]
10005b74:	2200      	movs	r2, #0
10005b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10005b7a:	2300      	movs	r3, #0
}
10005b7c:	4618      	mov	r0, r3
10005b7e:	3710      	adds	r7, #16
10005b80:	46bd      	mov	sp, r7
10005b82:	bd80      	pop	{r7, pc}

10005b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10005b84:	b580      	push	{r7, lr}
10005b86:	b084      	sub	sp, #16
10005b88:	af00      	add	r7, sp, #0
10005b8a:	60f8      	str	r0, [r7, #12]
10005b8c:	60b9      	str	r1, [r7, #8]
10005b8e:	603b      	str	r3, [r7, #0]
10005b90:	4613      	mov	r3, r2
10005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10005b94:	e062      	b.n	10005c5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10005b96:	69bb      	ldr	r3, [r7, #24]
10005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10005b9c:	d05e      	beq.n	10005c5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10005b9e:	f7fa fcd7 	bl	10000550 <HAL_GetTick>
10005ba2:	4602      	mov	r2, r0
10005ba4:	683b      	ldr	r3, [r7, #0]
10005ba6:	1ad3      	subs	r3, r2, r3
10005ba8:	69ba      	ldr	r2, [r7, #24]
10005baa:	429a      	cmp	r2, r3
10005bac:	d302      	bcc.n	10005bb4 <UART_WaitOnFlagUntilTimeout+0x30>
10005bae:	69bb      	ldr	r3, [r7, #24]
10005bb0:	2b00      	cmp	r3, #0
10005bb2:	d11d      	bne.n	10005bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10005bb4:	68fb      	ldr	r3, [r7, #12]
10005bb6:	681b      	ldr	r3, [r3, #0]
10005bb8:	681a      	ldr	r2, [r3, #0]
10005bba:	68fb      	ldr	r3, [r7, #12]
10005bbc:	681b      	ldr	r3, [r3, #0]
10005bbe:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
10005bc2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10005bc4:	68fb      	ldr	r3, [r7, #12]
10005bc6:	681b      	ldr	r3, [r3, #0]
10005bc8:	689a      	ldr	r2, [r3, #8]
10005bca:	68fb      	ldr	r3, [r7, #12]
10005bcc:	681b      	ldr	r3, [r3, #0]
10005bce:	f022 0201 	bic.w	r2, r2, #1
10005bd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
10005bd4:	68fb      	ldr	r3, [r7, #12]
10005bd6:	2220      	movs	r2, #32
10005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
10005bdc:	68fb      	ldr	r3, [r7, #12]
10005bde:	2220      	movs	r2, #32
10005be0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
10005be4:	68fb      	ldr	r3, [r7, #12]
10005be6:	2200      	movs	r2, #0
10005be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
10005bec:	2303      	movs	r3, #3
10005bee:	e045      	b.n	10005c7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10005bf0:	68fb      	ldr	r3, [r7, #12]
10005bf2:	681b      	ldr	r3, [r3, #0]
10005bf4:	681b      	ldr	r3, [r3, #0]
10005bf6:	f003 0304 	and.w	r3, r3, #4
10005bfa:	2b00      	cmp	r3, #0
10005bfc:	d02e      	beq.n	10005c5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10005bfe:	68fb      	ldr	r3, [r7, #12]
10005c00:	681b      	ldr	r3, [r3, #0]
10005c02:	69db      	ldr	r3, [r3, #28]
10005c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
10005c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
10005c0c:	d126      	bne.n	10005c5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10005c0e:	68fb      	ldr	r3, [r7, #12]
10005c10:	681b      	ldr	r3, [r3, #0]
10005c12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10005c16:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10005c18:	68fb      	ldr	r3, [r7, #12]
10005c1a:	681b      	ldr	r3, [r3, #0]
10005c1c:	681a      	ldr	r2, [r3, #0]
10005c1e:	68fb      	ldr	r3, [r7, #12]
10005c20:	681b      	ldr	r3, [r3, #0]
10005c22:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
10005c26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10005c28:	68fb      	ldr	r3, [r7, #12]
10005c2a:	681b      	ldr	r3, [r3, #0]
10005c2c:	689a      	ldr	r2, [r3, #8]
10005c2e:	68fb      	ldr	r3, [r7, #12]
10005c30:	681b      	ldr	r3, [r3, #0]
10005c32:	f022 0201 	bic.w	r2, r2, #1
10005c36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
10005c38:	68fb      	ldr	r3, [r7, #12]
10005c3a:	2220      	movs	r2, #32
10005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
10005c40:	68fb      	ldr	r3, [r7, #12]
10005c42:	2220      	movs	r2, #32
10005c44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
10005c48:	68fb      	ldr	r3, [r7, #12]
10005c4a:	2220      	movs	r2, #32
10005c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10005c50:	68fb      	ldr	r3, [r7, #12]
10005c52:	2200      	movs	r2, #0
10005c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          
          return HAL_TIMEOUT;
10005c58:	2303      	movs	r3, #3
10005c5a:	e00f      	b.n	10005c7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10005c5c:	68fb      	ldr	r3, [r7, #12]
10005c5e:	681b      	ldr	r3, [r3, #0]
10005c60:	69da      	ldr	r2, [r3, #28]
10005c62:	68bb      	ldr	r3, [r7, #8]
10005c64:	4013      	ands	r3, r2
10005c66:	68ba      	ldr	r2, [r7, #8]
10005c68:	429a      	cmp	r2, r3
10005c6a:	bf0c      	ite	eq
10005c6c:	2301      	moveq	r3, #1
10005c6e:	2300      	movne	r3, #0
10005c70:	b2db      	uxtb	r3, r3
10005c72:	461a      	mov	r2, r3
10005c74:	79fb      	ldrb	r3, [r7, #7]
10005c76:	429a      	cmp	r2, r3
10005c78:	d08d      	beq.n	10005b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10005c7a:	2300      	movs	r3, #0
}
10005c7c:	4618      	mov	r0, r3
10005c7e:	3710      	adds	r7, #16
10005c80:	46bd      	mov	sp, r7
10005c82:	bd80      	pop	{r7, pc}

10005c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10005c84:	b480      	push	{r7}
10005c86:	b085      	sub	sp, #20
10005c88:	af00      	add	r7, sp, #0
10005c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10005c8c:	687b      	ldr	r3, [r7, #4]
10005c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
10005c92:	2b01      	cmp	r3, #1
10005c94:	d101      	bne.n	10005c9a <HAL_UARTEx_DisableFifoMode+0x16>
10005c96:	2302      	movs	r3, #2
10005c98:	e027      	b.n	10005cea <HAL_UARTEx_DisableFifoMode+0x66>
10005c9a:	687b      	ldr	r3, [r7, #4]
10005c9c:	2201      	movs	r2, #1
10005c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005ca2:	687b      	ldr	r3, [r7, #4]
10005ca4:	2224      	movs	r2, #36	@ 0x24
10005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	681b      	ldr	r3, [r3, #0]
10005cae:	681b      	ldr	r3, [r3, #0]
10005cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005cb2:	687b      	ldr	r3, [r7, #4]
10005cb4:	681b      	ldr	r3, [r3, #0]
10005cb6:	681a      	ldr	r2, [r3, #0]
10005cb8:	687b      	ldr	r3, [r7, #4]
10005cba:	681b      	ldr	r3, [r3, #0]
10005cbc:	f022 0201 	bic.w	r2, r2, #1
10005cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10005cc2:	68fb      	ldr	r3, [r7, #12]
10005cc4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
10005cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10005cca:	687b      	ldr	r3, [r7, #4]
10005ccc:	2200      	movs	r2, #0
10005cce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005cd0:	687b      	ldr	r3, [r7, #4]
10005cd2:	681b      	ldr	r3, [r3, #0]
10005cd4:	68fa      	ldr	r2, [r7, #12]
10005cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005cd8:	687b      	ldr	r3, [r7, #4]
10005cda:	2220      	movs	r2, #32
10005cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005ce0:	687b      	ldr	r3, [r7, #4]
10005ce2:	2200      	movs	r2, #0
10005ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10005ce8:	2300      	movs	r3, #0
}
10005cea:	4618      	mov	r0, r3
10005cec:	3714      	adds	r7, #20
10005cee:	46bd      	mov	sp, r7
10005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
10005cf4:	4770      	bx	lr

10005cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10005cf6:	b580      	push	{r7, lr}
10005cf8:	b084      	sub	sp, #16
10005cfa:	af00      	add	r7, sp, #0
10005cfc:	6078      	str	r0, [r7, #4]
10005cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10005d00:	687b      	ldr	r3, [r7, #4]
10005d02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
10005d06:	2b01      	cmp	r3, #1
10005d08:	d101      	bne.n	10005d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
10005d0a:	2302      	movs	r3, #2
10005d0c:	e02d      	b.n	10005d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
10005d0e:	687b      	ldr	r3, [r7, #4]
10005d10:	2201      	movs	r2, #1
10005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005d16:	687b      	ldr	r3, [r7, #4]
10005d18:	2224      	movs	r2, #36	@ 0x24
10005d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005d1e:	687b      	ldr	r3, [r7, #4]
10005d20:	681b      	ldr	r3, [r3, #0]
10005d22:	681b      	ldr	r3, [r3, #0]
10005d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005d26:	687b      	ldr	r3, [r7, #4]
10005d28:	681b      	ldr	r3, [r3, #0]
10005d2a:	681a      	ldr	r2, [r3, #0]
10005d2c:	687b      	ldr	r3, [r7, #4]
10005d2e:	681b      	ldr	r3, [r3, #0]
10005d30:	f022 0201 	bic.w	r2, r2, #1
10005d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10005d36:	687b      	ldr	r3, [r7, #4]
10005d38:	681b      	ldr	r3, [r3, #0]
10005d3a:	689b      	ldr	r3, [r3, #8]
10005d3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
10005d40:	687b      	ldr	r3, [r7, #4]
10005d42:	681b      	ldr	r3, [r3, #0]
10005d44:	683a      	ldr	r2, [r7, #0]
10005d46:	430a      	orrs	r2, r1
10005d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10005d4a:	6878      	ldr	r0, [r7, #4]
10005d4c:	f000 f850 	bl	10005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005d50:	687b      	ldr	r3, [r7, #4]
10005d52:	681b      	ldr	r3, [r3, #0]
10005d54:	68fa      	ldr	r2, [r7, #12]
10005d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005d58:	687b      	ldr	r3, [r7, #4]
10005d5a:	2220      	movs	r2, #32
10005d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005d60:	687b      	ldr	r3, [r7, #4]
10005d62:	2200      	movs	r2, #0
10005d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10005d68:	2300      	movs	r3, #0
}
10005d6a:	4618      	mov	r0, r3
10005d6c:	3710      	adds	r7, #16
10005d6e:	46bd      	mov	sp, r7
10005d70:	bd80      	pop	{r7, pc}

10005d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10005d72:	b580      	push	{r7, lr}
10005d74:	b084      	sub	sp, #16
10005d76:	af00      	add	r7, sp, #0
10005d78:	6078      	str	r0, [r7, #4]
10005d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10005d7c:	687b      	ldr	r3, [r7, #4]
10005d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
10005d82:	2b01      	cmp	r3, #1
10005d84:	d101      	bne.n	10005d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
10005d86:	2302      	movs	r3, #2
10005d88:	e02d      	b.n	10005de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
10005d8a:	687b      	ldr	r3, [r7, #4]
10005d8c:	2201      	movs	r2, #1
10005d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005d92:	687b      	ldr	r3, [r7, #4]
10005d94:	2224      	movs	r2, #36	@ 0x24
10005d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005d9a:	687b      	ldr	r3, [r7, #4]
10005d9c:	681b      	ldr	r3, [r3, #0]
10005d9e:	681b      	ldr	r3, [r3, #0]
10005da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005da2:	687b      	ldr	r3, [r7, #4]
10005da4:	681b      	ldr	r3, [r3, #0]
10005da6:	681a      	ldr	r2, [r3, #0]
10005da8:	687b      	ldr	r3, [r7, #4]
10005daa:	681b      	ldr	r3, [r3, #0]
10005dac:	f022 0201 	bic.w	r2, r2, #1
10005db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10005db2:	687b      	ldr	r3, [r7, #4]
10005db4:	681b      	ldr	r3, [r3, #0]
10005db6:	689b      	ldr	r3, [r3, #8]
10005db8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
10005dbc:	687b      	ldr	r3, [r7, #4]
10005dbe:	681b      	ldr	r3, [r3, #0]
10005dc0:	683a      	ldr	r2, [r7, #0]
10005dc2:	430a      	orrs	r2, r1
10005dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10005dc6:	6878      	ldr	r0, [r7, #4]
10005dc8:	f000 f812 	bl	10005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005dcc:	687b      	ldr	r3, [r7, #4]
10005dce:	681b      	ldr	r3, [r3, #0]
10005dd0:	68fa      	ldr	r2, [r7, #12]
10005dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005dd4:	687b      	ldr	r3, [r7, #4]
10005dd6:	2220      	movs	r2, #32
10005dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005ddc:	687b      	ldr	r3, [r7, #4]
10005dde:	2200      	movs	r2, #0
10005de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10005de4:	2300      	movs	r3, #0
}
10005de6:	4618      	mov	r0, r3
10005de8:	3710      	adds	r7, #16
10005dea:	46bd      	mov	sp, r7
10005dec:	bd80      	pop	{r7, pc}
	...

10005df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10005df0:	b480      	push	{r7}
10005df2:	b089      	sub	sp, #36	@ 0x24
10005df4:	af00      	add	r7, sp, #0
10005df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
10005df8:	4a2d      	ldr	r2, [pc, #180]	@ (10005eb0 <UARTEx_SetNbDataToProcess+0xc0>)
10005dfa:	f107 0314 	add.w	r3, r7, #20
10005dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
10005e02:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
10005e06:	4a2b      	ldr	r2, [pc, #172]	@ (10005eb4 <UARTEx_SetNbDataToProcess+0xc4>)
10005e08:	f107 030c 	add.w	r3, r7, #12
10005e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
10005e10:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10005e14:	687b      	ldr	r3, [r7, #4]
10005e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10005e18:	2b00      	cmp	r3, #0
10005e1a:	d108      	bne.n	10005e2e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
10005e1c:	687b      	ldr	r3, [r7, #4]
10005e1e:	2201      	movs	r2, #1
10005e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
10005e24:	687b      	ldr	r3, [r7, #4]
10005e26:	2201      	movs	r2, #1
10005e28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
10005e2c:	e039      	b.n	10005ea2 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
10005e2e:	2308      	movs	r3, #8
10005e30:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
10005e32:	2308      	movs	r3, #8
10005e34:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10005e36:	687b      	ldr	r3, [r7, #4]
10005e38:	681b      	ldr	r3, [r3, #0]
10005e3a:	689b      	ldr	r3, [r3, #8]
10005e3c:	0e5b      	lsrs	r3, r3, #25
10005e3e:	b2db      	uxtb	r3, r3
10005e40:	f003 0307 	and.w	r3, r3, #7
10005e44:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10005e46:	687b      	ldr	r3, [r7, #4]
10005e48:	681b      	ldr	r3, [r3, #0]
10005e4a:	689b      	ldr	r3, [r3, #8]
10005e4c:	0f5b      	lsrs	r3, r3, #29
10005e4e:	b2db      	uxtb	r3, r3
10005e50:	f003 0307 	and.w	r3, r3, #7
10005e54:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
10005e56:	7fbb      	ldrb	r3, [r7, #30]
10005e58:	7f3a      	ldrb	r2, [r7, #28]
10005e5a:	3220      	adds	r2, #32
10005e5c:	443a      	add	r2, r7
10005e5e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10005e62:	fb02 f303 	mul.w	r3, r2, r3
10005e66:	7f3a      	ldrb	r2, [r7, #28]
10005e68:	3220      	adds	r2, #32
10005e6a:	443a      	add	r2, r7
10005e6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10005e70:	fb93 f3f2 	sdiv	r3, r3, r2
10005e74:	b29a      	uxth	r2, r3
10005e76:	687b      	ldr	r3, [r7, #4]
10005e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
10005e7c:	7ffb      	ldrb	r3, [r7, #31]
10005e7e:	7f7a      	ldrb	r2, [r7, #29]
10005e80:	3220      	adds	r2, #32
10005e82:	443a      	add	r2, r7
10005e84:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10005e88:	fb02 f303 	mul.w	r3, r2, r3
10005e8c:	7f7a      	ldrb	r2, [r7, #29]
10005e8e:	3220      	adds	r2, #32
10005e90:	443a      	add	r2, r7
10005e92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10005e96:	fb93 f3f2 	sdiv	r3, r3, r2
10005e9a:	b29a      	uxth	r2, r3
10005e9c:	687b      	ldr	r3, [r7, #4]
10005e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
10005ea2:	bf00      	nop
10005ea4:	3724      	adds	r7, #36	@ 0x24
10005ea6:	46bd      	mov	sp, r7
10005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
10005eac:	4770      	bx	lr
10005eae:	bf00      	nop
10005eb0:	10005f78 	.word	0x10005f78
10005eb4:	10005f80 	.word	0x10005f80

10005eb8 <memset>:
10005eb8:	4402      	add	r2, r0
10005eba:	4603      	mov	r3, r0
10005ebc:	4293      	cmp	r3, r2
10005ebe:	d100      	bne.n	10005ec2 <memset+0xa>
10005ec0:	4770      	bx	lr
10005ec2:	f803 1b01 	strb.w	r1, [r3], #1
10005ec6:	e7f9      	b.n	10005ebc <memset+0x4>

10005ec8 <__libc_init_array>:
10005ec8:	b570      	push	{r4, r5, r6, lr}
10005eca:	4d0d      	ldr	r5, [pc, #52]	@ (10005f00 <__libc_init_array+0x38>)
10005ecc:	4c0d      	ldr	r4, [pc, #52]	@ (10005f04 <__libc_init_array+0x3c>)
10005ece:	1b64      	subs	r4, r4, r5
10005ed0:	10a4      	asrs	r4, r4, #2
10005ed2:	2600      	movs	r6, #0
10005ed4:	42a6      	cmp	r6, r4
10005ed6:	d109      	bne.n	10005eec <__libc_init_array+0x24>
10005ed8:	4d0b      	ldr	r5, [pc, #44]	@ (10005f08 <__libc_init_array+0x40>)
10005eda:	4c0c      	ldr	r4, [pc, #48]	@ (10005f0c <__libc_init_array+0x44>)
10005edc:	f000 f818 	bl	10005f10 <_init>
10005ee0:	1b64      	subs	r4, r4, r5
10005ee2:	10a4      	asrs	r4, r4, #2
10005ee4:	2600      	movs	r6, #0
10005ee6:	42a6      	cmp	r6, r4
10005ee8:	d105      	bne.n	10005ef6 <__libc_init_array+0x2e>
10005eea:	bd70      	pop	{r4, r5, r6, pc}
10005eec:	f855 3b04 	ldr.w	r3, [r5], #4
10005ef0:	4798      	blx	r3
10005ef2:	3601      	adds	r6, #1
10005ef4:	e7ee      	b.n	10005ed4 <__libc_init_array+0xc>
10005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
10005efa:	4798      	blx	r3
10005efc:	3601      	adds	r6, #1
10005efe:	e7f2      	b.n	10005ee6 <__libc_init_array+0x1e>
10005f00:	10005f88 	.word	0x10005f88
10005f04:	10005f88 	.word	0x10005f88
10005f08:	10005f88 	.word	0x10005f88
10005f0c:	10005f8c 	.word	0x10005f8c

10005f10 <_init>:
10005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005f12:	bf00      	nop
10005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
10005f16:	bc08      	pop	{r3}
10005f18:	469e      	mov	lr, r3
10005f1a:	4770      	bx	lr

10005f1c <_fini>:
10005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005f1e:	bf00      	nop
10005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
10005f22:	bc08      	pop	{r3}
10005f24:	469e      	mov	lr, r3
10005f26:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10005f28 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10005f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 10005f60 <LoopForever+0x2>
  movs  r1, #0
10005f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10005f2e:	e003      	b.n	10005f38 <LoopCopyDataInit>

10005f30 <CopyDataInit>:
  ldr  r3, =_sidata
10005f30:	4b0c      	ldr	r3, [pc, #48]	@ (10005f64 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10005f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10005f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10005f36:	3104      	adds	r1, #4

10005f38 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10005f38:	480b      	ldr	r0, [pc, #44]	@ (10005f68 <LoopForever+0xa>)
  ldr  r3, =_edata
10005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (10005f6c <LoopForever+0xe>)
  adds  r2, r0, r1
10005f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10005f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10005f40:	d3f6      	bcc.n	10005f30 <CopyDataInit>
  ldr  r2, =_sbss
10005f42:	4a0b      	ldr	r2, [pc, #44]	@ (10005f70 <LoopForever+0x12>)
  b  LoopFillZerobss
10005f44:	e002      	b.n	10005f4c <LoopFillZerobss>

10005f46 <FillZerobss>:
  movs  r3, #0
10005f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
10005f48:	f842 3b04 	str.w	r3, [r2], #4

10005f4c <LoopFillZerobss>:
  ldr  r3, = _ebss
10005f4c:	4b09      	ldr	r3, [pc, #36]	@ (10005f74 <LoopForever+0x16>)
  cmp  r2, r3
10005f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10005f50:	d3f9      	bcc.n	10005f46 <FillZerobss>
  bl  SystemInit
10005f52:	f7fa f875 	bl	10000040 <SystemInit>
 bl __libc_init_array
10005f56:	f7ff ffb7 	bl	10005ec8 <__libc_init_array>
  bl main
10005f5a:	f7fa f897 	bl	1000008c <main>

10005f5e <LoopForever>:
    b LoopForever
10005f5e:	e7fe      	b.n	10005f5e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10005f60:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10005f64:	10005f90 	.word	0x10005f90
  ldr  r0, =_sdata
10005f68:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10005f6c:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10005f70:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10005f74:	100200c0 	.word	0x100200c0
