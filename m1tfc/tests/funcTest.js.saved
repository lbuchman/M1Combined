'use strict';

const common = require('../tests/common');
const delay = require('delay');
const testBoardLink = require('../src/testBoardLink');
const m1boot = require('./m1boot');
const exitCodes = require('../src/exitCodes');
const sqliteDriver = require('../utils/sqliteDriver');
const utils = require('../utils/utils');
const SshClient = require('../utils/SshClient');
const ProgramMac = require('../tests/programMAC');

const linuxDateYear = '2013';
const rtcDateYear = '2010';
const sRamSize = '128K';
// const sramFIle = '/sys/class/spi_master/spi0/spi0.0/mtd/mtd0/mtd0/nvmem';
const sramFIle = '/dev/mtd0';
const controlFIle = '/home/root/eeprom1';

const linuxDate = `${linuxDateYear}-11-19 15:11:40`;
const rtcDate = `${rtcDateYear}-11-19 15:11:40`;

let db;
let client;

module.exports = class FuncTest {
    constructor(serial, log) {
        this.logger = log;
        this.serial = serial;
    }

    /**
      * @public
      *
      * @param {object} log
      */
    async init(teensyDev, teensyDevBaudrate) {
        await testBoardLink.initSerial(teensyDev, teensyDevBaudrate, this.logger);
    }

    /**
      * @public
      *
      * @param
      */
    async run(programmer, tsv) {
        try {
            const macProgram = new ProgramMac(tsv, this.serial, this.logger);
            const macValue = await macProgram.getMac(programmer, false);
            const macAddress = macValue.mac;
            if (macAddress === '00:00:00:00:00:00') {
                throw new Error('MAC Address is not programmed');
            }

            await testBoardLink.retrieveIoDef();
            testBoardLink.getIoDef();
            await testBoardLink.targetPower(false);
            await testBoardLink.batteryOn(false);
            await m1boot.deActivateDFU();
            await delay(100);
            await testBoardLink.targetPower(true);
            await testBoardLink.batteryOn(true);
            db = sqliteDriver.initialize(this.logger);
            db.updateSerial(this.serial);
            this.logger.debug('Waiting for the target to boot');
            const vendorId = macAddress.split(':').slice(0, -3).join(':');
            const ipAddress = await utils.getTargetIpWait(vendorId, new Date() / 1000 + 60);
            await utils.waitTargetSshPortUp(ipAddress, new Date() / 1000 + 80);
            this.logger.info(`The Target IP=${ipAddress}`);
            client = new SshClient(ipAddress);
            await client.reConnect('root', 'root', null, new Date() / 1000 + 70);
            this.logger.debug('Connected to Target');
            this.logger.debug(`Setting RTC to ${rtcDate}`);
            this.logger.debug(`Setting Date to ${linuxDate}`);
            await client.execCommand(`date -s "${linuxDate}"`);
            await client.execCommand(`hwclock --set --date "${rtcDate}"`);
            await client.execCommand(`dd if=/dev/urandom of=${controlFIle} bs=${sRamSize} count=1`);
            await client.execCommand(`dd if=${controlFIle} of=${sramFIle} bs=${sRamSize} count=1`);
            await client.execCommand(`cmp ${controlFIle} ${sramFIle}`);
            this.logger.debug('WD reset');
            await client.execCommand('echo 1 > /proc/sys/kernel/sysrq');
            await client.execCommand('echo "#!/bin/sh\nrm -f  /etc/timestamp\nsleep 3\nsync\necho b > /proc/sysrq-trigger\n" > /home/root/wd');
            await client.execCommand('sync');
            client.execCommand('sh wd');
            await delay(1000);
            await client.disconnect();
            await delay(100);
            this.logger.debug('Waiting for reboot');
            await utils.waitTargetDown(ipAddress, new Date() / 1000 + 200);
            await client.reConnect('root', 'root', null, new Date() / 1000 + 30);
            this.logger.debug('Re-connected to Target');
            await delay(3000);
            const dateTime = await client.execCommand('hwclock -r | cut -b 1,2,3,4');
            if (rtcDateYear !== dateTime) throw new Error(`RTC validation failed expected ${rtcDateYear} got ${dateTime}`);
            await client.execCommand(`diff ${controlFIle} ${sramFIle}`);
            const isTheSame = await client.execCommand('echo $?');
            if (isTheSame !== '0') throw new Error('SPI RAM validation failed');
            await client.execCommand(`rm -f ${controlFIle}`);
            await client.execCommand('rm wd');
            const epochTime = Math.floor(+new Date() / 1000);
            this.logger.debug('SPI Flash and RTC are validated');
            await client.execCommand(`date -s "@${epochTime}"`);
            await client.execCommand('hwclock -w');
            await client.execCommand('halt');
            this.logger.debug('M1 is shut down');
            await delay(100);
            db.updateFuncTestStatus(this.serial, utils.boolToInt(true));
            this.logger.info('Functional test passed');
            await common.testEndSuccess();
            process.exit(exitCodes.normalExit);
        }
        catch (err) {
            this.logger.error(err);
            // if (err.stack) this.logger.debug(err.stack);
            await common.testFailed();
            await delay(100);
            process.exit(exitCodes.functTestFailed);
        }
    }
};
